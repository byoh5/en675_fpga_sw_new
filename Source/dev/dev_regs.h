#ifndef __DEV_REGS_H__
#define __DEV_REGS_H__

//******************************************************************************
// 1. TYPE DEF
//------------------------------------------------------------------------------
#include "dev_types.h"

//******************************************************************************
// 2. Memory Size & Base Address Definition
//------------------------------------------------------------------------------
// Mem size
#define SFLS_SIZE				(16*1024*1024)	//	 16MB
#define DDR_SIZE				(64*1024*1024)	//	 64MB	-	AP Memory AD251232 , Winbond W979H2KK , Etron EM6KA32HGDA
//#define DDR_SIZE				(128*1024*1024)	//	128MB	-	AP Memory 1Gb , Fidelix 1Gb, Winbond W97AH2KK
//#define DDR_SIZE				(256*1024*1024)	//	256MB	-	AP Memory AD220032
#define SRAM_SIZE				(    256*1024)	//	256kB

// Base address
#define SFLS_BASE				0xC0000000	//	OK
#define DDR_BASE				0x80000000	//	OK
#define SRAM_BASE				0xA0000000	//	OK

// RegBase address
#define REG_BASE_ISP			0x40000000
#define REG_BASE_H265			0x40100000
#define REG_BASE_H264       	0x40200000
#define REG_BASE_DDR        	0x40300000
#define REG_BASE_SFLS       	0x40400000
#define REG_BASE_SDIO0      	0x40500000
#define REG_BASE_SDIO1      	0x40600000
#define REG_BASE_ETH        	0x40700000
#define REG_BASE_AUD        	0x40800000
#define REG_BASE_UTIL       	0x40900000
#define REG_BASE_GPIO       	0x40A00000
#define REG_BASE_SPI0       	0x40B00000
#define REG_BASE_SPI1       	0x40C00000
#define REG_BASE_SPI2       	0x40D00000
#define REG_BASE_SPI3       	0x40E00000
#define REG_BASE_SPI4       	0x40F00000
#define REG_BASE_SPI5       	0x41000000
#define REG_BASE_SPI6       	0x41100000
#define REG_BASE_SPI7       	0x41200000
#define REG_BASE_SPI8       	0x41300000
#define REG_BASE_I2C0       	0x41400000
#define REG_BASE_I2C1       	0x41500000
#define REG_BASE_I2C2       	0x41600000
#define REG_BASE_I2C3       	0x41700000
#define REG_BASE_I2C4       	0x41800000
#define REG_BASE_I2C5       	0x41900000
#define REG_BASE_I2C6       	0x41A00000
#define REG_BASE_I2C7       	0x41B00000
#define REG_BASE_I2C8       	0x41C00000
#define REG_BASE_TIMER0     	0x41D00000
#define REG_BASE_TIMER1     	0x41E00000
#define REG_BASE_TIMER2     	0x41F00000
#define REG_BASE_TIMER3     	0x42000000
#define REG_BASE_TIMER4     	0x42100000
#define REG_BASE_TIMER5     	0x42200000
#define REG_BASE_TIMER6     	0x42300000
#define REG_BASE_TIMER7     	0x42400000
#define REG_BASE_TIMER8     	0x42500000
#define REG_BASE_TIMER9     	0x42600000
#define REG_BASE_TIMER10    	0x42700000
#define REG_BASE_TIMER11    	0x42800000
#define REG_BASE_TIMER12    	0x42900000
#define REG_BASE_TIMER13    	0x42A00000
#define REG_BASE_TIMER14    	0x42B00000
#define REG_BASE_TIMER15    	0x42C00000
#define REG_BASE_TIMER16    	0x42D00000
#define REG_BASE_TIMER17    	0x42E00000
#define REG_BASE_TIMER18    	0x42F00000
#define REG_BASE_TIMER19    	0x43000000
#define REG_BASE_TIMER20    	0x43100000
#define REG_BASE_TIMER21    	0x43200000
#define REG_BASE_TIMER22    	0x43300000
#define REG_BASE_TIMER23    	0x43400000
#define REG_BASE_TIMER24    	0x43500000
#define REG_BASE_TIMER25    	0x43600000
#define REG_BASE_TIMER26    	0x43700000
#define REG_BASE_TIMER27    	0x43800000
#define REG_BASE_TIMER28    	0x43900000
#define REG_BASE_TIMER29    	0x43A00000
#define REG_BASE_TIMER30    	0x43B00000
#define REG_BASE_TIMER31    	0x43C00000
#define REG_BASE_TIMER32    	0x43D00000
#define REG_BASE_TIMER33    	0x43E00000
#define REG_BASE_TIMER34    	0x43F00000
#define REG_BASE_TIMER35    	0x44000000
#define REG_BASE_TIMER36    	0x44100000
#define REG_BASE_TIMER37    	0x44200000
#define REG_BASE_TIMER38    	0x44300000
#define REG_BASE_UART0      	0x44400000
#define REG_BASE_UART1      	0x44500000
#define REG_BASE_UART2      	0x44600000
#define REG_BASE_UART3      	0x44700000
#define REG_BASE_UART4      	0x44800000
#define REG_BASE_UART5      	0x44900000
#define REG_BASE_UART6      	0x44A00000
#define REG_BASE_UART7      	0x44B00000
#define REG_BASE_UART8      	0x44C00000
#define REG_BASE_AES			0x44D00000
#define REG_BASE_SHA			0x44E00000
#define REG_BASE_CHKSUM			0x44F00000
#define REG_BASE_SYS			0x45000000
#define REG_BASE_DMA0			0x45100000
#define REG_BASE_DMA1			0x45100020
#define REG_BASE_I2S			0x45200000

//******************************************************************************
// 3. IRQ Number Def
//------------------------------------------------------------------------------

#define	IRQ_ISP0				  0
#define	IRQ_ISP1				  1
#define	IRQ_ISP2				  2
#define	IRQ_ISP3				  3
#define	IRQ_ISP4				  4
#define	IRQ_ISP5				  5
#define	IRQ_ISP6				  6
#define	IRQ_ISP7				  7
#define	IRQ_ISP8				  8
#define	IRQ_ISP9				  9
#define	IRQ_ISP10   			 10
#define	IRQ_ISP11   			 11
#define	IRQ_ISP12   			 12
#define	IRQ_ISP13   			 13
#define	IRQ_ISP14   			 14
#define	IRQ_ISP15   			 15
#define	IRQ_ISP16   			 16
#define	IRQ_ISP17   			 17
#define	IRQ_ISP18   			 18
#define	IRQ_ISP19   			 19
#define	IRQ_ISP20   			 20
#define	IRQ_ISP21   			 21
#define	IRQ_ISP22   			 22
#define	IRQ_ISP23   			 23
#define	IRQ_H265				 24
#define	IRQ_H264				 25
#define	IRQ_DMA					 26
#define	IRQ_ETH_RX				 27
#define	IRQ_ETH_TX				 28
#define	IRQ_SDIO0				 29
#define	IRQ_SDIO1				 30
#define	IRQ_AES					 31
#define IRQ_SHA					 32
#define IRQ_CHECKSUM			 33
#define IRQ_SPI0				 34
#define	IRQ_SPI1				 35
#define	IRQ_SPI2				 36
#define	IRQ_SPI3				 37
#define	IRQ_SPI4				 38
#define	IRQ_SPI5				 39
#define	IRQ_SPI6				 40
#define	IRQ_SPI7				 41
#define	IRQ_SPI8				 42
#define	IRQ_I2C0				 43
#define	IRQ_I2C1				 44
#define	IRQ_I2C2				 45
#define	IRQ_I2C3				 46
#define	IRQ_I2C4				 47
#define	IRQ_I2C5				 48
#define	IRQ_I2C6				 49
#define	IRQ_I2C7				 50
#define	IRQ_I2C8				 51
#define	IRQ_UART0				 52
#define	IRQ_UART1				 53
#define	IRQ_UART2				 54
#define	IRQ_UART3				 55
#define	IRQ_UART4				 56
#define	IRQ_UART5				 57
#define	IRQ_UART6				 58
#define	IRQ_UART7				 59
#define	IRQ_UART8				 60
#define IRQ_TIMER0				 61
#define IRQ_TIMER1				 62
#define IRQ_TIMER2				 63
#define IRQ_TIMER3				 64
#define IRQ_TIMER4				 65
#define IRQ_TIMER5				 66
#define IRQ_TIMER6				 67
#define IRQ_TIMER7				 68
#define IRQ_TIMER8				 69
#define IRQ_TIMER9				 70
#define IRQ_TIMER10 			 71
#define IRQ_TIMER11 			 72
#define IRQ_TIMER12 			 73
#define IRQ_TIMER13 			 74
#define IRQ_TIMER14 			 75
#define IRQ_TIMER15 			 76
#define IRQ_TIMER16 			 77
#define IRQ_TIMER17 			 78
#define IRQ_TIMER18 			 79
#define IRQ_TIMER19 			 80
#define IRQ_TIMER20 			 81
#define IRQ_TIMER21 			 82
#define IRQ_TIMER22 			 83
#define IRQ_TIMER23 			 84
#define IRQ_TIMER24 			 85
#define IRQ_TIMER25 			 86
#define IRQ_TIMER26 			 87
#define IRQ_TIMER27 			 88
#define IRQ_TIMER28 			 89
#define IRQ_TIMER29 			 90
#define IRQ_TIMER30 			 91
#define IRQ_TIMER31 			 92
#define IRQ_TIMER32 			 93
#define IRQ_TIMER33 			 94
#define IRQ_TIMER34 			 95
#define IRQ_TIMER35 			 96
#define IRQ_TIMER36 			 97
#define IRQ_TIMER37 			 98
#define IRQ_TIMER38 			 99
#define	IRQ_GPIO0				100
#define	IRQ_GPIO1				101
#define	IRQ_GPIO2				102
#define	IRQ_GPIO3				103
#define	IRQ_GPIO4				104
#define	IRQ_GPIO5				105
#define	IRQ_GPIO6				106
#define	IRQ_GPIO7				107
#define	IRQ_GPIO8				108
#define	IRQ_GPIO9				109
#define	IRQ_GPIO10				110
#define	IRQ_GPIO11				111
#define	IRQ_GPIO12				112
#define	IRQ_GPIO13				113
#define	IRQ_GPIO14				114
#define	IRQ_GPIO15				115
#define	IRQ_GPIO16				116
#define	IRQ_GPIO17				117
#define	IRQ_GPIO18				118
#define	IRQ_GPIO19				119
#define	IRQ_GPIO20				120
#define	IRQ_GPIO21				121
#define	IRQ_GPIO22				122
#define	IRQ_GPIO23				123
#define	IRQ_GPIO24				124
#define	IRQ_GPIO25				125
#define	IRQ_GPIO26				126
#define	IRQ_GPIO27				127
#define	IRQ_GPIO28				128
#define	IRQ_GPIO29				129
#define	IRQ_GPIO30				130
#define	IRQ_GPIO31				131
#define	IRQ_GPIO32				132
#define	IRQ_GPIO33				133
#define	IRQ_GPIO34				134
#define	IRQ_GPIO35				135
#define	IRQ_GPIO36				136
#define	IRQ_GPIO37				137
#define	IRQ_GPIO38				138
#define	IRQ_GPIO39				139
#define	IRQ_GPIO40				140
#define	IRQ_GPIO41				141
#define	IRQ_GPIO42				142
#define	IRQ_GPIO43				143
#define	IRQ_GPIO44				144
#define	IRQ_GPIO45				145
#define	IRQ_GPIO46				146
#define	IRQ_GPIO47				147
#define	IRQ_GPIO48				148
#define	IRQ_GPIO49				149
#define	IRQ_GPIO50				150
#define	IRQ_GPIO51				151
#define	IRQ_GPIO52				152
#define	IRQ_GPIO53				153
#define	IRQ_GPIO54				154
#define	IRQ_GPIO55				155
#define	IRQ_GPIO56				156
#define	IRQ_GPIO57				157
#define	IRQ_GPIO58				158
#define	IRQ_GPIO59				159
#define	IRQ_GPIO60				160
#define	IRQ_GPIO61				161
#define	IRQ_GPIO62				162
#define	IRQ_GPIO63				163
#define	IRQ_GPIO64				164
#define	IRQ_GPIO65				165
#define	IRQ_GPIO66				166
#define	IRQ_GPIO67				167
#define	IRQ_GPIO68				168
#define	IRQ_GPIO69				169
#define	IRQ_GPIO70				170
#define	IRQ_GPIO71				171

#define OSC_FREQ				(25*1000*1000)
#define MCK_FREQ				(50*1000*1000)

#define DMA_CNT					2
#define GPIO_CNT				72
#define SDIO_CNT				2
#define UART_CNT				9
#define SPI_CNT					9
#define I2C_CNT					9
#define TIMER_CNT				39
#define USB_CNT					1
#define ETHERNET_CNT			1
#define I2S_CNT					1

//******************************************************************************
// x. Register
//------------------------------------------------------------------------------

_regs_ BF_5(UINT MR_ADR : 8 ,UINT MR_WRDAT : 8 ,UINT _rev0 : 14, UINT MR_WE : 1 ,UINT MR_REQ : 1 ) _rege_ _DDR_0;
_regs_ BF_7(UINT MR1_OP : 8 ,UINT MR2_OP : 8 ,UINT _rev0 : 5, UINT MEM_SEL : 3 ,UINT _rev1 : 6, UINT PWR_CUR : 1 ,UINT PWR_REQ : 1 ) _rege_ _DDR_1;
_regs_ BF_2(UINT T_REFI : 16 , UINT _rev0 : 16 ) _rege_ _DDR_2;
_regs_ BF_6(UINT _rev0 : 1, UINT T_REFAB : 7 ,UINT _rev1 : 1, UINT ZQCS_EN : 1 ,UINT T_ZQCS : 6 ,UINT ZQCS_LMT : 16 ) _rege_ _DDR_3;
_regs_ BF_8(UINT T_RCD : 4 ,UINT T_RRD : 4 ,UINT T_WTR : 4 ,UINT T_RTP : 4 ,UINT T_WR : 4 ,UINT T_RP : 4 ,UINT T_MRR : 4 ,UINT T_MRW : 4 ) _rege_ _DDR_4;
_regs_ BF_5(UINT RD_EN_MASK : 8 ,UINT _rev0 : 16, UINT RD_VAL_EDGE : 1 ,UINT RD_VAL_LTC : 4 ,UINT WR_LTC : 3 ) _rege_ _DDR_5;
_regs_ BF_1(UINT MR_RDDAT0 : 32 ) _rege_ _DDR_6;
_regs_ BF_1(UINT MR_RDDAT1 : 32 ) _rege_ _DDR_7;
_regs_ BF_1(UINT MR_RDDAT2 : 32 ) _rege_ _DDR_8;
_regs_ BF_1(UINT MR_RDDAT3 : 32 ) _rege_ _DDR_9;
_regs_ BF_5(UINT _rev0 : 16, UINT DLY_CKEOUT : 4 ,UINT DLY_CSOUT : 4 ,UINT DLY_CA9OUT : 4 ,UINT DLY_CA8OUT : 4 ) _rege_ _DDR_10;
_regs_ BF_8(UINT DLY_CA7OUT : 4 ,UINT DLY_CA6OUT : 4 ,UINT DLY_CA5OUT : 4 ,UINT DLY_CA4OUT : 4 ,UINT DLY_CA3OUT : 4 ,UINT DLY_CA2OUT : 4 ,UINT DLY_CA1OUT : 4 ,UINT DLY_CA0OUT : 4 ) _rege_ _DDR_11;
_regs_ BF_3(UINT _rev0 : 24, UINT DLY_DQS0IN : 4 ,UINT DLY_DM0OUT : 4 ) _rege_ _DDR_12;
_regs_ BF_8(UINT DLY_DQ7OUT : 4 ,UINT DLY_DQ6OUT : 4 ,UINT DLY_DQ5OUT : 4 ,UINT DLY_DQ4OUT : 4 ,UINT DLY_DQ3OUT : 4 ,UINT DLY_DQ2OUT : 4 ,UINT DLY_DQ1OUT : 4 ,UINT DLY_DQ0OUT : 4 ) _rege_ _DDR_13;
_regs_ BF_3(UINT _rev0 : 24, UINT DLY_DQS1IN : 4 ,UINT DLY_DM1OUT : 4 ) _rege_ _DDR_14;
_regs_ BF_8(UINT DLY_DQ15OUT : 4 ,UINT DLY_DQ14OUT : 4 ,UINT DLY_DQ13OUT : 4 ,UINT DLY_DQ12OUT : 4 ,UINT DLY_DQ11OUT : 4 ,UINT DLY_DQ10OUT : 4 ,UINT DLY_DQ9OUT : 4 ,UINT DLY_DQ8OUT : 4 ) _rege_ _DDR_15;
_regs_ BF_3(UINT _rev0 : 24, UINT DLY_DQS2IN : 4 ,UINT DLY_DM2OUT : 4 ) _rege_ _DDR_16;
_regs_ BF_8(UINT DLY_DQ23OUT : 4 ,UINT DLY_DQ22OUT : 4 ,UINT DLY_DQ21OUT : 4 ,UINT DLY_DQ20OUT : 4 ,UINT DLY_DQ19OUT : 4 ,UINT DLY_DQ18OUT : 4 ,UINT DLY_DQ17OUT : 4 ,UINT DLY_DQ16OUT : 4 ) _rege_ _DDR_17;
_regs_ BF_3(UINT _rev0 : 24, UINT DLY_DQS3IN : 4 ,UINT DLY_DM3OUT : 4 ) _rege_ _DDR_18;
_regs_ BF_8(UINT DLY_DQ31OUT : 4 ,UINT DLY_DQ30OUT : 4 ,UINT DLY_DQ29OUT : 4 ,UINT DLY_DQ28OUT : 4 ,UINT DLY_DQ27OUT : 4 ,UINT DLY_DQ26OUT : 4 ,UINT DLY_DQ25OUT : 4 ,UINT DLY_DQ24OUT : 4 ) _rege_ _DDR_19;
_regs_ BF_3(UINT SFLS_ID : 24 ,UINT _rev0 : 7, UINT SFLS_ID_VAL : 1 ) _rege_ _SFLS_0;
_regs_ BF_4(UINT BUS_CMD_RD : 8 ,UINT BUS_CMD_WR : 8 ,UINT BUS_CMD_WREN : 8 ,UINT BUS_CMD_RDREG : 8 ) _rege_ _SFLS_1;
_regs_ BF_13(UINT BUS_RD_CMD_MODE : 2 ,UINT BUS_RD_ADR_MODE : 2 ,UINT BUS_RD_DAT_MODE : 2 ,UINT BUS_WR_CMD_MODE : 2 ,UINT BUS_WR_ADR_MODE : 2 ,UINT BUS_WR_DAT_MODE : 2 ,UINT BUS_WREN_CMD_MODE : 2 ,UINT BUS_RDREG_CMD_MODE : 2 ,UINT BUS_RDREG_DAT_MODE : 2 ,UINT BUS_ADR_EXT : 1 ,UINT BUS_GAP_EN      : 1 ,UINT BUS_GAP         : 4 , UINT _rev0 : 8 ) _rege_ _SFLS_2;
_regs_ BF_15(UINT USR_CMD_MODE : 2 ,UINT USR_ADR_MODE    : 2 ,UINT USR_DAT_MODE    : 2 ,UINT USR_ADR_EN      : 1 ,UINT USR_GAP_EN      : 1 ,UINT USR_RD_EN : 1 ,UINT USR_WR_EN : 1 ,UINT USR_GAP : 4 ,UINT USR_LEN : 2 ,UINT USR_ADR_EXT : 1 ,UINT USR_BUSY_EN : 1 ,UINT USR_BUSY_KEEP : 1 ,UINT _rev0 : 1, UINT USR_RDLTC : 4 ,UINT USR_CMD : 8 ) _rege_ _SFLS_3;
_regs_ BF_1(UINT USR_ADR : 32 ) _rege_ _SFLS_4;
_regs_ BF_1(UINT USR_RDDAT : 32 ) _rege_ _SFLS_5;
_regs_ BF_1(UINT USR_WRDAT : 32 ) _rege_ _SFLS_6;
_regs_ BF_10(UINT _rev0 : 4, UINT IO_RDLTC : 4 ,UINT _rev1 : 4, UINT IO_CLKDIV : 4 ,UINT _rev2 : 5, UINT IO_CS_GAP : 3 ,UINT _rev3 : 5, UINT USRBUS_REQ : 1 ,UINT BUS_REQ : 1 ,UINT USR_REQ : 1 ) _rege_ _SFLS_7;
_regs_ BF_8(UINT PIN0_IN : 1 ,UINT PIN0_OUT : 1 ,UINT PIN0_OEN : 1 ,UINT PIN0_IRQ_DIR : 1 ,UINT PIN0_IRQ_EN : 1 ,UINT PIN0_IRQ_CLR : 1 ,UINT PIN0_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_0;
_regs_ BF_8(UINT PIN1_IN : 1 ,UINT PIN1_OUT : 1 ,UINT PIN1_OEN : 1 ,UINT PIN1_IRQ_DIR : 1 ,UINT PIN1_IRQ_EN : 1 ,UINT PIN1_IRQ_CLR : 1 ,UINT PIN1_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_1;
_regs_ BF_8(UINT PIN2_IN : 1 ,UINT PIN2_OUT : 1 ,UINT PIN2_OEN : 1 ,UINT PIN2_IRQ_DIR : 1 ,UINT PIN2_IRQ_EN : 1 ,UINT PIN2_IRQ_CLR : 1 ,UINT PIN2_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_2;
_regs_ BF_8(UINT PIN3_IN : 1 ,UINT PIN3_OUT : 1 ,UINT PIN3_OEN : 1 ,UINT PIN3_IRQ_DIR : 1 ,UINT PIN3_IRQ_EN : 1 ,UINT PIN3_IRQ_CLR : 1 ,UINT PIN3_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_3;
_regs_ BF_8(UINT PIN4_IN : 1 ,UINT PIN4_OUT : 1 ,UINT PIN4_OEN : 1 ,UINT PIN4_IRQ_DIR : 1 ,UINT PIN4_IRQ_EN : 1 ,UINT PIN4_IRQ_CLR : 1 ,UINT PIN4_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_4;
_regs_ BF_8(UINT PIN5_IN : 1 ,UINT PIN5_OUT : 1 ,UINT PIN5_OEN : 1 ,UINT PIN5_IRQ_DIR : 1 ,UINT PIN5_IRQ_EN : 1 ,UINT PIN5_IRQ_CLR : 1 ,UINT PIN5_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_5;
_regs_ BF_8(UINT PIN6_IN : 1 ,UINT PIN6_OUT : 1 ,UINT PIN6_OEN : 1 ,UINT PIN6_IRQ_DIR : 1 ,UINT PIN6_IRQ_EN : 1 ,UINT PIN6_IRQ_CLR : 1 ,UINT PIN6_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_6;
_regs_ BF_8(UINT PIN7_IN : 1 ,UINT PIN7_OUT : 1 ,UINT PIN7_OEN : 1 ,UINT PIN7_IRQ_DIR : 1 ,UINT PIN7_IRQ_EN : 1 ,UINT PIN7_IRQ_CLR : 1 ,UINT PIN7_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_7;
_regs_ BF_8(UINT PIN8_IN : 1 ,UINT PIN8_OUT : 1 ,UINT PIN8_OEN : 1 ,UINT PIN8_IRQ_DIR : 1 ,UINT PIN8_IRQ_EN : 1 ,UINT PIN8_IRQ_CLR : 1 ,UINT PIN8_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_8;
_regs_ BF_8(UINT PIN9_IN : 1 ,UINT PIN9_OUT : 1 ,UINT PIN9_OEN : 1 ,UINT PIN9_IRQ_DIR : 1 ,UINT PIN9_IRQ_EN : 1 ,UINT PIN9_IRQ_CLR : 1 ,UINT PIN9_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_9;
_regs_ BF_8(UINT PIN10_IN : 1 ,UINT PIN10_OUT : 1 ,UINT PIN10_OEN : 1 ,UINT PIN10_IRQ_DIR : 1 ,UINT PIN10_IRQ_EN : 1 ,UINT PIN10_IRQ_CLR : 1 ,UINT PIN10_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_10;
_regs_ BF_8(UINT PIN11_IN : 1 ,UINT PIN11_OUT : 1 ,UINT PIN11_OEN : 1 ,UINT PIN11_IRQ_DIR : 1 ,UINT PIN11_IRQ_EN : 1 ,UINT PIN11_IRQ_CLR : 1 ,UINT PIN11_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_11;
_regs_ BF_8(UINT PIN12_IN : 1 ,UINT PIN12_OUT : 1 ,UINT PIN12_OEN : 1 ,UINT PIN12_IRQ_DIR : 1 ,UINT PIN12_IRQ_EN : 1 ,UINT PIN12_IRQ_CLR : 1 ,UINT PIN12_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_12;
_regs_ BF_8(UINT PIN13_IN : 1 ,UINT PIN13_OUT : 1 ,UINT PIN13_OEN : 1 ,UINT PIN13_IRQ_DIR : 1 ,UINT PIN13_IRQ_EN : 1 ,UINT PIN13_IRQ_CLR : 1 ,UINT PIN13_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_13;
_regs_ BF_8(UINT PIN14_IN : 1 ,UINT PIN14_OUT : 1 ,UINT PIN14_OEN : 1 ,UINT PIN14_IRQ_DIR : 1 ,UINT PIN14_IRQ_EN : 1 ,UINT PIN14_IRQ_CLR : 1 ,UINT PIN14_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_14;
_regs_ BF_8(UINT PIN15_IN : 1 ,UINT PIN15_OUT : 1 ,UINT PIN15_OEN : 1 ,UINT PIN15_IRQ_DIR : 1 ,UINT PIN15_IRQ_EN : 1 ,UINT PIN15_IRQ_CLR : 1 ,UINT PIN15_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_15;
_regs_ BF_8(UINT PIN16_IN : 1 ,UINT PIN16_OUT : 1 ,UINT PIN16_OEN : 1 ,UINT PIN16_IRQ_DIR : 1 ,UINT PIN16_IRQ_EN : 1 ,UINT PIN16_IRQ_CLR : 1 ,UINT PIN16_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_16;
_regs_ BF_8(UINT PIN17_IN : 1 ,UINT PIN17_OUT : 1 ,UINT PIN17_OEN : 1 ,UINT PIN17_IRQ_DIR : 1 ,UINT PIN17_IRQ_EN : 1 ,UINT PIN17_IRQ_CLR : 1 ,UINT PIN17_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_17;
_regs_ BF_8(UINT PIN18_IN : 1 ,UINT PIN18_OUT : 1 ,UINT PIN18_OEN : 1 ,UINT PIN18_IRQ_DIR : 1 ,UINT PIN18_IRQ_EN : 1 ,UINT PIN18_IRQ_CLR : 1 ,UINT PIN18_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_18;
_regs_ BF_8(UINT PIN19_IN : 1 ,UINT PIN19_OUT : 1 ,UINT PIN19_OEN : 1 ,UINT PIN19_IRQ_DIR : 1 ,UINT PIN19_IRQ_EN : 1 ,UINT PIN19_IRQ_CLR : 1 ,UINT PIN19_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_19;
_regs_ BF_8(UINT PIN20_IN : 1 ,UINT PIN20_OUT : 1 ,UINT PIN20_OEN : 1 ,UINT PIN20_IRQ_DIR : 1 ,UINT PIN20_IRQ_EN : 1 ,UINT PIN20_IRQ_CLR : 1 ,UINT PIN20_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_20;
_regs_ BF_8(UINT PIN21_IN : 1 ,UINT PIN21_OUT : 1 ,UINT PIN21_OEN : 1 ,UINT PIN21_IRQ_DIR : 1 ,UINT PIN21_IRQ_EN : 1 ,UINT PIN21_IRQ_CLR : 1 ,UINT PIN21_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_21;
_regs_ BF_8(UINT PIN22_IN : 1 ,UINT PIN22_OUT : 1 ,UINT PIN22_OEN : 1 ,UINT PIN22_IRQ_DIR : 1 ,UINT PIN22_IRQ_EN : 1 ,UINT PIN22_IRQ_CLR : 1 ,UINT PIN22_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_22;
_regs_ BF_8(UINT PIN23_IN : 1 ,UINT PIN23_OUT : 1 ,UINT PIN23_OEN : 1 ,UINT PIN23_IRQ_DIR : 1 ,UINT PIN23_IRQ_EN : 1 ,UINT PIN23_IRQ_CLR : 1 ,UINT PIN23_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_23;
_regs_ BF_8(UINT PIN24_IN : 1 ,UINT PIN24_OUT : 1 ,UINT PIN24_OEN : 1 ,UINT PIN24_IRQ_DIR : 1 ,UINT PIN24_IRQ_EN : 1 ,UINT PIN24_IRQ_CLR : 1 ,UINT PIN24_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_24;
_regs_ BF_8(UINT PIN25_IN : 1 ,UINT PIN25_OUT : 1 ,UINT PIN25_OEN : 1 ,UINT PIN25_IRQ_DIR : 1 ,UINT PIN25_IRQ_EN : 1 ,UINT PIN25_IRQ_CLR : 1 ,UINT PIN25_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_25;
_regs_ BF_8(UINT PIN26_IN : 1 ,UINT PIN26_OUT : 1 ,UINT PIN26_OEN : 1 ,UINT PIN26_IRQ_DIR : 1 ,UINT PIN26_IRQ_EN : 1 ,UINT PIN26_IRQ_CLR : 1 ,UINT PIN26_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_26;
_regs_ BF_8(UINT PIN27_IN : 1 ,UINT PIN27_OUT : 1 ,UINT PIN27_OEN : 1 ,UINT PIN27_IRQ_DIR : 1 ,UINT PIN27_IRQ_EN : 1 ,UINT PIN27_IRQ_CLR : 1 ,UINT PIN27_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_27;
_regs_ BF_8(UINT PIN28_IN : 1 ,UINT PIN28_OUT : 1 ,UINT PIN28_OEN : 1 ,UINT PIN28_IRQ_DIR : 1 ,UINT PIN28_IRQ_EN : 1 ,UINT PIN28_IRQ_CLR : 1 ,UINT PIN28_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_28;
_regs_ BF_8(UINT PIN29_IN : 1 ,UINT PIN29_OUT : 1 ,UINT PIN29_OEN : 1 ,UINT PIN29_IRQ_DIR : 1 ,UINT PIN29_IRQ_EN : 1 ,UINT PIN29_IRQ_CLR : 1 ,UINT PIN29_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_29;
_regs_ BF_8(UINT PIN30_IN : 1 ,UINT PIN30_OUT : 1 ,UINT PIN30_OEN : 1 ,UINT PIN30_IRQ_DIR : 1 ,UINT PIN30_IRQ_EN : 1 ,UINT PIN30_IRQ_CLR : 1 ,UINT PIN30_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_30;
_regs_ BF_8(UINT PIN31_IN : 1 ,UINT PIN31_OUT : 1 ,UINT PIN31_OEN : 1 ,UINT PIN31_IRQ_DIR : 1 ,UINT PIN31_IRQ_EN : 1 ,UINT PIN31_IRQ_CLR : 1 ,UINT PIN31_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_31;
_regs_ BF_8(UINT PIN32_IN : 1 ,UINT PIN32_OUT : 1 ,UINT PIN32_OEN : 1 ,UINT PIN32_IRQ_DIR : 1 ,UINT PIN32_IRQ_EN : 1 ,UINT PIN32_IRQ_CLR : 1 ,UINT PIN32_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_32;
_regs_ BF_8(UINT PIN33_IN : 1 ,UINT PIN33_OUT : 1 ,UINT PIN33_OEN : 1 ,UINT PIN33_IRQ_DIR : 1 ,UINT PIN33_IRQ_EN : 1 ,UINT PIN33_IRQ_CLR : 1 ,UINT PIN33_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_33;
_regs_ BF_8(UINT PIN34_IN : 1 ,UINT PIN34_OUT : 1 ,UINT PIN34_OEN : 1 ,UINT PIN34_IRQ_DIR : 1 ,UINT PIN34_IRQ_EN : 1 ,UINT PIN34_IRQ_CLR : 1 ,UINT PIN34_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_34;
_regs_ BF_8(UINT PIN35_IN : 1 ,UINT PIN35_OUT : 1 ,UINT PIN35_OEN : 1 ,UINT PIN35_IRQ_DIR : 1 ,UINT PIN35_IRQ_EN : 1 ,UINT PIN35_IRQ_CLR : 1 ,UINT PIN35_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_35;
_regs_ BF_8(UINT PIN36_IN : 1 ,UINT PIN36_OUT : 1 ,UINT PIN36_OEN : 1 ,UINT PIN36_IRQ_DIR : 1 ,UINT PIN36_IRQ_EN : 1 ,UINT PIN36_IRQ_CLR : 1 ,UINT PIN36_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_36;
_regs_ BF_8(UINT PIN37_IN : 1 ,UINT PIN37_OUT : 1 ,UINT PIN37_OEN : 1 ,UINT PIN37_IRQ_DIR : 1 ,UINT PIN37_IRQ_EN : 1 ,UINT PIN37_IRQ_CLR : 1 ,UINT PIN37_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_37;
_regs_ BF_8(UINT PIN38_IN : 1 ,UINT PIN38_OUT : 1 ,UINT PIN38_OEN : 1 ,UINT PIN38_IRQ_DIR : 1 ,UINT PIN38_IRQ_EN : 1 ,UINT PIN38_IRQ_CLR : 1 ,UINT PIN38_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_38;
_regs_ BF_8(UINT PIN39_IN : 1 ,UINT PIN39_OUT : 1 ,UINT PIN39_OEN : 1 ,UINT PIN39_IRQ_DIR : 1 ,UINT PIN39_IRQ_EN : 1 ,UINT PIN39_IRQ_CLR : 1 ,UINT PIN39_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_39;
_regs_ BF_8(UINT PIN40_IN : 1 ,UINT PIN40_OUT : 1 ,UINT PIN40_OEN : 1 ,UINT PIN40_IRQ_DIR : 1 ,UINT PIN40_IRQ_EN : 1 ,UINT PIN40_IRQ_CLR : 1 ,UINT PIN40_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_40;
_regs_ BF_8(UINT PIN41_IN : 1 ,UINT PIN41_OUT : 1 ,UINT PIN41_OEN : 1 ,UINT PIN41_IRQ_DIR : 1 ,UINT PIN41_IRQ_EN : 1 ,UINT PIN41_IRQ_CLR : 1 ,UINT PIN41_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_41;
_regs_ BF_8(UINT PIN42_IN : 1 ,UINT PIN42_OUT : 1 ,UINT PIN42_OEN : 1 ,UINT PIN42_IRQ_DIR : 1 ,UINT PIN42_IRQ_EN : 1 ,UINT PIN42_IRQ_CLR : 1 ,UINT PIN42_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_42;
_regs_ BF_8(UINT PIN43_IN : 1 ,UINT PIN43_OUT : 1 ,UINT PIN43_OEN : 1 ,UINT PIN43_IRQ_DIR : 1 ,UINT PIN43_IRQ_EN : 1 ,UINT PIN43_IRQ_CLR : 1 ,UINT PIN43_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_43;
_regs_ BF_8(UINT PIN44_IN : 1 ,UINT PIN44_OUT : 1 ,UINT PIN44_OEN : 1 ,UINT PIN44_IRQ_DIR : 1 ,UINT PIN44_IRQ_EN : 1 ,UINT PIN44_IRQ_CLR : 1 ,UINT PIN44_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_44;
_regs_ BF_8(UINT PIN45_IN : 1 ,UINT PIN45_OUT : 1 ,UINT PIN45_OEN : 1 ,UINT PIN45_IRQ_DIR : 1 ,UINT PIN45_IRQ_EN : 1 ,UINT PIN45_IRQ_CLR : 1 ,UINT PIN45_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_45;
_regs_ BF_8(UINT PIN46_IN : 1 ,UINT PIN46_OUT : 1 ,UINT PIN46_OEN : 1 ,UINT PIN46_IRQ_DIR : 1 ,UINT PIN46_IRQ_EN : 1 ,UINT PIN46_IRQ_CLR : 1 ,UINT PIN46_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_46;
_regs_ BF_8(UINT PIN47_IN : 1 ,UINT PIN47_OUT : 1 ,UINT PIN47_OEN : 1 ,UINT PIN47_IRQ_DIR : 1 ,UINT PIN47_IRQ_EN : 1 ,UINT PIN47_IRQ_CLR : 1 ,UINT PIN47_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_47;
_regs_ BF_8(UINT PIN48_IN : 1 ,UINT PIN48_OUT : 1 ,UINT PIN48_OEN : 1 ,UINT PIN48_IRQ_DIR : 1 ,UINT PIN48_IRQ_EN : 1 ,UINT PIN48_IRQ_CLR : 1 ,UINT PIN48_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_48;
_regs_ BF_8(UINT PIN49_IN : 1 ,UINT PIN49_OUT : 1 ,UINT PIN49_OEN : 1 ,UINT PIN49_IRQ_DIR : 1 ,UINT PIN49_IRQ_EN : 1 ,UINT PIN49_IRQ_CLR : 1 ,UINT PIN49_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_49;
_regs_ BF_8(UINT PIN50_IN : 1 ,UINT PIN50_OUT : 1 ,UINT PIN50_OEN : 1 ,UINT PIN50_IRQ_DIR : 1 ,UINT PIN50_IRQ_EN : 1 ,UINT PIN50_IRQ_CLR : 1 ,UINT PIN50_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_50;
_regs_ BF_8(UINT PIN51_IN : 1 ,UINT PIN51_OUT : 1 ,UINT PIN51_OEN : 1 ,UINT PIN51_IRQ_DIR : 1 ,UINT PIN51_IRQ_EN : 1 ,UINT PIN51_IRQ_CLR : 1 ,UINT PIN51_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_51;
_regs_ BF_8(UINT PIN52_IN : 1 ,UINT PIN52_OUT : 1 ,UINT PIN52_OEN : 1 ,UINT PIN52_IRQ_DIR : 1 ,UINT PIN52_IRQ_EN : 1 ,UINT PIN52_IRQ_CLR : 1 ,UINT PIN52_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_52;
_regs_ BF_8(UINT PIN53_IN : 1 ,UINT PIN53_OUT : 1 ,UINT PIN53_OEN : 1 ,UINT PIN53_IRQ_DIR : 1 ,UINT PIN53_IRQ_EN : 1 ,UINT PIN53_IRQ_CLR : 1 ,UINT PIN53_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_53;
_regs_ BF_8(UINT PIN54_IN : 1 ,UINT PIN54_OUT : 1 ,UINT PIN54_OEN : 1 ,UINT PIN54_IRQ_DIR : 1 ,UINT PIN54_IRQ_EN : 1 ,UINT PIN54_IRQ_CLR : 1 ,UINT PIN54_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_54;
_regs_ BF_8(UINT PIN55_IN : 1 ,UINT PIN55_OUT : 1 ,UINT PIN55_OEN : 1 ,UINT PIN55_IRQ_DIR : 1 ,UINT PIN55_IRQ_EN : 1 ,UINT PIN55_IRQ_CLR : 1 ,UINT PIN55_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_55;
_regs_ BF_8(UINT PIN56_IN : 1 ,UINT PIN56_OUT : 1 ,UINT PIN56_OEN : 1 ,UINT PIN56_IRQ_DIR : 1 ,UINT PIN56_IRQ_EN : 1 ,UINT PIN56_IRQ_CLR : 1 ,UINT PIN56_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_56;
_regs_ BF_8(UINT PIN57_IN : 1 ,UINT PIN57_OUT : 1 ,UINT PIN57_OEN : 1 ,UINT PIN57_IRQ_DIR : 1 ,UINT PIN57_IRQ_EN : 1 ,UINT PIN57_IRQ_CLR : 1 ,UINT PIN57_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_57;
_regs_ BF_8(UINT PIN58_IN : 1 ,UINT PIN58_OUT : 1 ,UINT PIN58_OEN : 1 ,UINT PIN58_IRQ_DIR : 1 ,UINT PIN58_IRQ_EN : 1 ,UINT PIN58_IRQ_CLR : 1 ,UINT PIN58_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_58;
_regs_ BF_8(UINT PIN59_IN : 1 ,UINT PIN59_OUT : 1 ,UINT PIN59_OEN : 1 ,UINT PIN59_IRQ_DIR : 1 ,UINT PIN59_IRQ_EN : 1 ,UINT PIN59_IRQ_CLR : 1 ,UINT PIN59_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_59;
_regs_ BF_8(UINT PIN60_IN : 1 ,UINT PIN60_OUT : 1 ,UINT PIN60_OEN : 1 ,UINT PIN60_IRQ_DIR : 1 ,UINT PIN60_IRQ_EN : 1 ,UINT PIN60_IRQ_CLR : 1 ,UINT PIN60_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_60;
_regs_ BF_8(UINT PIN61_IN : 1 ,UINT PIN61_OUT : 1 ,UINT PIN61_OEN : 1 ,UINT PIN61_IRQ_DIR : 1 ,UINT PIN61_IRQ_EN : 1 ,UINT PIN61_IRQ_CLR : 1 ,UINT PIN61_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_61;
_regs_ BF_8(UINT PIN62_IN : 1 ,UINT PIN62_OUT : 1 ,UINT PIN62_OEN : 1 ,UINT PIN62_IRQ_DIR : 1 ,UINT PIN62_IRQ_EN : 1 ,UINT PIN62_IRQ_CLR : 1 ,UINT PIN62_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_62;
_regs_ BF_8(UINT PIN63_IN : 1 ,UINT PIN63_OUT : 1 ,UINT PIN63_OEN : 1 ,UINT PIN63_IRQ_DIR : 1 ,UINT PIN63_IRQ_EN : 1 ,UINT PIN63_IRQ_CLR : 1 ,UINT PIN63_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_63;
_regs_ BF_8(UINT PIN64_IN : 1 ,UINT PIN64_OUT : 1 ,UINT PIN64_OEN : 1 ,UINT PIN64_IRQ_DIR : 1 ,UINT PIN64_IRQ_EN : 1 ,UINT PIN64_IRQ_CLR : 1 ,UINT PIN64_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_64;
_regs_ BF_8(UINT PIN65_IN : 1 ,UINT PIN65_OUT : 1 ,UINT PIN65_OEN : 1 ,UINT PIN65_IRQ_DIR : 1 ,UINT PIN65_IRQ_EN : 1 ,UINT PIN65_IRQ_CLR : 1 ,UINT PIN65_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_65;
_regs_ BF_8(UINT PIN66_IN : 1 ,UINT PIN66_OUT : 1 ,UINT PIN66_OEN : 1 ,UINT PIN66_IRQ_DIR : 1 ,UINT PIN66_IRQ_EN : 1 ,UINT PIN66_IRQ_CLR : 1 ,UINT PIN66_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_66;
_regs_ BF_8(UINT PIN67_IN : 1 ,UINT PIN67_OUT : 1 ,UINT PIN67_OEN : 1 ,UINT PIN67_IRQ_DIR : 1 ,UINT PIN67_IRQ_EN : 1 ,UINT PIN67_IRQ_CLR : 1 ,UINT PIN67_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_67;
_regs_ BF_8(UINT PIN68_IN : 1 ,UINT PIN68_OUT : 1 ,UINT PIN68_OEN : 1 ,UINT PIN68_IRQ_DIR : 1 ,UINT PIN68_IRQ_EN : 1 ,UINT PIN68_IRQ_CLR : 1 ,UINT PIN68_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_68;
_regs_ BF_8(UINT PIN69_IN : 1 ,UINT PIN69_OUT : 1 ,UINT PIN69_OEN : 1 ,UINT PIN69_IRQ_DIR : 1 ,UINT PIN69_IRQ_EN : 1 ,UINT PIN69_IRQ_CLR : 1 ,UINT PIN69_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_69;
_regs_ BF_8(UINT PIN70_IN : 1 ,UINT PIN70_OUT : 1 ,UINT PIN70_OEN : 1 ,UINT PIN70_IRQ_DIR : 1 ,UINT PIN70_IRQ_EN : 1 ,UINT PIN70_IRQ_CLR : 1 ,UINT PIN70_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_70;
_regs_ BF_8(UINT PIN71_IN : 1 ,UINT PIN71_OUT : 1 ,UINT PIN71_OEN : 1 ,UINT PIN71_IRQ_DIR : 1 ,UINT PIN71_IRQ_EN : 1 ,UINT PIN71_IRQ_CLR : 1 ,UINT PIN71_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_71;

_regs_ BF_8(UINT GPIO_IN : 1 ,UINT GPIO_OUT : 1 ,UINT GPIO_OEN : 1 ,UINT GPIO_IRQ_DIR : 1 ,UINT GPIO_IRQ_EN : 1 ,UINT GPIO_IRQ_CLR : 1 ,UINT GPIO_IRQ : 1 , UINT _rev0 : 25 ) _rege_ _GPIO_PIN;

_regs_ BF_2(UINT _rev0 : 24, UINT PIN_72_64_IN : 8 ) _rege_ _GPIO_72;
_regs_ BF_1(UINT PIN_63_32_IN : 32 ) _rege_ _GPIO_73;
_regs_ BF_1(UINT PIN_31_0_IN : 32 ) _rege_ _GPIO_74;
_regs_ BF_2(UINT _rev0 : 24, UINT PIN_72_64_OUT : 8 ) _rege_ _GPIO_75;
_regs_ BF_1(UINT PIN_63_32_OUT : 32 ) _rege_ _GPIO_76;
_regs_ BF_1(UINT PIN_31_0_OUT : 32 ) _rege_ _GPIO_77;
_regs_ BF_2(UINT _rev0 : 24, UINT PIN_72_64_OEN : 8 ) _rege_ _GPIO_78;
_regs_ BF_1(UINT PIN_63_32_OEN : 32 ) _rege_ _GPIO_79;
_regs_ BF_1(UINT PIN_31_0_OEN : 32 ) _rege_ _GPIO_80;
_regs_ BF_2(UINT _rev0 : 24, UINT PIN_72_64_IRQ_DIR : 8 ) _rege_ _GPIO_81;
_regs_ BF_1(UINT PIN_63_32_IRQ_DIR : 32 ) _rege_ _GPIO_82;
_regs_ BF_1(UINT PIN_31_0_IRQ_DIR : 32 ) _rege_ _GPIO_83;
_regs_ BF_2(UINT _rev0 : 24, UINT PIN_72_64_IRQ_EN : 8 ) _rege_ _GPIO_84;
_regs_ BF_1(UINT PIN_63_32_IRQ_EN : 32 ) _rege_ _GPIO_85;
_regs_ BF_1(UINT PIN_31_0_IRQ_EN : 32 ) _rege_ _GPIO_86;
_regs_ BF_2(UINT _rev0 : 24, UINT PIN_72_64_IRQ_CLR : 8 ) _rege_ _GPIO_87;
_regs_ BF_1(UINT PIN_63_32_IRQ_CLR : 32 ) _rege_ _GPIO_88;
_regs_ BF_1(UINT PIN_31_0_IRQ_CLR : 32 ) _rege_ _GPIO_89;
_regs_ BF_2(UINT _rev0 : 24, UINT PIN_72_64_IRQ : 8 ) _rege_ _GPIO_90;
_regs_ BF_1(UINT PIN_63_32_IRQ : 32 ) _rege_ _GPIO_91;
_regs_ BF_1(UINT PIN_31_0_IRQ : 32 ) _rege_ _GPIO_92;
_regs_ BF_16(UINT CLK_DIV : 12 ,UINT _rev0 : 6, UINT TX_TYPE : 1 ,UINT STOP_BIT : 1 ,UINT PARITY_EN : 1 ,UINT PARITY_TYPE : 1 ,UINT TX_IRQ : 1 ,UINT TX_IRQ_EN : 1 ,UINT TX_IRQ_CLR : 1 ,UINT TX_EMPTY : 1 ,UINT TX_FULL : 1 ,UINT RX_IRQ : 1 ,UINT RX_IRQ_EN : 1 ,UINT RX_IRQ_CLR : 1 ,UINT RX_EMPTY : 1 ,UINT RX_FULL : 1 ) _rege_ _UART0_0;
_regs_ BF_2(UINT _rev0 : 24, UINT RX_DAT : 8 ) _rege_ _UART0_1;
_regs_ BF_2(UINT _rev0 : 24, UINT TX_DAT : 8 ) _rege_ _UART0_2;
_regs_ BF_2(UINT _rev0 : 12, UINT RX_LMT : 20 ) _rege_ _UART0_3;
_regs_ BF_16(UINT CLK_DIV : 12 ,UINT _rev0 : 6, UINT TX_TYPE : 1 ,UINT STOP_BIT : 1 ,UINT PARITY_EN : 1 ,UINT PARITY_TYPE : 1 ,UINT TX_IRQ : 1 ,UINT TX_IRQ_EN : 1 ,UINT TX_IRQ_CLR : 1 ,UINT TX_EMPTY : 1 ,UINT TX_FULL : 1 ,UINT RX_IRQ : 1 ,UINT RX_IRQ_EN : 1 ,UINT RX_IRQ_CLR : 1 ,UINT RX_EMPTY : 1 ,UINT RX_FULL : 1 ) _rege_ _UART1_0;
_regs_ BF_2(UINT _rev0 : 24, UINT RX_DAT : 8 ) _rege_ _UART1_1;
_regs_ BF_2(UINT _rev0 : 24, UINT TX_DAT : 8 ) _rege_ _UART1_2;
_regs_ BF_2(UINT _rev0 : 12, UINT RX_LMT : 20 ) _rege_ _UART1_3;
_regs_ BF_16(UINT CLK_DIV : 12 ,UINT _rev0 : 6, UINT TX_TYPE : 1 ,UINT STOP_BIT : 1 ,UINT PARITY_EN : 1 ,UINT PARITY_TYPE : 1 ,UINT TX_IRQ : 1 ,UINT TX_IRQ_EN : 1 ,UINT TX_IRQ_CLR : 1 ,UINT TX_EMPTY : 1 ,UINT TX_FULL : 1 ,UINT RX_IRQ : 1 ,UINT RX_IRQ_EN : 1 ,UINT RX_IRQ_CLR : 1 ,UINT RX_EMPTY : 1 ,UINT RX_FULL : 1 ) _rege_ _UART2_0;
_regs_ BF_2(UINT _rev0 : 24, UINT RX_DAT : 8 ) _rege_ _UART2_1;
_regs_ BF_2(UINT _rev0 : 24, UINT TX_DAT : 8 ) _rege_ _UART2_2;
_regs_ BF_2(UINT _rev0 : 12, UINT RX_LMT : 20 ) _rege_ _UART2_3;
_regs_ BF_16(UINT CLK_DIV : 12 ,UINT _rev0 : 6, UINT TX_TYPE : 1 ,UINT STOP_BIT : 1 ,UINT PARITY_EN : 1 ,UINT PARITY_TYPE : 1 ,UINT TX_IRQ : 1 ,UINT TX_IRQ_EN : 1 ,UINT TX_IRQ_CLR : 1 ,UINT TX_EMPTY : 1 ,UINT TX_FULL : 1 ,UINT RX_IRQ : 1 ,UINT RX_IRQ_EN : 1 ,UINT RX_IRQ_CLR : 1 ,UINT RX_EMPTY : 1 ,UINT RX_FULL : 1 ) _rege_ _UART3_0;
_regs_ BF_2(UINT _rev0 : 24, UINT RX_DAT : 8 ) _rege_ _UART3_1;
_regs_ BF_2(UINT _rev0 : 24, UINT TX_DAT : 8 ) _rege_ _UART3_2;
_regs_ BF_2(UINT _rev0 : 12, UINT RX_LMT : 20 ) _rege_ _UART3_3;
_regs_ BF_16(UINT CLK_DIV : 12 ,UINT _rev0 : 6, UINT TX_TYPE : 1 ,UINT STOP_BIT : 1 ,UINT PARITY_EN : 1 ,UINT PARITY_TYPE : 1 ,UINT TX_IRQ : 1 ,UINT TX_IRQ_EN : 1 ,UINT TX_IRQ_CLR : 1 ,UINT TX_EMPTY : 1 ,UINT TX_FULL : 1 ,UINT RX_IRQ : 1 ,UINT RX_IRQ_EN : 1 ,UINT RX_IRQ_CLR : 1 ,UINT RX_EMPTY : 1 ,UINT RX_FULL : 1 ) _rege_ _UART4_0;
_regs_ BF_2(UINT _rev0 : 24, UINT RX_DAT : 8 ) _rege_ _UART4_1;
_regs_ BF_2(UINT _rev0 : 24, UINT TX_DAT : 8 ) _rege_ _UART4_2;
_regs_ BF_2(UINT _rev0 : 12, UINT RX_LMT : 20 ) _rege_ _UART4_3;
_regs_ BF_16(UINT CLK_DIV : 12 ,UINT _rev0 : 6, UINT TX_TYPE : 1 ,UINT STOP_BIT : 1 ,UINT PARITY_EN : 1 ,UINT PARITY_TYPE : 1 ,UINT TX_IRQ : 1 ,UINT TX_IRQ_EN : 1 ,UINT TX_IRQ_CLR : 1 ,UINT TX_EMPTY : 1 ,UINT TX_FULL : 1 ,UINT RX_IRQ : 1 ,UINT RX_IRQ_EN : 1 ,UINT RX_IRQ_CLR : 1 ,UINT RX_EMPTY : 1 ,UINT RX_FULL : 1 ) _rege_ _UART5_0;
_regs_ BF_2(UINT _rev0 : 24, UINT RX_DAT : 8 ) _rege_ _UART5_1;
_regs_ BF_2(UINT _rev0 : 24, UINT TX_DAT : 8 ) _rege_ _UART5_2;
_regs_ BF_2(UINT _rev0 : 12, UINT RX_LMT : 20 ) _rege_ _UART5_3;
_regs_ BF_16(UINT CLK_DIV : 12 ,UINT _rev0 : 6, UINT TX_TYPE : 1 ,UINT STOP_BIT : 1 ,UINT PARITY_EN : 1 ,UINT PARITY_TYPE : 1 ,UINT TX_IRQ : 1 ,UINT TX_IRQ_EN : 1 ,UINT TX_IRQ_CLR : 1 ,UINT TX_EMPTY : 1 ,UINT TX_FULL : 1 ,UINT RX_IRQ : 1 ,UINT RX_IRQ_EN : 1 ,UINT RX_IRQ_CLR : 1 ,UINT RX_EMPTY : 1 ,UINT RX_FULL : 1 ) _rege_ _UART6_0;
_regs_ BF_2(UINT _rev0 : 24, UINT RX_DAT : 8 ) _rege_ _UART6_1;
_regs_ BF_2(UINT _rev0 : 24, UINT TX_DAT : 8 ) _rege_ _UART6_2;
_regs_ BF_2(UINT _rev0 : 12, UINT RX_LMT : 20 ) _rege_ _UART6_3;
_regs_ BF_16(UINT CLK_DIV : 12 ,UINT _rev0 : 6, UINT TX_TYPE : 1 ,UINT STOP_BIT : 1 ,UINT PARITY_EN : 1 ,UINT PARITY_TYPE : 1 ,UINT TX_IRQ : 1 ,UINT TX_IRQ_EN : 1 ,UINT TX_IRQ_CLR : 1 ,UINT TX_EMPTY : 1 ,UINT TX_FULL : 1 ,UINT RX_IRQ : 1 ,UINT RX_IRQ_EN : 1 ,UINT RX_IRQ_CLR : 1 ,UINT RX_EMPTY : 1 ,UINT RX_FULL : 1 ) _rege_ _UART7_0;
_regs_ BF_2(UINT _rev0 : 24, UINT RX_DAT : 8 ) _rege_ _UART7_1;
_regs_ BF_2(UINT _rev0 : 24, UINT TX_DAT : 8 ) _rege_ _UART7_2;
_regs_ BF_2(UINT _rev0 : 12, UINT RX_LMT : 20 ) _rege_ _UART7_3;
_regs_ BF_16(UINT CLK_DIV : 12 ,UINT _rev0 : 6, UINT TX_TYPE : 1 ,UINT STOP_BIT : 1 ,UINT PARITY_EN : 1 ,UINT PARITY_TYPE : 1 ,UINT TX_IRQ : 1 ,UINT TX_IRQ_EN : 1 ,UINT TX_IRQ_CLR : 1 ,UINT TX_EMPTY : 1 ,UINT TX_FULL : 1 ,UINT RX_IRQ : 1 ,UINT RX_IRQ_EN : 1 ,UINT RX_IRQ_CLR : 1 ,UINT RX_EMPTY : 1 ,UINT RX_FULL : 1 ) _rege_ _UART8_0;
_regs_ BF_2(UINT _rev0 : 24, UINT RX_DAT : 8 ) _rege_ _UART8_1;
_regs_ BF_2(UINT _rev0 : 24, UINT TX_DAT : 8 ) _rege_ _UART8_2;
_regs_ BF_2(UINT _rev0 : 12, UINT RX_LMT : 20 ) _rege_ _UART8_3;

_regs_ BF_16(UINT CLK_DIV : 12 ,UINT _rev0 : 6, UINT TX_TYPE : 1 ,UINT STOP_BIT : 1 ,UINT PARITY_EN : 1 ,UINT PARITY_TYPE : 1 ,UINT TX_IRQ : 1 ,UINT TX_IRQ_EN : 1 ,UINT TX_IRQ_CLR : 1 ,UINT TX_EMPTY : 1 ,UINT TX_FULL : 1 ,UINT RX_IRQ : 1 ,UINT RX_IRQ_EN : 1 ,UINT RX_IRQ_CLR : 1 ,UINT RX_EMPTY : 1 ,UINT RX_FULL : 1 ) _rege_ _UART_REG0;
_regs_ BF_2(UINT _rev0 : 24, UINT RX_DAT : 8 ) _rege_ _UART_REG1;
_regs_ BF_2(UINT _rev0 : 24, UINT TX_DAT : 8 ) _rege_ _UART_REG2;
_regs_ BF_2(UINT _rev0 : 12, UINT RX_LMT : 20 ) _rege_ _UART_REG3;

_regs_ BF_9(UINT RX_DAT : 8 ,UINT TX_DAT : 8 ,UINT _rev0 : 10, UINT ACT : 1 ,UINT MODE : 1 ,UINT BIT_MODE : 1 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ) _rege_ _I2C0_0;
_regs_ BF_2(UINT CLK_DIV : 16 , UINT _rev0 : 16 ) _rege_ _I2C0_1;
_regs_ BF_7(UINT _rev0 : 26, UINT MST_COL : 1 ,UINT MST_ACK : 1 ,UINT MST_REPEAT : 1 ,UINT MST_LAST : 1 ,UINT MST_RW : 1 ,UINT MST_GO : 1 ) _rege_ _I2C0_2;
_regs_ BF_8(UINT _rev0 : 19, UINT I2C_SDA : 1 ,UINT I2C_SCL : 1 ,UINT SLV_ACK_IN : 1 ,UINT SLV_GO : 1 ,UINT SLV_RW : 1 ,UINT SLV_ACK_OUT : 1 ,UINT SLV_ADR : 7 ) _rege_ _I2C0_3;
_regs_ BF_9(UINT RX_DAT : 8 ,UINT TX_DAT : 8 ,UINT _rev0 : 10, UINT ACT : 1 ,UINT MODE : 1 ,UINT BIT_MODE : 1 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ) _rege_ _I2C1_0;
_regs_ BF_2(UINT CLK_DIV : 16 , UINT _rev0 : 16 ) _rege_ _I2C1_1;
_regs_ BF_7(UINT _rev0 : 26, UINT MST_COL : 1 ,UINT MST_ACK : 1 ,UINT MST_REPEAT : 1 ,UINT MST_LAST : 1 ,UINT MST_RW : 1 ,UINT MST_GO : 1 ) _rege_ _I2C1_2;
_regs_ BF_8(UINT _rev0 : 19, UINT I2C_SDA : 1 ,UINT I2C_SCL : 1 ,UINT SLV_ACK_IN : 1 ,UINT SLV_GO : 1 ,UINT SLV_RW : 1 ,UINT SLV_ACK_OUT : 1 ,UINT SLV_ADR : 7 ) _rege_ _I2C1_3;
_regs_ BF_9(UINT RX_DAT : 8 ,UINT TX_DAT : 8 ,UINT _rev0 : 10, UINT ACT : 1 ,UINT MODE : 1 ,UINT BIT_MODE : 1 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ) _rege_ _I2C2_0;
_regs_ BF_2(UINT CLK_DIV : 16 , UINT _rev0 : 16 ) _rege_ _I2C2_1;
_regs_ BF_7(UINT _rev0 : 26, UINT MST_COL : 1 ,UINT MST_ACK : 1 ,UINT MST_REPEAT : 1 ,UINT MST_LAST : 1 ,UINT MST_RW : 1 ,UINT MST_GO : 1 ) _rege_ _I2C2_2;
_regs_ BF_8(UINT _rev0 : 19, UINT I2C_SDA : 1 ,UINT I2C_SCL : 1 ,UINT SLV_ACK_IN : 1 ,UINT SLV_GO : 1 ,UINT SLV_RW : 1 ,UINT SLV_ACK_OUT : 1 ,UINT SLV_ADR : 7 ) _rege_ _I2C2_3;
_regs_ BF_9(UINT RX_DAT : 8 ,UINT TX_DAT : 8 ,UINT _rev0 : 10, UINT ACT : 1 ,UINT MODE : 1 ,UINT BIT_MODE : 1 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ) _rege_ _I2C3_0;
_regs_ BF_2(UINT CLK_DIV : 16 , UINT _rev0 : 16 ) _rege_ _I2C3_1;
_regs_ BF_7(UINT _rev0 : 26, UINT MST_COL : 1 ,UINT MST_ACK : 1 ,UINT MST_REPEAT : 1 ,UINT MST_LAST : 1 ,UINT MST_RW : 1 ,UINT MST_GO : 1 ) _rege_ _I2C3_2;
_regs_ BF_8(UINT _rev0 : 19, UINT I2C_SDA : 1 ,UINT I2C_SCL : 1 ,UINT SLV_ACK_IN : 1 ,UINT SLV_GO : 1 ,UINT SLV_RW : 1 ,UINT SLV_ACK_OUT : 1 ,UINT SLV_ADR : 7 ) _rege_ _I2C3_3;
_regs_ BF_9(UINT RX_DAT : 8 ,UINT TX_DAT : 8 ,UINT _rev0 : 10, UINT ACT : 1 ,UINT MODE : 1 ,UINT BIT_MODE : 1 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ) _rege_ _I2C4_0;
_regs_ BF_2(UINT CLK_DIV : 16 , UINT _rev0 : 16 ) _rege_ _I2C4_1;
_regs_ BF_7(UINT _rev0 : 26, UINT MST_COL : 1 ,UINT MST_ACK : 1 ,UINT MST_REPEAT : 1 ,UINT MST_LAST : 1 ,UINT MST_RW : 1 ,UINT MST_GO : 1 ) _rege_ _I2C4_2;
_regs_ BF_8(UINT _rev0 : 19, UINT I2C_SDA : 1 ,UINT I2C_SCL : 1 ,UINT SLV_ACK_IN : 1 ,UINT SLV_GO : 1 ,UINT SLV_RW : 1 ,UINT SLV_ACK_OUT : 1 ,UINT SLV_ADR : 7 ) _rege_ _I2C4_3;
_regs_ BF_9(UINT RX_DAT : 8 ,UINT TX_DAT : 8 ,UINT _rev0 : 10, UINT ACT : 1 ,UINT MODE : 1 ,UINT BIT_MODE : 1 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ) _rege_ _I2C5_0;
_regs_ BF_2(UINT CLK_DIV : 16 , UINT _rev0 : 16 ) _rege_ _I2C5_1;
_regs_ BF_7(UINT _rev0 : 26, UINT MST_COL : 1 ,UINT MST_ACK : 1 ,UINT MST_REPEAT : 1 ,UINT MST_LAST : 1 ,UINT MST_RW : 1 ,UINT MST_GO : 1 ) _rege_ _I2C5_2;
_regs_ BF_8(UINT _rev0 : 19, UINT I2C_SDA : 1 ,UINT I2C_SCL : 1 ,UINT SLV_ACK_IN : 1 ,UINT SLV_GO : 1 ,UINT SLV_RW : 1 ,UINT SLV_ACK_OUT : 1 ,UINT SLV_ADR : 7 ) _rege_ _I2C5_3;
_regs_ BF_9(UINT RX_DAT : 8 ,UINT TX_DAT : 8 ,UINT _rev0 : 10, UINT ACT : 1 ,UINT MODE : 1 ,UINT BIT_MODE : 1 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ) _rege_ _I2C6_0;
_regs_ BF_2(UINT CLK_DIV : 16 , UINT _rev0 : 16 ) _rege_ _I2C6_1;
_regs_ BF_7(UINT _rev0 : 26, UINT MST_COL : 1 ,UINT MST_ACK : 1 ,UINT MST_REPEAT : 1 ,UINT MST_LAST : 1 ,UINT MST_RW : 1 ,UINT MST_GO : 1 ) _rege_ _I2C6_2;
_regs_ BF_8(UINT _rev0 : 19, UINT I2C_SDA : 1 ,UINT I2C_SCL : 1 ,UINT SLV_ACK_IN : 1 ,UINT SLV_GO : 1 ,UINT SLV_RW : 1 ,UINT SLV_ACK_OUT : 1 ,UINT SLV_ADR : 7 ) _rege_ _I2C6_3;
_regs_ BF_9(UINT RX_DAT : 8 ,UINT TX_DAT : 8 ,UINT _rev0 : 10, UINT ACT : 1 ,UINT MODE : 1 ,UINT BIT_MODE : 1 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ) _rege_ _I2C7_0;
_regs_ BF_2(UINT CLK_DIV : 16 , UINT _rev0 : 16 ) _rege_ _I2C7_1;
_regs_ BF_7(UINT _rev0 : 26, UINT MST_COL : 1 ,UINT MST_ACK : 1 ,UINT MST_REPEAT : 1 ,UINT MST_LAST : 1 ,UINT MST_RW : 1 ,UINT MST_GO : 1 ) _rege_ _I2C7_2;
_regs_ BF_8(UINT _rev0 : 19, UINT I2C_SDA : 1 ,UINT I2C_SCL : 1 ,UINT SLV_ACK_IN : 1 ,UINT SLV_GO : 1 ,UINT SLV_RW : 1 ,UINT SLV_ACK_OUT : 1 ,UINT SLV_ADR : 7 ) _rege_ _I2C7_3;
_regs_ BF_9(UINT RX_DAT : 8 ,UINT TX_DAT : 8 ,UINT _rev0 : 10, UINT ACT : 1 ,UINT MODE : 1 ,UINT BIT_MODE : 1 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ) _rege_ _I2C8_0;
_regs_ BF_2(UINT CLK_DIV : 16 , UINT _rev0 : 16 ) _rege_ _I2C8_1;
_regs_ BF_7(UINT _rev0 : 26, UINT MST_COL : 1 ,UINT MST_ACK : 1 ,UINT MST_REPEAT : 1 ,UINT MST_LAST : 1 ,UINT MST_RW : 1 ,UINT MST_GO : 1 ) _rege_ _I2C8_2;
_regs_ BF_8(UINT _rev0 : 19, UINT I2C_SDA : 1 ,UINT I2C_SCL : 1 ,UINT SLV_ACK_IN : 1 ,UINT SLV_GO : 1 ,UINT SLV_RW : 1 ,UINT SLV_ACK_OUT : 1 ,UINT SLV_ADR : 7 ) _rege_ _I2C8_3;

_regs_ BF_9(UINT RX_DAT : 8 ,UINT TX_DAT : 8 ,UINT _rev0 : 10, UINT ACT : 1 ,UINT MODE : 1 ,UINT BIT_MODE : 1 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ) _rege_ _I2C_REG0;
_regs_ BF_2(UINT CLK_DIV : 16 , UINT _rev0 : 16 ) _rege_ _I2C_REG1;
_regs_ BF_7(UINT _rev0 : 26, UINT MST_COL : 1 ,UINT MST_ACK : 1 ,UINT MST_REPEAT : 1 ,UINT MST_LAST : 1 ,UINT MST_RW : 1 ,UINT MST_GO : 1 ) _rege_ _I2C_REG2;
_regs_ BF_8(UINT _rev0 : 19, UINT I2C_SDA : 1 ,UINT I2C_SCL : 1 ,UINT SLV_ACK_IN : 1 ,UINT SLV_GO : 1 ,UINT SLV_RW : 1 ,UINT SLV_ACK_OUT : 1 ,UINT SLV_ADR : 7 ) _rege_ _I2C_REG3;

_regs_ BF_9(UINT _rev0 : 4, UINT JOB_PTR : 8 ,UINT DONE_PTR : 6 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT VALUE : 8 ,UINT MODE : 2 ,UINT GO : 1 ) _rege_ _DMA0_0;
_regs_ BF_1(UINT SRC : 32 ) _rege_ _DMA0_1;
_regs_ BF_1(UINT DST : 32 ) _rege_ _DMA0_2;
_regs_ BF_1(UINT LEN : 32 ) _rege_ _DMA0_3;
_regs_ BF_9(UINT _rev0 : 4, UINT JOB_PTR : 8 ,UINT DONE_PTR : 6 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT VALUE : 8 ,UINT MODE : 2 ,UINT GO : 1 ) _rege_ _DMA1_4;
_regs_ BF_1(UINT SRC : 32 ) _rege_ _DMA1_5;
_regs_ BF_1(UINT DST : 32 ) _rege_ _DMA1_6;
_regs_ BF_1(UINT LEN : 32 ) _rege_ _DMA1_7;

_regs_ BF_9(UINT _rev0 : 4, UINT JOB_PTR : 8 ,UINT DONE_PTR : 6 ,UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT VALUE : 8 ,UINT MODE : 2 ,UINT GO : 1 ) _rege_ _DMA_REG0;
_regs_ BF_1(UINT SRC : 32 ) _rege_ _DMA_REG1;
_regs_ BF_1(UINT DST : 32 ) _rege_ _DMA_REG2;
_regs_ BF_1(UINT LEN : 32 ) _rege_ _DMA_REG3;

_regs_ BF_5(UINT _rev0 : 28, UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT GO : 1 ) _rege_ _CHKSUM_0;
_regs_ BF_1(UINT ADR : 32 ) _rege_ _CHKSUM_1;
_regs_ BF_1(UINT LEN : 32 ) _rege_ _CHKSUM_2;
_regs_ BF_2(UINT _rev0 : 16, UINT DAT : 16 ) _rege_ _CHKSUM_3;
_regs_ BF_16(UINT _rev0 : 8, UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT BYTE : 2 ,UINT TXBYTE : 2 ,UINT RXBYTE : 2 ,UINT TXDW : 2 ,UINT RXDW : 2 ,UINT TXCODEC : 2 ,UINT RXCODEC : 2 ,UINT TXMODE : 2 ,UINT RXMODE : 2 ,UINT TXEN : 1 ,UINT RXEN : 1 ,UINT MODE : 1 ) _rege_ _I2S_0;
_regs_ BF_1(UINT ADRW : 32 ) _rege_ _I2S_1;
_regs_ BF_1(UINT ADRR : 32 ) _rege_ _I2S_2;
_regs_ BF_2(UINT _rev0 : 16, UINT SCKCNT : 16 ) _rege_ _I2S_3;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER0_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER0_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER1_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER1_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER2_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER2_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER3_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER3_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER4_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER4_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER5_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER5_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER6_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER6_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER7_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER7_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER8_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER8_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER9_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER9_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER10_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER10_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER11_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER11_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER12_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER12_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER13_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER13_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER14_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER14_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER15_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER15_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER16_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER16_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER17_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER17_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER18_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER18_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER19_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER19_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER20_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER20_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER21_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER21_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER22_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER22_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER23_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER23_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER24_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER24_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER25_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER25_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER26_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER26_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER27_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER27_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER28_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER28_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER29_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER29_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER30_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER30_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER31_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER31_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER32_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER32_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER33_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER33_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER34_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER34_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER35_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER35_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER36_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER36_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER37_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER37_1;
_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER38_0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER38_1;

_regs_ BF_10(UINT EN : 1 ,UINT PWM_EN : 1 ,UINT CK_EN : 1 ,UINT IRQ_EN : 1 ,UINT CNT_CLR : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT _rev0 : 1, UINT DIV : 8 ,UINT LMT : 16 ) _rege_ _TIMER_REG0;
_regs_ BF_2(UINT TRIG : 16 ,UINT CNT : 16 ) _rege_ _TIMER_REG1;

_regs_ BF_1(UINT RX_DAT : 32 ) _rege_ _SPI0_0;
_regs_ BF_1(UINT TX_DAT : 32 ) _rege_ _SPI0_1;
_regs_ BF_15(UINT EN : 1 ,UINT _rev0 : 7, UINT CLK_DIV : 8 ,UINT _rev1 : 2, UINT BIT_MODE : 1 ,UINT CS_OEN : 1 ,UINT CS_OUT : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT ONE_BITMODE : 1 ,UINT CLK_MODE : 2 ,UINT WS : 2 ,UINT RW : 2 ,UINT GO : 1 ) _rege_ _SPI0_2;
_regs_ BF_1(UINT RX_DAT : 32 ) _rege_ _SPI1_0;
_regs_ BF_1(UINT TX_DAT : 32 ) _rege_ _SPI1_1;
_regs_ BF_15(UINT EN : 1 ,UINT _rev0 : 7, UINT CLK_DIV : 8 ,UINT _rev1 : 2, UINT BIT_MODE : 1 ,UINT CS_OEN : 1 ,UINT CS_OUT : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT ONE_BITMODE : 1 ,UINT CLK_MODE : 2 ,UINT WS : 2 ,UINT RW : 2 ,UINT GO : 1 ) _rege_ _SPI1_2;
_regs_ BF_1(UINT RX_DAT : 32 ) _rege_ _SPI2_0;
_regs_ BF_1(UINT TX_DAT : 32 ) _rege_ _SPI2_1;
_regs_ BF_15(UINT EN : 1 ,UINT _rev0 : 7, UINT CLK_DIV : 8 ,UINT _rev1 : 2, UINT BIT_MODE : 1 ,UINT CS_OEN : 1 ,UINT CS_OUT : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT ONE_BITMODE : 1 ,UINT CLK_MODE : 2 ,UINT WS : 2 ,UINT RW : 2 ,UINT GO : 1 ) _rege_ _SPI2_2;
_regs_ BF_1(UINT RX_DAT : 32 ) _rege_ _SPI3_0;
_regs_ BF_1(UINT TX_DAT : 32 ) _rege_ _SPI3_1;
_regs_ BF_15(UINT EN : 1 ,UINT _rev0 : 7, UINT CLK_DIV : 8 ,UINT _rev1 : 2, UINT BIT_MODE : 1 ,UINT CS_OEN : 1 ,UINT CS_OUT : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT ONE_BITMODE : 1 ,UINT CLK_MODE : 2 ,UINT WS : 2 ,UINT RW : 2 ,UINT GO : 1 ) _rege_ _SPI3_2;
_regs_ BF_1(UINT RX_DAT : 32 ) _rege_ _SPI4_0;
_regs_ BF_1(UINT TX_DAT : 32 ) _rege_ _SPI4_1;
_regs_ BF_15(UINT EN : 1 ,UINT _rev0 : 7, UINT CLK_DIV : 8 ,UINT _rev1 : 2, UINT BIT_MODE : 1 ,UINT CS_OEN : 1 ,UINT CS_OUT : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT ONE_BITMODE : 1 ,UINT CLK_MODE : 2 ,UINT WS : 2 ,UINT RW : 2 ,UINT GO : 1 ) _rege_ _SPI4_2;
_regs_ BF_1(UINT RX_DAT : 32 ) _rege_ _SPI5_0;
_regs_ BF_1(UINT TX_DAT : 32 ) _rege_ _SPI5_1;
_regs_ BF_15(UINT EN : 1 ,UINT _rev0 : 7, UINT CLK_DIV : 8 ,UINT _rev1 : 2, UINT BIT_MODE : 1 ,UINT CS_OEN : 1 ,UINT CS_OUT : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT ONE_BITMODE : 1 ,UINT CLK_MODE : 2 ,UINT WS : 2 ,UINT RW : 2 ,UINT GO : 1 ) _rege_ _SPI5_2;
_regs_ BF_1(UINT RX_DAT : 32 ) _rege_ _SPI6_0;
_regs_ BF_1(UINT TX_DAT : 32 ) _rege_ _SPI6_1;
_regs_ BF_15(UINT EN : 1 ,UINT _rev0 : 7, UINT CLK_DIV : 8 ,UINT _rev1 : 2, UINT BIT_MODE : 1 ,UINT CS_OEN : 1 ,UINT CS_OUT : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT ONE_BITMODE : 1 ,UINT CLK_MODE : 2 ,UINT WS : 2 ,UINT RW : 2 ,UINT GO : 1 ) _rege_ _SPI6_2;
_regs_ BF_1(UINT RX_DAT : 32 ) _rege_ _SPI7_0;
_regs_ BF_1(UINT TX_DAT : 32 ) _rege_ _SPI7_1;
_regs_ BF_15(UINT EN : 1 ,UINT _rev0 : 7, UINT CLK_DIV : 8 ,UINT _rev1 : 2, UINT BIT_MODE : 1 ,UINT CS_OEN : 1 ,UINT CS_OUT : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT ONE_BITMODE : 1 ,UINT CLK_MODE : 2 ,UINT WS : 2 ,UINT RW : 2 ,UINT GO : 1 ) _rege_ _SPI7_2;
_regs_ BF_1(UINT RX_DAT : 32 ) _rege_ _SPI8_0;
_regs_ BF_1(UINT TX_DAT : 32 ) _rege_ _SPI8_1;
_regs_ BF_15(UINT EN : 1 ,UINT _rev0 : 7, UINT CLK_DIV : 8 ,UINT _rev1 : 2, UINT BIT_MODE : 1 ,UINT CS_OEN : 1 ,UINT CS_OUT : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT ONE_BITMODE : 1 ,UINT CLK_MODE : 2 ,UINT WS : 2 ,UINT RW : 2 ,UINT GO : 1 ) _rege_ _SPI8_2;

_regs_ BF_1(UINT RX_DAT : 32 ) _rege_ _SPI_REG0;
_regs_ BF_1(UINT TX_DAT : 32 ) _rege_ _SPI_REG1;
_regs_ BF_15(UINT EN : 1 ,UINT _rev0 : 7, UINT CLK_DIV : 8 ,UINT _rev1 : 2, UINT BIT_MODE : 1 ,UINT CS_OEN : 1 ,UINT CS_OUT : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT IRQ : 1 ,UINT ONE_BITMODE : 1 ,UINT CLK_MODE : 2 ,UINT WS : 2 ,UINT RW : 2 ,UINT GO : 1 ) _rege_ _SPI_REG2;

_regs_ BF_4(UINT _rev0 : 26, UINT H264_RST : 1 ,UINT H265_RST : 1 ,UINT CPU_EN : 4 ) _rege_ _SYS_0;
_regs_ BF_1(UINT WDT_CNT : 32 ) _rege_ _SYS_1;
_regs_ BF_1(UINT WDT_LMT : 32 ) _rege_ _SYS_2;
_regs_ BF_3(UINT _rev0 : 30, UINT WDT_EN : 1 ,UINT WDT_CLR : 1 ) _rege_ _SYS_3;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO0_MUX : 2 ) _rege_ _SYS_256;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO1_MUX : 2 ) _rege_ _SYS_257;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO2_MUX : 2 ) _rege_ _SYS_258;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO3_MUX : 2 ) _rege_ _SYS_259;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO4_MUX : 2 ) _rege_ _SYS_260;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO5_MUX : 2 ) _rege_ _SYS_261;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO6_MUX : 2 ) _rege_ _SYS_262;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO7_MUX : 2 ) _rege_ _SYS_263;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO8_MUX : 2 ) _rege_ _SYS_264;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO9_MUX : 2 ) _rege_ _SYS_265;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO10_MUX : 2 ) _rege_ _SYS_266;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO11_MUX : 2 ) _rege_ _SYS_267;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO12_MUX : 2 ) _rege_ _SYS_268;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO13_MUX : 2 ) _rege_ _SYS_269;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO14_MUX : 2 ) _rege_ _SYS_270;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO15_MUX : 2 ) _rege_ _SYS_271;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO16_MUX : 2 ) _rege_ _SYS_272;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO17_MUX : 2 ) _rege_ _SYS_273;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO18_MUX : 2 ) _rege_ _SYS_274;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO19_MUX : 2 ) _rege_ _SYS_275;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO20_MUX : 2 ) _rege_ _SYS_276;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO21_MUX : 2 ) _rege_ _SYS_277;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO22_MUX : 2 ) _rege_ _SYS_278;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO23_MUX : 2 ) _rege_ _SYS_279;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO24_MUX : 2 ) _rege_ _SYS_280;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO25_MUX : 2 ) _rege_ _SYS_281;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO26_MUX : 2 ) _rege_ _SYS_282;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO27_MUX : 2 ) _rege_ _SYS_283;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO28_MUX : 2 ) _rege_ _SYS_284;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO29_MUX : 2 ) _rege_ _SYS_285;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO30_MUX : 2 ) _rege_ _SYS_286;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO31_MUX : 2 ) _rege_ _SYS_287;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO32_MUX : 2 ) _rege_ _SYS_288;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO33_MUX : 2 ) _rege_ _SYS_289;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO34_MUX : 2 ) _rege_ _SYS_290;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO35_MUX : 2 ) _rege_ _SYS_291;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO36_MUX : 2 ) _rege_ _SYS_292;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO37_MUX : 2 ) _rege_ _SYS_293;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO38_MUX : 2 ) _rege_ _SYS_294;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO39_MUX : 2 ) _rege_ _SYS_295;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO40_MUX : 2 ) _rege_ _SYS_296;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO41_MUX : 2 ) _rege_ _SYS_297;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO42_MUX : 2 ) _rege_ _SYS_298;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO43_MUX : 2 ) _rege_ _SYS_299;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO44_MUX : 2 ) _rege_ _SYS_300;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO45_MUX : 2 ) _rege_ _SYS_301;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO46_MUX : 2 ) _rege_ _SYS_302;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO47_MUX : 2 ) _rege_ _SYS_303;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO48_MUX : 2 ) _rege_ _SYS_304;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO49_MUX : 2 ) _rege_ _SYS_305;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO50_MUX : 2 ) _rege_ _SYS_306;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO51_MUX : 2 ) _rege_ _SYS_307;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO52_MUX : 2 ) _rege_ _SYS_308;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO53_MUX : 2 ) _rege_ _SYS_309;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO54_MUX : 2 ) _rege_ _SYS_310;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO55_MUX : 2 ) _rege_ _SYS_311;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO56_MUX : 2 ) _rege_ _SYS_312;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO57_MUX : 2 ) _rege_ _SYS_313;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO58_MUX : 2 ) _rege_ _SYS_314;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO59_MUX : 2 ) _rege_ _SYS_315;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO60_MUX : 2 ) _rege_ _SYS_316;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO61_MUX : 2 ) _rege_ _SYS_317;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO62_MUX : 2 ) _rege_ _SYS_318;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO63_MUX : 2 ) _rege_ _SYS_319;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO64_MUX : 2 ) _rege_ _SYS_320;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO65_MUX : 2 ) _rege_ _SYS_321;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO66_MUX : 2 ) _rege_ _SYS_322;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO67_MUX : 2 ) _rege_ _SYS_323;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO68_MUX : 2 ) _rege_ _SYS_324;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO69_MUX : 2 ) _rege_ _SYS_325;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO70_MUX : 2 ) _rege_ _SYS_326;
_regs_ BF_2(UINT _rev0 : 30, UINT GPIO71_MUX : 2 ) _rege_ _SYS_327;
_regs_ BF_4(UINT _rev0 : 4, UINT IHSIZE : 12 ,UINT _rev1 : 4, UINT IVSIZE : 12 ) _rege_ _H264_0;
_regs_ BF_4(UINT _rev0 : 4, UINT YSTRIDEX : 12 ,UINT _rev1 : 4, UINT CSTRIDEX : 12 ) _rege_ _H264_2;
_regs_ BF_2(UINT _rev0 : 18, UINT TMBNUM : 14 ) _rege_ _H264_4;
_regs_ BF_3(UINT _rev0 : 30, UINT IDR_FLAG : 1 ,UINT PFRAME : 1 ) _rege_ _H264_5;
_regs_ BF_1(UINT CURYBUF : 32 ) _rege_ _H264_22;
_regs_ BF_1(UINT CURCBUF : 32 ) _rege_ _H264_24;
_regs_ BF_1(UINT CUREBUF : 32 ) _rege_ _H264_26;
_regs_ BF_1(UINT REFYBUF : 32 ) _rege_ _H264_28;
_regs_ BF_1(UINT REFCBUF : 32 ) _rege_ _H264_30;
_regs_ BF_1(UINT RECYBUF : 32 ) _rege_ _H264_32;
_regs_ BF_1(UINT RECCBUF : 32 ) _rege_ _H264_34;
_regs_ BF_1(UINT STRMBUF : 32 ) _rege_ _H264_36;
_regs_ BF_1(UINT SBUFEND : 32 ) _rege_ _H264_38;
_regs_ BF_1(UINT STPSBUFW : 32 ) _rege_ _H264_40;
_regs_ BF_1(UINT STPIBUFW : 32 ) _rege_ _H264_42;
_regs_ BF_1(UINT STPIBUFR : 32 ) _rege_ _H264_44;
_regs_ BF_1(UINT SBUFSIZE : 32 ) _rege_ _H264_46;
_regs_ BF_3(UINT _rev0 : 24, UINT VLCBURST : 4 ,UINT ENCBURST : 4 ) _rege_ _H264_48;
_regs_ BF_8(UINT _rev0 : 24, UINT USEIADDR : 1 ,UINT KEEP4KB : 1 ,UINT CLKRATIO : 2 ,UINT KEEPORDER : 1 ,UINT RNDROBIN : 1 ,UINT EXTROBIN : 1 ,UINT BIGENDIAN : 1 ) _rege_ _H264_50;
_regs_ BF_2(UINT _rev0 : 4, UINT PREBITS : 28 ) _rege_ _H264_106;
_regs_ BF_3(UINT _rev0 : 25, UINT ROI_EN_0 : 1 ,UINT ROI_Q_0 : 6 ) _rege_ _H264_128;
_regs_ BF_4(UINT ROI_XS_0 : 8 ,UINT ROI_XE_0 : 8 ,UINT ROI_YS_0 : 8 ,UINT ROI_YE_0 : 8 ) _rege_ _H264_130;
_regs_ BF_3(UINT _rev0 : 25, UINT ROI_EN_1 : 1 ,UINT ROI_Q_1 : 6 ) _rege_ _H264_132;
_regs_ BF_4(UINT ROI_XS_1 : 8 ,UINT ROI_XE_1 : 8 ,UINT ROI_YS_1 : 8 ,UINT ROI_YE_1 : 8 ) _rege_ _H264_134;
_regs_ BF_3(UINT _rev0 : 25, UINT ROI_EN_2 : 1 ,UINT ROI_Q_2 : 6 ) _rege_ _H264_136;
_regs_ BF_4(UINT ROI_XS_2 : 8 ,UINT ROI_XE_2 : 8 ,UINT ROI_YS_2 : 8 ,UINT ROI_YE_2 : 8 ) _rege_ _H264_138;
_regs_ BF_3(UINT _rev0 : 25, UINT ROI_EN_3 : 1 ,UINT ROI_Q_3 : 6 ) _rege_ _H264_140;
_regs_ BF_4(UINT ROI_XS_3 : 8 ,UINT ROI_XE_3 : 8 ,UINT ROI_YS_3 : 8 ,UINT ROI_YE_3 : 8 ) _rege_ _H264_142;
_regs_ BF_1(UINT MEMYBGN : 32 ) _rege_ _H264_160;
_regs_ BF_1(UINT MEMYEND : 32 ) _rege_ _H264_162;
_regs_ BF_1(UINT MEMCBGN : 32 ) _rege_ _H264_164;
_regs_ BF_1(UINT MEMCEND : 32 ) _rege_ _H264_166;
_regs_ BF_4(UINT _rev0 : 4, UINT MIHSIZE : 12 ,UINT _rev1 : 4, UINT MIVSIZE : 12 ) _rege_ _H264_192;
_regs_ BF_3(UINT _rev0 : 29, UINT MCABACIDC : 2 ,UINT MCABACEN : 1 ) _rege_ _H264_194;
_regs_ BF_2(UINT _rev0 : 26, UINT MQSCALE : 6 ) _rege_ _H264_196;
_regs_ BF_2(UINT _rev0 : 31, UINT MPFRAME : 1 ) _rege_ _H264_198;
_regs_ BF_1(UINT SRC : 32 ) _rege_ _AES_0;
_regs_ BF_1(UINT DST : 32 ) _rege_ _AES_1;
_regs_ BF_1(UINT LEN : 32 ) _rege_ _AES_2;
_regs_ BF_7(UINT _rev0 : 26, UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT KEY_LEN : 1 ,UINT MODE : 1 ,UINT REQ : 1 ) _rege_ _AES_3;
_regs_ BF_1(UINT KEY_255_224 : 32 ) _rege_ _AES_4;
_regs_ BF_1(UINT KEY_223_192 : 32 ) _rege_ _AES_5;
_regs_ BF_1(UINT KEY_191_160 : 32 ) _rege_ _AES_6;
_regs_ BF_1(UINT KEY_159_128 : 32 ) _rege_ _AES_7;
_regs_ BF_1(UINT KEY_127_96 : 32 ) _rege_ _AES_8;
_regs_ BF_1(UINT KEY_95_64 : 32 ) _rege_ _AES_9;
_regs_ BF_1(UINT KEY_63_32 : 32 ) _rege_ _AES_10;
_regs_ BF_1(UINT KEY_31_0 : 32 ) _rege_ _AES_11;
_regs_ BF_1(UINT SRC : 32 ) _rege_ _SHA_0;
_regs_ BF_1(UINT LEN : 32 ) _rege_ _SHA_2;
_regs_ BF_7(UINT _rev0 : 26, UINT IRQ : 1 ,UINT IRQ_EN : 1 ,UINT IRQ_CLR : 1 ,UINT _rev1 : 1, UINT MODE : 1 ,UINT REQ : 1 ) _rege_ _SHA_3;
_regs_ BF_1(UINT DIGEST_255_224 : 32 ) _rege_ _SHA_4;
_regs_ BF_1(UINT DIGEST_223_192 : 32 ) _rege_ _SHA_5;
_regs_ BF_1(UINT DIGEST_191_160 : 32 ) _rege_ _SHA_6;
_regs_ BF_1(UINT DIGEST_159_128 : 32 ) _rege_ _SHA_7;
_regs_ BF_1(UINT DIGEST_127_96 : 32 ) _rege_ _SHA_8;
_regs_ BF_1(UINT DIGEST_95_64 : 32 ) _rege_ _SHA_9;
_regs_ BF_1(UINT DIGEST_63_32 : 32 ) _rege_ _SHA_10;
_regs_ BF_1(UINT DIGEST_31_0 : 32 ) _rege_ _SHA_11;

#define DDR_MR_ADR _bm(_DDR_0,REG_BASE_DDR, (0<<2),MR_ADR) // 8 Bit, 8'h0, RW
#define DDR_MR_WRDAT _bm(_DDR_0,REG_BASE_DDR, (0<<2),MR_WRDAT) // 8 Bit, 8'h0, RW
#define DDR_MR_WE _bm(_DDR_0,REG_BASE_DDR, (0<<2),MR_WE) // 1 Bit, 1'h0, RW
#define DDR_MR_REQ _bm(_DDR_0,REG_BASE_DDR, (0<<2),MR_REQ) // 1 Bit, 1'h0, RW
#define DDR_MR1_OP _bm(_DDR_1,REG_BASE_DDR, (1<<2),MR1_OP) // 8 Bit, 8'hE2, RW
#define DDR_MR2_OP _bm(_DDR_1,REG_BASE_DDR, (1<<2),MR2_OP) // 8 Bit, 8'h06, RW
#define DDR_MEM_SEL _bm(_DDR_1,REG_BASE_DDR, (1<<2),MEM_SEL) // 3 Bit, 3'h2, RW
#define DDR_PWR_CUR _bm(_DDR_1,REG_BASE_DDR, (1<<2),PWR_CUR) // 1 Bit, 1'h0, R
#define DDR_PWR_REQ _bm(_DDR_1,REG_BASE_DDR, (1<<2),PWR_REQ) // 1 Bit, 1'h0, RW
#define DDR_T_REFI _bm(_DDR_2,REG_BASE_DDR, (2<<2),T_REFI) // 16 Bit, 16'h580, RW
#define DDR_T_REFAB _bm(_DDR_3,REG_BASE_DDR, (3<<2),T_REFAB) // 7 Bit, 7'h17, RW
#define DDR_ZQCS_EN _bm(_DDR_3,REG_BASE_DDR, (3<<2),ZQCS_EN) // 1 Bit, 1'h0, RW
#define DDR_T_ZQCS _bm(_DDR_3,REG_BASE_DDR, (3<<2),T_ZQCS) // 6 Bit, 6'h0f, RW
#define DDR_ZQCS_LMT _bm(_DDR_3,REG_BASE_DDR, (3<<2),ZQCS_LMT) // 16 Bit, 16'hFFFF, RW
#define DDR_T_RCD _bm(_DDR_4,REG_BASE_DDR, (4<<2),T_RCD) // 4 Bit, 4'h2, RW
#define DDR_T_RRD _bm(_DDR_4,REG_BASE_DDR, (4<<2),T_RRD) // 4 Bit, 4'h0, RW
#define DDR_T_WTR _bm(_DDR_4,REG_BASE_DDR, (4<<2),T_WTR) // 4 Bit, 4'h4, RW
#define DDR_T_RTP _bm(_DDR_4,REG_BASE_DDR, (4<<2),T_RTP) // 4 Bit, 4'h3, RW
#define DDR_T_WR _bm(_DDR_4,REG_BASE_DDR, (4<<2),T_WR) // 4 Bit, 4'h7, RW
#define DDR_T_RP _bm(_DDR_4,REG_BASE_DDR, (4<<2),T_RP) // 4 Bit, 4'h1, RW
#define DDR_T_MRR _bm(_DDR_4,REG_BASE_DDR, (4<<2),T_MRR) // 4 Bit, 4'h0, RW
#define DDR_T_MRW _bm(_DDR_4,REG_BASE_DDR, (4<<2),T_MRW) // 4 Bit, 4'h4, RW
#define DDR_RD_EN_MASK _bm(_DDR_5,REG_BASE_DDR, (5<<2),RD_EN_MASK) // 8 Bit, 8'h20, RW
#define DDR_RD_VAL_EDGE _bm(_DDR_5,REG_BASE_DDR, (5<<2),RD_VAL_EDGE) // 1 Bit, 1'h1, RW
#define DDR_RD_VAL_LTC _bm(_DDR_5,REG_BASE_DDR, (5<<2),RD_VAL_LTC) // 4 Bit, 4'h6, RW
#define DDR_WR_LTC _bm(_DDR_5,REG_BASE_DDR, (5<<2),WR_LTC) // 3 Bit, 3'h1, RW
#define DDR_MR_RDDAT0 _bm(_DDR_6,REG_BASE_DDR, (6<<2),MR_RDDAT0) // 32 Bit, 32'h0, R
#define DDR_MR_RDDAT1 _bm(_DDR_7,REG_BASE_DDR, (7<<2),MR_RDDAT1) // 32 Bit, 32'h0, R
#define DDR_MR_RDDAT2 _bm(_DDR_8,REG_BASE_DDR, (8<<2),MR_RDDAT2) // 32 Bit, 32'h0, R
#define DDR_MR_RDDAT3 _bm(_DDR_9,REG_BASE_DDR, (9<<2),MR_RDDAT3) // 32 Bit, 32'h0, R
#define DDR_DLY_CKEOUT _bm(_DDR_10,REG_BASE_DDR, (10<<2),DLY_CKEOUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_CSOUT _bm(_DDR_10,REG_BASE_DDR, (10<<2),DLY_CSOUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_CA9OUT _bm(_DDR_10,REG_BASE_DDR, (10<<2),DLY_CA9OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_CA8OUT _bm(_DDR_10,REG_BASE_DDR, (10<<2),DLY_CA8OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_CA7OUT _bm(_DDR_11,REG_BASE_DDR, (11<<2),DLY_CA7OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_CA6OUT _bm(_DDR_11,REG_BASE_DDR, (11<<2),DLY_CA6OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_CA5OUT _bm(_DDR_11,REG_BASE_DDR, (11<<2),DLY_CA5OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_CA4OUT _bm(_DDR_11,REG_BASE_DDR, (11<<2),DLY_CA4OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_CA3OUT _bm(_DDR_11,REG_BASE_DDR, (11<<2),DLY_CA3OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_CA2OUT _bm(_DDR_11,REG_BASE_DDR, (11<<2),DLY_CA2OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_CA1OUT _bm(_DDR_11,REG_BASE_DDR, (11<<2),DLY_CA1OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_CA0OUT _bm(_DDR_11,REG_BASE_DDR, (11<<2),DLY_CA0OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQS0IN _bm(_DDR_12,REG_BASE_DDR, (12<<2),DLY_DQS0IN) // 4 Bit, 4'h0, RW
#define DDR_DLY_DM0OUT _bm(_DDR_12,REG_BASE_DDR, (12<<2),DLY_DM0OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ7OUT _bm(_DDR_13,REG_BASE_DDR, (13<<2),DLY_DQ7OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ6OUT _bm(_DDR_13,REG_BASE_DDR, (13<<2),DLY_DQ6OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ5OUT _bm(_DDR_13,REG_BASE_DDR, (13<<2),DLY_DQ5OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ4OUT _bm(_DDR_13,REG_BASE_DDR, (13<<2),DLY_DQ4OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ3OUT _bm(_DDR_13,REG_BASE_DDR, (13<<2),DLY_DQ3OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ2OUT _bm(_DDR_13,REG_BASE_DDR, (13<<2),DLY_DQ2OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ1OUT _bm(_DDR_13,REG_BASE_DDR, (13<<2),DLY_DQ1OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ0OUT _bm(_DDR_13,REG_BASE_DDR, (13<<2),DLY_DQ0OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQS1IN _bm(_DDR_14,REG_BASE_DDR, (14<<2),DLY_DQS1IN) // 4 Bit, 4'h0, RW
#define DDR_DLY_DM1OUT _bm(_DDR_14,REG_BASE_DDR, (14<<2),DLY_DM1OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ15OUT _bm(_DDR_15,REG_BASE_DDR, (15<<2),DLY_DQ15OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ14OUT _bm(_DDR_15,REG_BASE_DDR, (15<<2),DLY_DQ14OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ13OUT _bm(_DDR_15,REG_BASE_DDR, (15<<2),DLY_DQ13OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ12OUT _bm(_DDR_15,REG_BASE_DDR, (15<<2),DLY_DQ12OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ11OUT _bm(_DDR_15,REG_BASE_DDR, (15<<2),DLY_DQ11OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ10OUT _bm(_DDR_15,REG_BASE_DDR, (15<<2),DLY_DQ10OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ9OUT _bm(_DDR_15,REG_BASE_DDR, (15<<2),DLY_DQ9OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ8OUT _bm(_DDR_15,REG_BASE_DDR, (15<<2),DLY_DQ8OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQS2IN _bm(_DDR_16,REG_BASE_DDR, (16<<2),DLY_DQS2IN) // 4 Bit, 4'h0, RW
#define DDR_DLY_DM2OUT _bm(_DDR_16,REG_BASE_DDR, (16<<2),DLY_DM2OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ23OUT _bm(_DDR_17,REG_BASE_DDR, (17<<2),DLY_DQ23OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ22OUT _bm(_DDR_17,REG_BASE_DDR, (17<<2),DLY_DQ22OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ21OUT _bm(_DDR_17,REG_BASE_DDR, (17<<2),DLY_DQ21OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ20OUT _bm(_DDR_17,REG_BASE_DDR, (17<<2),DLY_DQ20OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ19OUT _bm(_DDR_17,REG_BASE_DDR, (17<<2),DLY_DQ19OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ18OUT _bm(_DDR_17,REG_BASE_DDR, (17<<2),DLY_DQ18OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ17OUT _bm(_DDR_17,REG_BASE_DDR, (17<<2),DLY_DQ17OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ16OUT _bm(_DDR_17,REG_BASE_DDR, (17<<2),DLY_DQ16OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQS3IN _bm(_DDR_18,REG_BASE_DDR, (18<<2),DLY_DQS3IN) // 4 Bit, 4'h0, RW
#define DDR_DLY_DM3OUT _bm(_DDR_18,REG_BASE_DDR, (18<<2),DLY_DM3OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ31OUT _bm(_DDR_19,REG_BASE_DDR, (19<<2),DLY_DQ31OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ30OUT _bm(_DDR_19,REG_BASE_DDR, (19<<2),DLY_DQ30OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ29OUT _bm(_DDR_19,REG_BASE_DDR, (19<<2),DLY_DQ29OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ28OUT _bm(_DDR_19,REG_BASE_DDR, (19<<2),DLY_DQ28OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ27OUT _bm(_DDR_19,REG_BASE_DDR, (19<<2),DLY_DQ27OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ26OUT _bm(_DDR_19,REG_BASE_DDR, (19<<2),DLY_DQ26OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ25OUT _bm(_DDR_19,REG_BASE_DDR, (19<<2),DLY_DQ25OUT) // 4 Bit, 4'h0, RW
#define DDR_DLY_DQ24OUT _bm(_DDR_19,REG_BASE_DDR, (19<<2),DLY_DQ24OUT) // 4 Bit, 4'h0, RW
#define SFLS_SFLS_ID _bm(_SFLS_0,REG_BASE_SFLS, (0<<2),SFLS_ID) // 24 Bit, 24'h0, R
#define SFLS_SFLS_ID_VAL _bm(_SFLS_0,REG_BASE_SFLS, (0<<2),SFLS_ID_VAL) // 1 Bit, 1'h0, R
#define SFLS_BUS_CMD_RD _bm(_SFLS_1,REG_BASE_SFLS, (1<<2),BUS_CMD_RD) // 8 Bit, 8'h03, RW
#define SFLS_BUS_CMD_WR _bm(_SFLS_1,REG_BASE_SFLS, (1<<2),BUS_CMD_WR) // 8 Bit, 8'h02, RW
#define SFLS_BUS_CMD_WREN _bm(_SFLS_1,REG_BASE_SFLS, (1<<2),BUS_CMD_WREN) // 8 Bit, 8'h06, RW
#define SFLS_BUS_CMD_RDREG _bm(_SFLS_1,REG_BASE_SFLS, (1<<2),BUS_CMD_RDREG) // 8 Bit, 8'h05, RW
#define SFLS_BUS_RD_CMD_MODE _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_RD_CMD_MODE) // 2 Bit, 2'h0, RW
#define SFLS_BUS_RD_ADR_MODE _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_RD_ADR_MODE) // 2 Bit, 2'h0, RW
#define SFLS_BUS_RD_DAT_MODE _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_RD_DAT_MODE) // 2 Bit, 2'h0, RW
#define SFLS_BUS_WR_CMD_MODE _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_WR_CMD_MODE) // 2 Bit, 2'h0, RW
#define SFLS_BUS_WR_ADR_MODE _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_WR_ADR_MODE) // 2 Bit, 2'h0, RW
#define SFLS_BUS_WR_DAT_MODE _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_WR_DAT_MODE) // 2 Bit, 2'h0, RW
#define SFLS_BUS_WREN_CMD_MODE _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_WREN_CMD_MODE) // 2 Bit, 2'h0, RW
#define SFLS_BUS_RDREG_CMD_MODE _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_RDREG_CMD_MODE) // 2 Bit, 2'h0, RW
#define SFLS_BUS_RDREG_DAT_MODE _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_RDREG_DAT_MODE) // 2 Bit, 2'h0, RW
#define SFLS_BUS_ADR_EXT _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_ADR_EXT) // 1 Bit, 1'h0, RW
#define SFLS_BUS_GAP_EN      _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_GAP_EN     ) // 1 Bit, 1'h0, RW
#define SFLS_BUS_GAP         _bm(_SFLS_2,REG_BASE_SFLS, (2<<2),BUS_GAP        ) // 4 Bit, 4'h0, RW
#define SFLS_USR_CMD_MODE _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_CMD_MODE) // 2 Bit, 2'h0, RW
#define SFLS_USR_ADR_MODE    _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_ADR_MODE   ) // 2 Bit, 2'h0, RW
#define SFLS_USR_DAT_MODE    _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_DAT_MODE   ) // 2 Bit, 2'h0, RW
#define SFLS_USR_ADR_EN      _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_ADR_EN     ) // 1 Bit, 1'h0, RW
#define SFLS_USR_GAP_EN      _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_GAP_EN     ) // 1 Bit, 1'h0, RW
#define SFLS_USR_RD_EN _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_RD_EN) // 1 Bit, 1'h0, RW
#define SFLS_USR_WR_EN _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_WR_EN) // 1 Bit, 1'h0, RW
#define SFLS_USR_GAP _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_GAP) // 4 Bit, 4'h0, RW
#define SFLS_USR_LEN _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_LEN) // 2 Bit, 2'h0, RW
#define SFLS_USR_ADR_EXT _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_ADR_EXT) // 1 Bit, 1'h0, RW
#define SFLS_USR_BUSY_EN _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_BUSY_EN) // 1 Bit, 1'h0, RW
#define SFLS_USR_BUSY_KEEP _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_BUSY_KEEP) // 1 Bit, 1'h0, RW
#define SFLS_USR_RDLTC _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_RDLTC) // 4 Bit, 4'h1, RW
#define SFLS_USR_CMD _bm(_SFLS_3,REG_BASE_SFLS, (3<<2),USR_CMD) // 8 Bit, 8'h0, RW
#define SFLS_USR_ADR _bm(_SFLS_4,REG_BASE_SFLS, (4<<2),USR_ADR) // 32 Bit, 32'h0, RW
#define SFLS_USR_RDDAT _bm(_SFLS_5,REG_BASE_SFLS, (5<<2),USR_RDDAT) // 32 Bit, 32'h0, RW
#define SFLS_USR_WRDAT _bm(_SFLS_6,REG_BASE_SFLS, (6<<2),USR_WRDAT) // 32 Bit, 32'h0, RW
#define SFLS_IO_RDLTC _bm(_SFLS_7,REG_BASE_SFLS, (7<<2),IO_RDLTC) // 4 Bit, 4'h1, RW
#define SFLS_IO_CLKDIV _bm(_SFLS_7,REG_BASE_SFLS, (7<<2),IO_CLKDIV) // 4 Bit, 4'hf, RW
#define SFLS_IO_CS_GAP _bm(_SFLS_7,REG_BASE_SFLS, (7<<2),IO_CS_GAP) // 3 Bit, 3'h7, RW
#define SFLS_USRBUS_REQ _bm(_SFLS_7,REG_BASE_SFLS, (7<<2),USRBUS_REQ) // 1 Bit, 1'h0, RW
#define SFLS_BUS_REQ _bm(_SFLS_7,REG_BASE_SFLS, (7<<2),BUS_REQ) // 1 Bit, 1'h0, RW
#define SFLS_USR_REQ _bm(_SFLS_7,REG_BASE_SFLS, (7<<2),USR_REQ) // 1 Bit, 1'h0, RW
#define GPIO_PIN0_IN _bm(_GPIO_0,REG_BASE_GPIO, (0<<2),PIN0_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN0_OUT _bm(_GPIO_0,REG_BASE_GPIO, (0<<2),PIN0_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN0_OEN _bm(_GPIO_0,REG_BASE_GPIO, (0<<2),PIN0_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN0_IRQ_DIR _bm(_GPIO_0,REG_BASE_GPIO, (0<<2),PIN0_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN0_IRQ_EN _bm(_GPIO_0,REG_BASE_GPIO, (0<<2),PIN0_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN0_IRQ_CLR _bm(_GPIO_0,REG_BASE_GPIO, (0<<2),PIN0_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN0_IRQ _bm(_GPIO_0,REG_BASE_GPIO, (0<<2),PIN0_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN1_IN _bm(_GPIO_1,REG_BASE_GPIO, (1<<2),PIN1_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN1_OUT _bm(_GPIO_1,REG_BASE_GPIO, (1<<2),PIN1_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN1_OEN _bm(_GPIO_1,REG_BASE_GPIO, (1<<2),PIN1_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN1_IRQ_DIR _bm(_GPIO_1,REG_BASE_GPIO, (1<<2),PIN1_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN1_IRQ_EN _bm(_GPIO_1,REG_BASE_GPIO, (1<<2),PIN1_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN1_IRQ_CLR _bm(_GPIO_1,REG_BASE_GPIO, (1<<2),PIN1_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN1_IRQ _bm(_GPIO_1,REG_BASE_GPIO, (1<<2),PIN1_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN2_IN _bm(_GPIO_2,REG_BASE_GPIO, (2<<2),PIN2_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN2_OUT _bm(_GPIO_2,REG_BASE_GPIO, (2<<2),PIN2_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN2_OEN _bm(_GPIO_2,REG_BASE_GPIO, (2<<2),PIN2_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN2_IRQ_DIR _bm(_GPIO_2,REG_BASE_GPIO, (2<<2),PIN2_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN2_IRQ_EN _bm(_GPIO_2,REG_BASE_GPIO, (2<<2),PIN2_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN2_IRQ_CLR _bm(_GPIO_2,REG_BASE_GPIO, (2<<2),PIN2_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN2_IRQ _bm(_GPIO_2,REG_BASE_GPIO, (2<<2),PIN2_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN3_IN _bm(_GPIO_3,REG_BASE_GPIO, (3<<2),PIN3_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN3_OUT _bm(_GPIO_3,REG_BASE_GPIO, (3<<2),PIN3_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN3_OEN _bm(_GPIO_3,REG_BASE_GPIO, (3<<2),PIN3_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN3_IRQ_DIR _bm(_GPIO_3,REG_BASE_GPIO, (3<<2),PIN3_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN3_IRQ_EN _bm(_GPIO_3,REG_BASE_GPIO, (3<<2),PIN3_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN3_IRQ_CLR _bm(_GPIO_3,REG_BASE_GPIO, (3<<2),PIN3_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN3_IRQ _bm(_GPIO_3,REG_BASE_GPIO, (3<<2),PIN3_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN4_IN _bm(_GPIO_4,REG_BASE_GPIO, (4<<2),PIN4_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN4_OUT _bm(_GPIO_4,REG_BASE_GPIO, (4<<2),PIN4_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN4_OEN _bm(_GPIO_4,REG_BASE_GPIO, (4<<2),PIN4_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN4_IRQ_DIR _bm(_GPIO_4,REG_BASE_GPIO, (4<<2),PIN4_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN4_IRQ_EN _bm(_GPIO_4,REG_BASE_GPIO, (4<<2),PIN4_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN4_IRQ_CLR _bm(_GPIO_4,REG_BASE_GPIO, (4<<2),PIN4_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN4_IRQ _bm(_GPIO_4,REG_BASE_GPIO, (4<<2),PIN4_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN5_IN _bm(_GPIO_5,REG_BASE_GPIO, (5<<2),PIN5_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN5_OUT _bm(_GPIO_5,REG_BASE_GPIO, (5<<2),PIN5_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN5_OEN _bm(_GPIO_5,REG_BASE_GPIO, (5<<2),PIN5_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN5_IRQ_DIR _bm(_GPIO_5,REG_BASE_GPIO, (5<<2),PIN5_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN5_IRQ_EN _bm(_GPIO_5,REG_BASE_GPIO, (5<<2),PIN5_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN5_IRQ_CLR _bm(_GPIO_5,REG_BASE_GPIO, (5<<2),PIN5_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN5_IRQ _bm(_GPIO_5,REG_BASE_GPIO, (5<<2),PIN5_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN6_IN _bm(_GPIO_6,REG_BASE_GPIO, (6<<2),PIN6_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN6_OUT _bm(_GPIO_6,REG_BASE_GPIO, (6<<2),PIN6_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN6_OEN _bm(_GPIO_6,REG_BASE_GPIO, (6<<2),PIN6_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN6_IRQ_DIR _bm(_GPIO_6,REG_BASE_GPIO, (6<<2),PIN6_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN6_IRQ_EN _bm(_GPIO_6,REG_BASE_GPIO, (6<<2),PIN6_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN6_IRQ_CLR _bm(_GPIO_6,REG_BASE_GPIO, (6<<2),PIN6_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN6_IRQ _bm(_GPIO_6,REG_BASE_GPIO, (6<<2),PIN6_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN7_IN _bm(_GPIO_7,REG_BASE_GPIO, (7<<2),PIN7_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN7_OUT _bm(_GPIO_7,REG_BASE_GPIO, (7<<2),PIN7_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN7_OEN _bm(_GPIO_7,REG_BASE_GPIO, (7<<2),PIN7_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN7_IRQ_DIR _bm(_GPIO_7,REG_BASE_GPIO, (7<<2),PIN7_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN7_IRQ_EN _bm(_GPIO_7,REG_BASE_GPIO, (7<<2),PIN7_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN7_IRQ_CLR _bm(_GPIO_7,REG_BASE_GPIO, (7<<2),PIN7_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN7_IRQ _bm(_GPIO_7,REG_BASE_GPIO, (7<<2),PIN7_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN8_IN _bm(_GPIO_8,REG_BASE_GPIO, (8<<2),PIN8_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN8_OUT _bm(_GPIO_8,REG_BASE_GPIO, (8<<2),PIN8_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN8_OEN _bm(_GPIO_8,REG_BASE_GPIO, (8<<2),PIN8_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN8_IRQ_DIR _bm(_GPIO_8,REG_BASE_GPIO, (8<<2),PIN8_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN8_IRQ_EN _bm(_GPIO_8,REG_BASE_GPIO, (8<<2),PIN8_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN8_IRQ_CLR _bm(_GPIO_8,REG_BASE_GPIO, (8<<2),PIN8_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN8_IRQ _bm(_GPIO_8,REG_BASE_GPIO, (8<<2),PIN8_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN9_IN _bm(_GPIO_9,REG_BASE_GPIO, (9<<2),PIN9_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN9_OUT _bm(_GPIO_9,REG_BASE_GPIO, (9<<2),PIN9_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN9_OEN _bm(_GPIO_9,REG_BASE_GPIO, (9<<2),PIN9_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN9_IRQ_DIR _bm(_GPIO_9,REG_BASE_GPIO, (9<<2),PIN9_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN9_IRQ_EN _bm(_GPIO_9,REG_BASE_GPIO, (9<<2),PIN9_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN9_IRQ_CLR _bm(_GPIO_9,REG_BASE_GPIO, (9<<2),PIN9_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN9_IRQ _bm(_GPIO_9,REG_BASE_GPIO, (9<<2),PIN9_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN10_IN _bm(_GPIO_10,REG_BASE_GPIO, (10<<2),PIN10_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN10_OUT _bm(_GPIO_10,REG_BASE_GPIO, (10<<2),PIN10_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN10_OEN _bm(_GPIO_10,REG_BASE_GPIO, (10<<2),PIN10_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN10_IRQ_DIR _bm(_GPIO_10,REG_BASE_GPIO, (10<<2),PIN10_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN10_IRQ_EN _bm(_GPIO_10,REG_BASE_GPIO, (10<<2),PIN10_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN10_IRQ_CLR _bm(_GPIO_10,REG_BASE_GPIO, (10<<2),PIN10_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN10_IRQ _bm(_GPIO_10,REG_BASE_GPIO, (10<<2),PIN10_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN11_IN _bm(_GPIO_11,REG_BASE_GPIO, (11<<2),PIN11_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN11_OUT _bm(_GPIO_11,REG_BASE_GPIO, (11<<2),PIN11_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN11_OEN _bm(_GPIO_11,REG_BASE_GPIO, (11<<2),PIN11_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN11_IRQ_DIR _bm(_GPIO_11,REG_BASE_GPIO, (11<<2),PIN11_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN11_IRQ_EN _bm(_GPIO_11,REG_BASE_GPIO, (11<<2),PIN11_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN11_IRQ_CLR _bm(_GPIO_11,REG_BASE_GPIO, (11<<2),PIN11_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN11_IRQ _bm(_GPIO_11,REG_BASE_GPIO, (11<<2),PIN11_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN12_IN _bm(_GPIO_12,REG_BASE_GPIO, (12<<2),PIN12_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN12_OUT _bm(_GPIO_12,REG_BASE_GPIO, (12<<2),PIN12_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN12_OEN _bm(_GPIO_12,REG_BASE_GPIO, (12<<2),PIN12_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN12_IRQ_DIR _bm(_GPIO_12,REG_BASE_GPIO, (12<<2),PIN12_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN12_IRQ_EN _bm(_GPIO_12,REG_BASE_GPIO, (12<<2),PIN12_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN12_IRQ_CLR _bm(_GPIO_12,REG_BASE_GPIO, (12<<2),PIN12_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN12_IRQ _bm(_GPIO_12,REG_BASE_GPIO, (12<<2),PIN12_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN13_IN _bm(_GPIO_13,REG_BASE_GPIO, (13<<2),PIN13_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN13_OUT _bm(_GPIO_13,REG_BASE_GPIO, (13<<2),PIN13_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN13_OEN _bm(_GPIO_13,REG_BASE_GPIO, (13<<2),PIN13_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN13_IRQ_DIR _bm(_GPIO_13,REG_BASE_GPIO, (13<<2),PIN13_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN13_IRQ_EN _bm(_GPIO_13,REG_BASE_GPIO, (13<<2),PIN13_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN13_IRQ_CLR _bm(_GPIO_13,REG_BASE_GPIO, (13<<2),PIN13_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN13_IRQ _bm(_GPIO_13,REG_BASE_GPIO, (13<<2),PIN13_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN14_IN _bm(_GPIO_14,REG_BASE_GPIO, (14<<2),PIN14_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN14_OUT _bm(_GPIO_14,REG_BASE_GPIO, (14<<2),PIN14_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN14_OEN _bm(_GPIO_14,REG_BASE_GPIO, (14<<2),PIN14_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN14_IRQ_DIR _bm(_GPIO_14,REG_BASE_GPIO, (14<<2),PIN14_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN14_IRQ_EN _bm(_GPIO_14,REG_BASE_GPIO, (14<<2),PIN14_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN14_IRQ_CLR _bm(_GPIO_14,REG_BASE_GPIO, (14<<2),PIN14_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN14_IRQ _bm(_GPIO_14,REG_BASE_GPIO, (14<<2),PIN14_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN15_IN _bm(_GPIO_15,REG_BASE_GPIO, (15<<2),PIN15_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN15_OUT _bm(_GPIO_15,REG_BASE_GPIO, (15<<2),PIN15_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN15_OEN _bm(_GPIO_15,REG_BASE_GPIO, (15<<2),PIN15_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN15_IRQ_DIR _bm(_GPIO_15,REG_BASE_GPIO, (15<<2),PIN15_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN15_IRQ_EN _bm(_GPIO_15,REG_BASE_GPIO, (15<<2),PIN15_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN15_IRQ_CLR _bm(_GPIO_15,REG_BASE_GPIO, (15<<2),PIN15_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN15_IRQ _bm(_GPIO_15,REG_BASE_GPIO, (15<<2),PIN15_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN16_IN _bm(_GPIO_16,REG_BASE_GPIO, (16<<2),PIN16_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN16_OUT _bm(_GPIO_16,REG_BASE_GPIO, (16<<2),PIN16_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN16_OEN _bm(_GPIO_16,REG_BASE_GPIO, (16<<2),PIN16_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN16_IRQ_DIR _bm(_GPIO_16,REG_BASE_GPIO, (16<<2),PIN16_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN16_IRQ_EN _bm(_GPIO_16,REG_BASE_GPIO, (16<<2),PIN16_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN16_IRQ_CLR _bm(_GPIO_16,REG_BASE_GPIO, (16<<2),PIN16_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN16_IRQ _bm(_GPIO_16,REG_BASE_GPIO, (16<<2),PIN16_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN17_IN _bm(_GPIO_17,REG_BASE_GPIO, (17<<2),PIN17_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN17_OUT _bm(_GPIO_17,REG_BASE_GPIO, (17<<2),PIN17_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN17_OEN _bm(_GPIO_17,REG_BASE_GPIO, (17<<2),PIN17_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN17_IRQ_DIR _bm(_GPIO_17,REG_BASE_GPIO, (17<<2),PIN17_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN17_IRQ_EN _bm(_GPIO_17,REG_BASE_GPIO, (17<<2),PIN17_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN17_IRQ_CLR _bm(_GPIO_17,REG_BASE_GPIO, (17<<2),PIN17_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN17_IRQ _bm(_GPIO_17,REG_BASE_GPIO, (17<<2),PIN17_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN18_IN _bm(_GPIO_18,REG_BASE_GPIO, (18<<2),PIN18_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN18_OUT _bm(_GPIO_18,REG_BASE_GPIO, (18<<2),PIN18_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN18_OEN _bm(_GPIO_18,REG_BASE_GPIO, (18<<2),PIN18_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN18_IRQ_DIR _bm(_GPIO_18,REG_BASE_GPIO, (18<<2),PIN18_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN18_IRQ_EN _bm(_GPIO_18,REG_BASE_GPIO, (18<<2),PIN18_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN18_IRQ_CLR _bm(_GPIO_18,REG_BASE_GPIO, (18<<2),PIN18_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN18_IRQ _bm(_GPIO_18,REG_BASE_GPIO, (18<<2),PIN18_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN19_IN _bm(_GPIO_19,REG_BASE_GPIO, (19<<2),PIN19_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN19_OUT _bm(_GPIO_19,REG_BASE_GPIO, (19<<2),PIN19_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN19_OEN _bm(_GPIO_19,REG_BASE_GPIO, (19<<2),PIN19_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN19_IRQ_DIR _bm(_GPIO_19,REG_BASE_GPIO, (19<<2),PIN19_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN19_IRQ_EN _bm(_GPIO_19,REG_BASE_GPIO, (19<<2),PIN19_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN19_IRQ_CLR _bm(_GPIO_19,REG_BASE_GPIO, (19<<2),PIN19_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN19_IRQ _bm(_GPIO_19,REG_BASE_GPIO, (19<<2),PIN19_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN20_IN _bm(_GPIO_20,REG_BASE_GPIO, (20<<2),PIN20_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN20_OUT _bm(_GPIO_20,REG_BASE_GPIO, (20<<2),PIN20_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN20_OEN _bm(_GPIO_20,REG_BASE_GPIO, (20<<2),PIN20_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN20_IRQ_DIR _bm(_GPIO_20,REG_BASE_GPIO, (20<<2),PIN20_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN20_IRQ_EN _bm(_GPIO_20,REG_BASE_GPIO, (20<<2),PIN20_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN20_IRQ_CLR _bm(_GPIO_20,REG_BASE_GPIO, (20<<2),PIN20_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN20_IRQ _bm(_GPIO_20,REG_BASE_GPIO, (20<<2),PIN20_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN21_IN _bm(_GPIO_21,REG_BASE_GPIO, (21<<2),PIN21_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN21_OUT _bm(_GPIO_21,REG_BASE_GPIO, (21<<2),PIN21_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN21_OEN _bm(_GPIO_21,REG_BASE_GPIO, (21<<2),PIN21_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN21_IRQ_DIR _bm(_GPIO_21,REG_BASE_GPIO, (21<<2),PIN21_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN21_IRQ_EN _bm(_GPIO_21,REG_BASE_GPIO, (21<<2),PIN21_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN21_IRQ_CLR _bm(_GPIO_21,REG_BASE_GPIO, (21<<2),PIN21_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN21_IRQ _bm(_GPIO_21,REG_BASE_GPIO, (21<<2),PIN21_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN22_IN _bm(_GPIO_22,REG_BASE_GPIO, (22<<2),PIN22_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN22_OUT _bm(_GPIO_22,REG_BASE_GPIO, (22<<2),PIN22_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN22_OEN _bm(_GPIO_22,REG_BASE_GPIO, (22<<2),PIN22_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN22_IRQ_DIR _bm(_GPIO_22,REG_BASE_GPIO, (22<<2),PIN22_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN22_IRQ_EN _bm(_GPIO_22,REG_BASE_GPIO, (22<<2),PIN22_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN22_IRQ_CLR _bm(_GPIO_22,REG_BASE_GPIO, (22<<2),PIN22_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN22_IRQ _bm(_GPIO_22,REG_BASE_GPIO, (22<<2),PIN22_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN23_IN _bm(_GPIO_23,REG_BASE_GPIO, (23<<2),PIN23_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN23_OUT _bm(_GPIO_23,REG_BASE_GPIO, (23<<2),PIN23_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN23_OEN _bm(_GPIO_23,REG_BASE_GPIO, (23<<2),PIN23_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN23_IRQ_DIR _bm(_GPIO_23,REG_BASE_GPIO, (23<<2),PIN23_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN23_IRQ_EN _bm(_GPIO_23,REG_BASE_GPIO, (23<<2),PIN23_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN23_IRQ_CLR _bm(_GPIO_23,REG_BASE_GPIO, (23<<2),PIN23_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN23_IRQ _bm(_GPIO_23,REG_BASE_GPIO, (23<<2),PIN23_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN24_IN _bm(_GPIO_24,REG_BASE_GPIO, (24<<2),PIN24_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN24_OUT _bm(_GPIO_24,REG_BASE_GPIO, (24<<2),PIN24_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN24_OEN _bm(_GPIO_24,REG_BASE_GPIO, (24<<2),PIN24_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN24_IRQ_DIR _bm(_GPIO_24,REG_BASE_GPIO, (24<<2),PIN24_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN24_IRQ_EN _bm(_GPIO_24,REG_BASE_GPIO, (24<<2),PIN24_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN24_IRQ_CLR _bm(_GPIO_24,REG_BASE_GPIO, (24<<2),PIN24_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN24_IRQ _bm(_GPIO_24,REG_BASE_GPIO, (24<<2),PIN24_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN25_IN _bm(_GPIO_25,REG_BASE_GPIO, (25<<2),PIN25_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN25_OUT _bm(_GPIO_25,REG_BASE_GPIO, (25<<2),PIN25_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN25_OEN _bm(_GPIO_25,REG_BASE_GPIO, (25<<2),PIN25_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN25_IRQ_DIR _bm(_GPIO_25,REG_BASE_GPIO, (25<<2),PIN25_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN25_IRQ_EN _bm(_GPIO_25,REG_BASE_GPIO, (25<<2),PIN25_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN25_IRQ_CLR _bm(_GPIO_25,REG_BASE_GPIO, (25<<2),PIN25_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN25_IRQ _bm(_GPIO_25,REG_BASE_GPIO, (25<<2),PIN25_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN26_IN _bm(_GPIO_26,REG_BASE_GPIO, (26<<2),PIN26_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN26_OUT _bm(_GPIO_26,REG_BASE_GPIO, (26<<2),PIN26_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN26_OEN _bm(_GPIO_26,REG_BASE_GPIO, (26<<2),PIN26_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN26_IRQ_DIR _bm(_GPIO_26,REG_BASE_GPIO, (26<<2),PIN26_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN26_IRQ_EN _bm(_GPIO_26,REG_BASE_GPIO, (26<<2),PIN26_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN26_IRQ_CLR _bm(_GPIO_26,REG_BASE_GPIO, (26<<2),PIN26_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN26_IRQ _bm(_GPIO_26,REG_BASE_GPIO, (26<<2),PIN26_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN27_IN _bm(_GPIO_27,REG_BASE_GPIO, (27<<2),PIN27_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN27_OUT _bm(_GPIO_27,REG_BASE_GPIO, (27<<2),PIN27_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN27_OEN _bm(_GPIO_27,REG_BASE_GPIO, (27<<2),PIN27_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN27_IRQ_DIR _bm(_GPIO_27,REG_BASE_GPIO, (27<<2),PIN27_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN27_IRQ_EN _bm(_GPIO_27,REG_BASE_GPIO, (27<<2),PIN27_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN27_IRQ_CLR _bm(_GPIO_27,REG_BASE_GPIO, (27<<2),PIN27_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN27_IRQ _bm(_GPIO_27,REG_BASE_GPIO, (27<<2),PIN27_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN28_IN _bm(_GPIO_28,REG_BASE_GPIO, (28<<2),PIN28_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN28_OUT _bm(_GPIO_28,REG_BASE_GPIO, (28<<2),PIN28_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN28_OEN _bm(_GPIO_28,REG_BASE_GPIO, (28<<2),PIN28_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN28_IRQ_DIR _bm(_GPIO_28,REG_BASE_GPIO, (28<<2),PIN28_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN28_IRQ_EN _bm(_GPIO_28,REG_BASE_GPIO, (28<<2),PIN28_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN28_IRQ_CLR _bm(_GPIO_28,REG_BASE_GPIO, (28<<2),PIN28_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN28_IRQ _bm(_GPIO_28,REG_BASE_GPIO, (28<<2),PIN28_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN29_IN _bm(_GPIO_29,REG_BASE_GPIO, (29<<2),PIN29_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN29_OUT _bm(_GPIO_29,REG_BASE_GPIO, (29<<2),PIN29_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN29_OEN _bm(_GPIO_29,REG_BASE_GPIO, (29<<2),PIN29_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN29_IRQ_DIR _bm(_GPIO_29,REG_BASE_GPIO, (29<<2),PIN29_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN29_IRQ_EN _bm(_GPIO_29,REG_BASE_GPIO, (29<<2),PIN29_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN29_IRQ_CLR _bm(_GPIO_29,REG_BASE_GPIO, (29<<2),PIN29_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN29_IRQ _bm(_GPIO_29,REG_BASE_GPIO, (29<<2),PIN29_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN30_IN _bm(_GPIO_30,REG_BASE_GPIO, (30<<2),PIN30_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN30_OUT _bm(_GPIO_30,REG_BASE_GPIO, (30<<2),PIN30_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN30_OEN _bm(_GPIO_30,REG_BASE_GPIO, (30<<2),PIN30_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN30_IRQ_DIR _bm(_GPIO_30,REG_BASE_GPIO, (30<<2),PIN30_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN30_IRQ_EN _bm(_GPIO_30,REG_BASE_GPIO, (30<<2),PIN30_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN30_IRQ_CLR _bm(_GPIO_30,REG_BASE_GPIO, (30<<2),PIN30_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN30_IRQ _bm(_GPIO_30,REG_BASE_GPIO, (30<<2),PIN30_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN31_IN _bm(_GPIO_31,REG_BASE_GPIO, (31<<2),PIN31_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN31_OUT _bm(_GPIO_31,REG_BASE_GPIO, (31<<2),PIN31_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN31_OEN _bm(_GPIO_31,REG_BASE_GPIO, (31<<2),PIN31_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN31_IRQ_DIR _bm(_GPIO_31,REG_BASE_GPIO, (31<<2),PIN31_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN31_IRQ_EN _bm(_GPIO_31,REG_BASE_GPIO, (31<<2),PIN31_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN31_IRQ_CLR _bm(_GPIO_31,REG_BASE_GPIO, (31<<2),PIN31_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN31_IRQ _bm(_GPIO_31,REG_BASE_GPIO, (31<<2),PIN31_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN32_IN _bm(_GPIO_32,REG_BASE_GPIO, (32<<2),PIN32_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN32_OUT _bm(_GPIO_32,REG_BASE_GPIO, (32<<2),PIN32_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN32_OEN _bm(_GPIO_32,REG_BASE_GPIO, (32<<2),PIN32_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN32_IRQ_DIR _bm(_GPIO_32,REG_BASE_GPIO, (32<<2),PIN32_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN32_IRQ_EN _bm(_GPIO_32,REG_BASE_GPIO, (32<<2),PIN32_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN32_IRQ_CLR _bm(_GPIO_32,REG_BASE_GPIO, (32<<2),PIN32_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN32_IRQ _bm(_GPIO_32,REG_BASE_GPIO, (32<<2),PIN32_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN33_IN _bm(_GPIO_33,REG_BASE_GPIO, (33<<2),PIN33_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN33_OUT _bm(_GPIO_33,REG_BASE_GPIO, (33<<2),PIN33_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN33_OEN _bm(_GPIO_33,REG_BASE_GPIO, (33<<2),PIN33_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN33_IRQ_DIR _bm(_GPIO_33,REG_BASE_GPIO, (33<<2),PIN33_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN33_IRQ_EN _bm(_GPIO_33,REG_BASE_GPIO, (33<<2),PIN33_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN33_IRQ_CLR _bm(_GPIO_33,REG_BASE_GPIO, (33<<2),PIN33_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN33_IRQ _bm(_GPIO_33,REG_BASE_GPIO, (33<<2),PIN33_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN34_IN _bm(_GPIO_34,REG_BASE_GPIO, (34<<2),PIN34_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN34_OUT _bm(_GPIO_34,REG_BASE_GPIO, (34<<2),PIN34_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN34_OEN _bm(_GPIO_34,REG_BASE_GPIO, (34<<2),PIN34_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN34_IRQ_DIR _bm(_GPIO_34,REG_BASE_GPIO, (34<<2),PIN34_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN34_IRQ_EN _bm(_GPIO_34,REG_BASE_GPIO, (34<<2),PIN34_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN34_IRQ_CLR _bm(_GPIO_34,REG_BASE_GPIO, (34<<2),PIN34_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN34_IRQ _bm(_GPIO_34,REG_BASE_GPIO, (34<<2),PIN34_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN35_IN _bm(_GPIO_35,REG_BASE_GPIO, (35<<2),PIN35_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN35_OUT _bm(_GPIO_35,REG_BASE_GPIO, (35<<2),PIN35_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN35_OEN _bm(_GPIO_35,REG_BASE_GPIO, (35<<2),PIN35_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN35_IRQ_DIR _bm(_GPIO_35,REG_BASE_GPIO, (35<<2),PIN35_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN35_IRQ_EN _bm(_GPIO_35,REG_BASE_GPIO, (35<<2),PIN35_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN35_IRQ_CLR _bm(_GPIO_35,REG_BASE_GPIO, (35<<2),PIN35_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN35_IRQ _bm(_GPIO_35,REG_BASE_GPIO, (35<<2),PIN35_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN36_IN _bm(_GPIO_36,REG_BASE_GPIO, (36<<2),PIN36_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN36_OUT _bm(_GPIO_36,REG_BASE_GPIO, (36<<2),PIN36_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN36_OEN _bm(_GPIO_36,REG_BASE_GPIO, (36<<2),PIN36_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN36_IRQ_DIR _bm(_GPIO_36,REG_BASE_GPIO, (36<<2),PIN36_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN36_IRQ_EN _bm(_GPIO_36,REG_BASE_GPIO, (36<<2),PIN36_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN36_IRQ_CLR _bm(_GPIO_36,REG_BASE_GPIO, (36<<2),PIN36_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN36_IRQ _bm(_GPIO_36,REG_BASE_GPIO, (36<<2),PIN36_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN37_IN _bm(_GPIO_37,REG_BASE_GPIO, (37<<2),PIN37_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN37_OUT _bm(_GPIO_37,REG_BASE_GPIO, (37<<2),PIN37_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN37_OEN _bm(_GPIO_37,REG_BASE_GPIO, (37<<2),PIN37_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN37_IRQ_DIR _bm(_GPIO_37,REG_BASE_GPIO, (37<<2),PIN37_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN37_IRQ_EN _bm(_GPIO_37,REG_BASE_GPIO, (37<<2),PIN37_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN37_IRQ_CLR _bm(_GPIO_37,REG_BASE_GPIO, (37<<2),PIN37_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN37_IRQ _bm(_GPIO_37,REG_BASE_GPIO, (37<<2),PIN37_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN38_IN _bm(_GPIO_38,REG_BASE_GPIO, (38<<2),PIN38_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN38_OUT _bm(_GPIO_38,REG_BASE_GPIO, (38<<2),PIN38_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN38_OEN _bm(_GPIO_38,REG_BASE_GPIO, (38<<2),PIN38_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN38_IRQ_DIR _bm(_GPIO_38,REG_BASE_GPIO, (38<<2),PIN38_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN38_IRQ_EN _bm(_GPIO_38,REG_BASE_GPIO, (38<<2),PIN38_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN38_IRQ_CLR _bm(_GPIO_38,REG_BASE_GPIO, (38<<2),PIN38_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN38_IRQ _bm(_GPIO_38,REG_BASE_GPIO, (38<<2),PIN38_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN39_IN _bm(_GPIO_39,REG_BASE_GPIO, (39<<2),PIN39_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN39_OUT _bm(_GPIO_39,REG_BASE_GPIO, (39<<2),PIN39_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN39_OEN _bm(_GPIO_39,REG_BASE_GPIO, (39<<2),PIN39_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN39_IRQ_DIR _bm(_GPIO_39,REG_BASE_GPIO, (39<<2),PIN39_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN39_IRQ_EN _bm(_GPIO_39,REG_BASE_GPIO, (39<<2),PIN39_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN39_IRQ_CLR _bm(_GPIO_39,REG_BASE_GPIO, (39<<2),PIN39_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN39_IRQ _bm(_GPIO_39,REG_BASE_GPIO, (39<<2),PIN39_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN40_IN _bm(_GPIO_40,REG_BASE_GPIO, (40<<2),PIN40_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN40_OUT _bm(_GPIO_40,REG_BASE_GPIO, (40<<2),PIN40_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN40_OEN _bm(_GPIO_40,REG_BASE_GPIO, (40<<2),PIN40_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN40_IRQ_DIR _bm(_GPIO_40,REG_BASE_GPIO, (40<<2),PIN40_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN40_IRQ_EN _bm(_GPIO_40,REG_BASE_GPIO, (40<<2),PIN40_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN40_IRQ_CLR _bm(_GPIO_40,REG_BASE_GPIO, (40<<2),PIN40_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN40_IRQ _bm(_GPIO_40,REG_BASE_GPIO, (40<<2),PIN40_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN41_IN _bm(_GPIO_41,REG_BASE_GPIO, (41<<2),PIN41_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN41_OUT _bm(_GPIO_41,REG_BASE_GPIO, (41<<2),PIN41_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN41_OEN _bm(_GPIO_41,REG_BASE_GPIO, (41<<2),PIN41_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN41_IRQ_DIR _bm(_GPIO_41,REG_BASE_GPIO, (41<<2),PIN41_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN41_IRQ_EN _bm(_GPIO_41,REG_BASE_GPIO, (41<<2),PIN41_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN41_IRQ_CLR _bm(_GPIO_41,REG_BASE_GPIO, (41<<2),PIN41_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN41_IRQ _bm(_GPIO_41,REG_BASE_GPIO, (41<<2),PIN41_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN42_IN _bm(_GPIO_42,REG_BASE_GPIO, (42<<2),PIN42_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN42_OUT _bm(_GPIO_42,REG_BASE_GPIO, (42<<2),PIN42_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN42_OEN _bm(_GPIO_42,REG_BASE_GPIO, (42<<2),PIN42_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN42_IRQ_DIR _bm(_GPIO_42,REG_BASE_GPIO, (42<<2),PIN42_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN42_IRQ_EN _bm(_GPIO_42,REG_BASE_GPIO, (42<<2),PIN42_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN42_IRQ_CLR _bm(_GPIO_42,REG_BASE_GPIO, (42<<2),PIN42_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN42_IRQ _bm(_GPIO_42,REG_BASE_GPIO, (42<<2),PIN42_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN43_IN _bm(_GPIO_43,REG_BASE_GPIO, (43<<2),PIN43_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN43_OUT _bm(_GPIO_43,REG_BASE_GPIO, (43<<2),PIN43_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN43_OEN _bm(_GPIO_43,REG_BASE_GPIO, (43<<2),PIN43_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN43_IRQ_DIR _bm(_GPIO_43,REG_BASE_GPIO, (43<<2),PIN43_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN43_IRQ_EN _bm(_GPIO_43,REG_BASE_GPIO, (43<<2),PIN43_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN43_IRQ_CLR _bm(_GPIO_43,REG_BASE_GPIO, (43<<2),PIN43_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN43_IRQ _bm(_GPIO_43,REG_BASE_GPIO, (43<<2),PIN43_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN44_IN _bm(_GPIO_44,REG_BASE_GPIO, (44<<2),PIN44_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN44_OUT _bm(_GPIO_44,REG_BASE_GPIO, (44<<2),PIN44_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN44_OEN _bm(_GPIO_44,REG_BASE_GPIO, (44<<2),PIN44_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN44_IRQ_DIR _bm(_GPIO_44,REG_BASE_GPIO, (44<<2),PIN44_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN44_IRQ_EN _bm(_GPIO_44,REG_BASE_GPIO, (44<<2),PIN44_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN44_IRQ_CLR _bm(_GPIO_44,REG_BASE_GPIO, (44<<2),PIN44_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN44_IRQ _bm(_GPIO_44,REG_BASE_GPIO, (44<<2),PIN44_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN45_IN _bm(_GPIO_45,REG_BASE_GPIO, (45<<2),PIN45_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN45_OUT _bm(_GPIO_45,REG_BASE_GPIO, (45<<2),PIN45_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN45_OEN _bm(_GPIO_45,REG_BASE_GPIO, (45<<2),PIN45_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN45_IRQ_DIR _bm(_GPIO_45,REG_BASE_GPIO, (45<<2),PIN45_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN45_IRQ_EN _bm(_GPIO_45,REG_BASE_GPIO, (45<<2),PIN45_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN45_IRQ_CLR _bm(_GPIO_45,REG_BASE_GPIO, (45<<2),PIN45_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN45_IRQ _bm(_GPIO_45,REG_BASE_GPIO, (45<<2),PIN45_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN46_IN _bm(_GPIO_46,REG_BASE_GPIO, (46<<2),PIN46_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN46_OUT _bm(_GPIO_46,REG_BASE_GPIO, (46<<2),PIN46_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN46_OEN _bm(_GPIO_46,REG_BASE_GPIO, (46<<2),PIN46_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN46_IRQ_DIR _bm(_GPIO_46,REG_BASE_GPIO, (46<<2),PIN46_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN46_IRQ_EN _bm(_GPIO_46,REG_BASE_GPIO, (46<<2),PIN46_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN46_IRQ_CLR _bm(_GPIO_46,REG_BASE_GPIO, (46<<2),PIN46_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN46_IRQ _bm(_GPIO_46,REG_BASE_GPIO, (46<<2),PIN46_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN47_IN _bm(_GPIO_47,REG_BASE_GPIO, (47<<2),PIN47_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN47_OUT _bm(_GPIO_47,REG_BASE_GPIO, (47<<2),PIN47_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN47_OEN _bm(_GPIO_47,REG_BASE_GPIO, (47<<2),PIN47_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN47_IRQ_DIR _bm(_GPIO_47,REG_BASE_GPIO, (47<<2),PIN47_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN47_IRQ_EN _bm(_GPIO_47,REG_BASE_GPIO, (47<<2),PIN47_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN47_IRQ_CLR _bm(_GPIO_47,REG_BASE_GPIO, (47<<2),PIN47_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN47_IRQ _bm(_GPIO_47,REG_BASE_GPIO, (47<<2),PIN47_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN48_IN _bm(_GPIO_48,REG_BASE_GPIO, (48<<2),PIN48_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN48_OUT _bm(_GPIO_48,REG_BASE_GPIO, (48<<2),PIN48_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN48_OEN _bm(_GPIO_48,REG_BASE_GPIO, (48<<2),PIN48_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN48_IRQ_DIR _bm(_GPIO_48,REG_BASE_GPIO, (48<<2),PIN48_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN48_IRQ_EN _bm(_GPIO_48,REG_BASE_GPIO, (48<<2),PIN48_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN48_IRQ_CLR _bm(_GPIO_48,REG_BASE_GPIO, (48<<2),PIN48_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN48_IRQ _bm(_GPIO_48,REG_BASE_GPIO, (48<<2),PIN48_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN49_IN _bm(_GPIO_49,REG_BASE_GPIO, (49<<2),PIN49_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN49_OUT _bm(_GPIO_49,REG_BASE_GPIO, (49<<2),PIN49_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN49_OEN _bm(_GPIO_49,REG_BASE_GPIO, (49<<2),PIN49_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN49_IRQ_DIR _bm(_GPIO_49,REG_BASE_GPIO, (49<<2),PIN49_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN49_IRQ_EN _bm(_GPIO_49,REG_BASE_GPIO, (49<<2),PIN49_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN49_IRQ_CLR _bm(_GPIO_49,REG_BASE_GPIO, (49<<2),PIN49_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN49_IRQ _bm(_GPIO_49,REG_BASE_GPIO, (49<<2),PIN49_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN50_IN _bm(_GPIO_50,REG_BASE_GPIO, (50<<2),PIN50_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN50_OUT _bm(_GPIO_50,REG_BASE_GPIO, (50<<2),PIN50_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN50_OEN _bm(_GPIO_50,REG_BASE_GPIO, (50<<2),PIN50_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN50_IRQ_DIR _bm(_GPIO_50,REG_BASE_GPIO, (50<<2),PIN50_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN50_IRQ_EN _bm(_GPIO_50,REG_BASE_GPIO, (50<<2),PIN50_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN50_IRQ_CLR _bm(_GPIO_50,REG_BASE_GPIO, (50<<2),PIN50_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN50_IRQ _bm(_GPIO_50,REG_BASE_GPIO, (50<<2),PIN50_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN51_IN _bm(_GPIO_51,REG_BASE_GPIO, (51<<2),PIN51_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN51_OUT _bm(_GPIO_51,REG_BASE_GPIO, (51<<2),PIN51_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN51_OEN _bm(_GPIO_51,REG_BASE_GPIO, (51<<2),PIN51_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN51_IRQ_DIR _bm(_GPIO_51,REG_BASE_GPIO, (51<<2),PIN51_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN51_IRQ_EN _bm(_GPIO_51,REG_BASE_GPIO, (51<<2),PIN51_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN51_IRQ_CLR _bm(_GPIO_51,REG_BASE_GPIO, (51<<2),PIN51_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN51_IRQ _bm(_GPIO_51,REG_BASE_GPIO, (51<<2),PIN51_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN52_IN _bm(_GPIO_52,REG_BASE_GPIO, (52<<2),PIN52_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN52_OUT _bm(_GPIO_52,REG_BASE_GPIO, (52<<2),PIN52_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN52_OEN _bm(_GPIO_52,REG_BASE_GPIO, (52<<2),PIN52_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN52_IRQ_DIR _bm(_GPIO_52,REG_BASE_GPIO, (52<<2),PIN52_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN52_IRQ_EN _bm(_GPIO_52,REG_BASE_GPIO, (52<<2),PIN52_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN52_IRQ_CLR _bm(_GPIO_52,REG_BASE_GPIO, (52<<2),PIN52_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN52_IRQ _bm(_GPIO_52,REG_BASE_GPIO, (52<<2),PIN52_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN53_IN _bm(_GPIO_53,REG_BASE_GPIO, (53<<2),PIN53_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN53_OUT _bm(_GPIO_53,REG_BASE_GPIO, (53<<2),PIN53_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN53_OEN _bm(_GPIO_53,REG_BASE_GPIO, (53<<2),PIN53_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN53_IRQ_DIR _bm(_GPIO_53,REG_BASE_GPIO, (53<<2),PIN53_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN53_IRQ_EN _bm(_GPIO_53,REG_BASE_GPIO, (53<<2),PIN53_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN53_IRQ_CLR _bm(_GPIO_53,REG_BASE_GPIO, (53<<2),PIN53_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN53_IRQ _bm(_GPIO_53,REG_BASE_GPIO, (53<<2),PIN53_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN54_IN _bm(_GPIO_54,REG_BASE_GPIO, (54<<2),PIN54_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN54_OUT _bm(_GPIO_54,REG_BASE_GPIO, (54<<2),PIN54_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN54_OEN _bm(_GPIO_54,REG_BASE_GPIO, (54<<2),PIN54_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN54_IRQ_DIR _bm(_GPIO_54,REG_BASE_GPIO, (54<<2),PIN54_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN54_IRQ_EN _bm(_GPIO_54,REG_BASE_GPIO, (54<<2),PIN54_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN54_IRQ_CLR _bm(_GPIO_54,REG_BASE_GPIO, (54<<2),PIN54_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN54_IRQ _bm(_GPIO_54,REG_BASE_GPIO, (54<<2),PIN54_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN55_IN _bm(_GPIO_55,REG_BASE_GPIO, (55<<2),PIN55_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN55_OUT _bm(_GPIO_55,REG_BASE_GPIO, (55<<2),PIN55_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN55_OEN _bm(_GPIO_55,REG_BASE_GPIO, (55<<2),PIN55_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN55_IRQ_DIR _bm(_GPIO_55,REG_BASE_GPIO, (55<<2),PIN55_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN55_IRQ_EN _bm(_GPIO_55,REG_BASE_GPIO, (55<<2),PIN55_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN55_IRQ_CLR _bm(_GPIO_55,REG_BASE_GPIO, (55<<2),PIN55_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN55_IRQ _bm(_GPIO_55,REG_BASE_GPIO, (55<<2),PIN55_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN56_IN _bm(_GPIO_56,REG_BASE_GPIO, (56<<2),PIN56_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN56_OUT _bm(_GPIO_56,REG_BASE_GPIO, (56<<2),PIN56_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN56_OEN _bm(_GPIO_56,REG_BASE_GPIO, (56<<2),PIN56_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN56_IRQ_DIR _bm(_GPIO_56,REG_BASE_GPIO, (56<<2),PIN56_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN56_IRQ_EN _bm(_GPIO_56,REG_BASE_GPIO, (56<<2),PIN56_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN56_IRQ_CLR _bm(_GPIO_56,REG_BASE_GPIO, (56<<2),PIN56_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN56_IRQ _bm(_GPIO_56,REG_BASE_GPIO, (56<<2),PIN56_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN57_IN _bm(_GPIO_57,REG_BASE_GPIO, (57<<2),PIN57_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN57_OUT _bm(_GPIO_57,REG_BASE_GPIO, (57<<2),PIN57_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN57_OEN _bm(_GPIO_57,REG_BASE_GPIO, (57<<2),PIN57_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN57_IRQ_DIR _bm(_GPIO_57,REG_BASE_GPIO, (57<<2),PIN57_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN57_IRQ_EN _bm(_GPIO_57,REG_BASE_GPIO, (57<<2),PIN57_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN57_IRQ_CLR _bm(_GPIO_57,REG_BASE_GPIO, (57<<2),PIN57_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN57_IRQ _bm(_GPIO_57,REG_BASE_GPIO, (57<<2),PIN57_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN58_IN _bm(_GPIO_58,REG_BASE_GPIO, (58<<2),PIN58_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN58_OUT _bm(_GPIO_58,REG_BASE_GPIO, (58<<2),PIN58_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN58_OEN _bm(_GPIO_58,REG_BASE_GPIO, (58<<2),PIN58_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN58_IRQ_DIR _bm(_GPIO_58,REG_BASE_GPIO, (58<<2),PIN58_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN58_IRQ_EN _bm(_GPIO_58,REG_BASE_GPIO, (58<<2),PIN58_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN58_IRQ_CLR _bm(_GPIO_58,REG_BASE_GPIO, (58<<2),PIN58_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN58_IRQ _bm(_GPIO_58,REG_BASE_GPIO, (58<<2),PIN58_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN59_IN _bm(_GPIO_59,REG_BASE_GPIO, (59<<2),PIN59_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN59_OUT _bm(_GPIO_59,REG_BASE_GPIO, (59<<2),PIN59_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN59_OEN _bm(_GPIO_59,REG_BASE_GPIO, (59<<2),PIN59_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN59_IRQ_DIR _bm(_GPIO_59,REG_BASE_GPIO, (59<<2),PIN59_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN59_IRQ_EN _bm(_GPIO_59,REG_BASE_GPIO, (59<<2),PIN59_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN59_IRQ_CLR _bm(_GPIO_59,REG_BASE_GPIO, (59<<2),PIN59_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN59_IRQ _bm(_GPIO_59,REG_BASE_GPIO, (59<<2),PIN59_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN60_IN _bm(_GPIO_60,REG_BASE_GPIO, (60<<2),PIN60_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN60_OUT _bm(_GPIO_60,REG_BASE_GPIO, (60<<2),PIN60_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN60_OEN _bm(_GPIO_60,REG_BASE_GPIO, (60<<2),PIN60_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN60_IRQ_DIR _bm(_GPIO_60,REG_BASE_GPIO, (60<<2),PIN60_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN60_IRQ_EN _bm(_GPIO_60,REG_BASE_GPIO, (60<<2),PIN60_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN60_IRQ_CLR _bm(_GPIO_60,REG_BASE_GPIO, (60<<2),PIN60_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN60_IRQ _bm(_GPIO_60,REG_BASE_GPIO, (60<<2),PIN60_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN61_IN _bm(_GPIO_61,REG_BASE_GPIO, (61<<2),PIN61_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN61_OUT _bm(_GPIO_61,REG_BASE_GPIO, (61<<2),PIN61_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN61_OEN _bm(_GPIO_61,REG_BASE_GPIO, (61<<2),PIN61_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN61_IRQ_DIR _bm(_GPIO_61,REG_BASE_GPIO, (61<<2),PIN61_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN61_IRQ_EN _bm(_GPIO_61,REG_BASE_GPIO, (61<<2),PIN61_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN61_IRQ_CLR _bm(_GPIO_61,REG_BASE_GPIO, (61<<2),PIN61_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN61_IRQ _bm(_GPIO_61,REG_BASE_GPIO, (61<<2),PIN61_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN62_IN _bm(_GPIO_62,REG_BASE_GPIO, (62<<2),PIN62_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN62_OUT _bm(_GPIO_62,REG_BASE_GPIO, (62<<2),PIN62_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN62_OEN _bm(_GPIO_62,REG_BASE_GPIO, (62<<2),PIN62_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN62_IRQ_DIR _bm(_GPIO_62,REG_BASE_GPIO, (62<<2),PIN62_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN62_IRQ_EN _bm(_GPIO_62,REG_BASE_GPIO, (62<<2),PIN62_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN62_IRQ_CLR _bm(_GPIO_62,REG_BASE_GPIO, (62<<2),PIN62_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN62_IRQ _bm(_GPIO_62,REG_BASE_GPIO, (62<<2),PIN62_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN63_IN _bm(_GPIO_63,REG_BASE_GPIO, (63<<2),PIN63_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN63_OUT _bm(_GPIO_63,REG_BASE_GPIO, (63<<2),PIN63_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN63_OEN _bm(_GPIO_63,REG_BASE_GPIO, (63<<2),PIN63_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN63_IRQ_DIR _bm(_GPIO_63,REG_BASE_GPIO, (63<<2),PIN63_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN63_IRQ_EN _bm(_GPIO_63,REG_BASE_GPIO, (63<<2),PIN63_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN63_IRQ_CLR _bm(_GPIO_63,REG_BASE_GPIO, (63<<2),PIN63_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN63_IRQ _bm(_GPIO_63,REG_BASE_GPIO, (63<<2),PIN63_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN64_IN _bm(_GPIO_64,REG_BASE_GPIO, (64<<2),PIN64_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN64_OUT _bm(_GPIO_64,REG_BASE_GPIO, (64<<2),PIN64_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN64_OEN _bm(_GPIO_64,REG_BASE_GPIO, (64<<2),PIN64_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN64_IRQ_DIR _bm(_GPIO_64,REG_BASE_GPIO, (64<<2),PIN64_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN64_IRQ_EN _bm(_GPIO_64,REG_BASE_GPIO, (64<<2),PIN64_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN64_IRQ_CLR _bm(_GPIO_64,REG_BASE_GPIO, (64<<2),PIN64_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN64_IRQ _bm(_GPIO_64,REG_BASE_GPIO, (64<<2),PIN64_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN65_IN _bm(_GPIO_65,REG_BASE_GPIO, (65<<2),PIN65_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN65_OUT _bm(_GPIO_65,REG_BASE_GPIO, (65<<2),PIN65_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN65_OEN _bm(_GPIO_65,REG_BASE_GPIO, (65<<2),PIN65_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN65_IRQ_DIR _bm(_GPIO_65,REG_BASE_GPIO, (65<<2),PIN65_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN65_IRQ_EN _bm(_GPIO_65,REG_BASE_GPIO, (65<<2),PIN65_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN65_IRQ_CLR _bm(_GPIO_65,REG_BASE_GPIO, (65<<2),PIN65_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN65_IRQ _bm(_GPIO_65,REG_BASE_GPIO, (65<<2),PIN65_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN66_IN _bm(_GPIO_66,REG_BASE_GPIO, (66<<2),PIN66_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN66_OUT _bm(_GPIO_66,REG_BASE_GPIO, (66<<2),PIN66_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN66_OEN _bm(_GPIO_66,REG_BASE_GPIO, (66<<2),PIN66_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN66_IRQ_DIR _bm(_GPIO_66,REG_BASE_GPIO, (66<<2),PIN66_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN66_IRQ_EN _bm(_GPIO_66,REG_BASE_GPIO, (66<<2),PIN66_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN66_IRQ_CLR _bm(_GPIO_66,REG_BASE_GPIO, (66<<2),PIN66_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN66_IRQ _bm(_GPIO_66,REG_BASE_GPIO, (66<<2),PIN66_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN67_IN _bm(_GPIO_67,REG_BASE_GPIO, (67<<2),PIN67_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN67_OUT _bm(_GPIO_67,REG_BASE_GPIO, (67<<2),PIN67_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN67_OEN _bm(_GPIO_67,REG_BASE_GPIO, (67<<2),PIN67_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN67_IRQ_DIR _bm(_GPIO_67,REG_BASE_GPIO, (67<<2),PIN67_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN67_IRQ_EN _bm(_GPIO_67,REG_BASE_GPIO, (67<<2),PIN67_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN67_IRQ_CLR _bm(_GPIO_67,REG_BASE_GPIO, (67<<2),PIN67_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN67_IRQ _bm(_GPIO_67,REG_BASE_GPIO, (67<<2),PIN67_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN68_IN _bm(_GPIO_68,REG_BASE_GPIO, (68<<2),PIN68_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN68_OUT _bm(_GPIO_68,REG_BASE_GPIO, (68<<2),PIN68_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN68_OEN _bm(_GPIO_68,REG_BASE_GPIO, (68<<2),PIN68_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN68_IRQ_DIR _bm(_GPIO_68,REG_BASE_GPIO, (68<<2),PIN68_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN68_IRQ_EN _bm(_GPIO_68,REG_BASE_GPIO, (68<<2),PIN68_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN68_IRQ_CLR _bm(_GPIO_68,REG_BASE_GPIO, (68<<2),PIN68_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN68_IRQ _bm(_GPIO_68,REG_BASE_GPIO, (68<<2),PIN68_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN69_IN _bm(_GPIO_69,REG_BASE_GPIO, (69<<2),PIN69_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN69_OUT _bm(_GPIO_69,REG_BASE_GPIO, (69<<2),PIN69_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN69_OEN _bm(_GPIO_69,REG_BASE_GPIO, (69<<2),PIN69_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN69_IRQ_DIR _bm(_GPIO_69,REG_BASE_GPIO, (69<<2),PIN69_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN69_IRQ_EN _bm(_GPIO_69,REG_BASE_GPIO, (69<<2),PIN69_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN69_IRQ_CLR _bm(_GPIO_69,REG_BASE_GPIO, (69<<2),PIN69_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN69_IRQ _bm(_GPIO_69,REG_BASE_GPIO, (69<<2),PIN69_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN70_IN _bm(_GPIO_70,REG_BASE_GPIO, (70<<2),PIN70_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN70_OUT _bm(_GPIO_70,REG_BASE_GPIO, (70<<2),PIN70_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN70_OEN _bm(_GPIO_70,REG_BASE_GPIO, (70<<2),PIN70_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN70_IRQ_DIR _bm(_GPIO_70,REG_BASE_GPIO, (70<<2),PIN70_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN70_IRQ_EN _bm(_GPIO_70,REG_BASE_GPIO, (70<<2),PIN70_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN70_IRQ_CLR _bm(_GPIO_70,REG_BASE_GPIO, (70<<2),PIN70_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN70_IRQ _bm(_GPIO_70,REG_BASE_GPIO, (70<<2),PIN70_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN71_IN _bm(_GPIO_71,REG_BASE_GPIO, (71<<2),PIN71_IN) // 1 Bit, 1'h0, R
#define GPIO_PIN71_OUT _bm(_GPIO_71,REG_BASE_GPIO, (71<<2),PIN71_OUT) // 1 Bit, 1'h0, RW
#define GPIO_PIN71_OEN _bm(_GPIO_71,REG_BASE_GPIO, (71<<2),PIN71_OEN) // 1 Bit, 1'h1, RW
#define GPIO_PIN71_IRQ_DIR _bm(_GPIO_71,REG_BASE_GPIO, (71<<2),PIN71_IRQ_DIR) // 1 Bit, 1'h0, RW
#define GPIO_PIN71_IRQ_EN _bm(_GPIO_71,REG_BASE_GPIO, (71<<2),PIN71_IRQ_EN) // 1 Bit, 1'h0, RW
#define GPIO_PIN71_IRQ_CLR _bm(_GPIO_71,REG_BASE_GPIO, (71<<2),PIN71_IRQ_CLR) // 1 Bit, 1'h0, W
#define GPIO_PIN71_IRQ _bm(_GPIO_71,REG_BASE_GPIO, (71<<2),PIN71_IRQ) // 1 Bit, 1'h0, R
#define GPIO_PIN_72_64_IN _bm(_GPIO_72,REG_BASE_GPIO, (72<<2),PIN_72_64_IN) // 8 Bit, 8'h0, R
#define GPIO_PIN_63_32_IN _bm(_GPIO_73,REG_BASE_GPIO, (73<<2),PIN_63_32_IN) // 32 Bit, 32'h0, R
#define GPIO_PIN_31_0_IN _bm(_GPIO_74,REG_BASE_GPIO, (74<<2),PIN_31_0_IN) // 32 Bit, 32'h0, R
#define GPIO_PIN_72_64_OUT _bm(_GPIO_75,REG_BASE_GPIO, (75<<2),PIN_72_64_OUT) // 8 Bit, 8'h0, RW
#define GPIO_PIN_63_32_OUT _bm(_GPIO_76,REG_BASE_GPIO, (76<<2),PIN_63_32_OUT) // 32 Bit, 32'h0, RW
#define GPIO_PIN_31_0_OUT _bm(_GPIO_77,REG_BASE_GPIO, (77<<2),PIN_31_0_OUT) // 32 Bit, 32'h0, RW
#define GPIO_PIN_72_64_OEN _bm(_GPIO_78,REG_BASE_GPIO, (78<<2),PIN_72_64_OEN) // 8 Bit, 8'hff, RW
#define GPIO_PIN_63_32_OEN _bm(_GPIO_79,REG_BASE_GPIO, (79<<2),PIN_63_32_OEN) // 32 Bit, 32'hffffffff, RW
#define GPIO_PIN_31_0_OEN _bm(_GPIO_80,REG_BASE_GPIO, (80<<2),PIN_31_0_OEN) // 32 Bit, 32'hffffffff, RW
#define GPIO_PIN_72_64_IRQ_DIR _bm(_GPIO_81,REG_BASE_GPIO, (81<<2),PIN_72_64_IRQ_DIR) // 8 Bit, 8'h0, RW
#define GPIO_PIN_63_32_IRQ_DIR _bm(_GPIO_82,REG_BASE_GPIO, (82<<2),PIN_63_32_IRQ_DIR) // 32 Bit, 32'h0, RW
#define GPIO_PIN_31_0_IRQ_DIR _bm(_GPIO_83,REG_BASE_GPIO, (83<<2),PIN_31_0_IRQ_DIR) // 32 Bit, 32'h0, RW
#define GPIO_PIN_72_64_IRQ_EN _bm(_GPIO_84,REG_BASE_GPIO, (84<<2),PIN_72_64_IRQ_EN) // 8 Bit, 8'h0, RW
#define GPIO_PIN_63_32_IRQ_EN _bm(_GPIO_85,REG_BASE_GPIO, (85<<2),PIN_63_32_IRQ_EN) // 32 Bit, 32'h0, RW
#define GPIO_PIN_31_0_IRQ_EN _bm(_GPIO_86,REG_BASE_GPIO, (86<<2),PIN_31_0_IRQ_EN) // 32 Bit, 32'h0, RW
#define GPIO_PIN_72_64_IRQ_CLR _bm(_GPIO_87,REG_BASE_GPIO, (87<<2),PIN_72_64_IRQ_CLR) // 8 Bit, 8'h0, RW
#define GPIO_PIN_63_32_IRQ_CLR _bm(_GPIO_88,REG_BASE_GPIO, (88<<2),PIN_63_32_IRQ_CLR) // 32 Bit, 32'h0, RW
#define GPIO_PIN_31_0_IRQ_CLR _bm(_GPIO_89,REG_BASE_GPIO, (89<<2),PIN_31_0_IRQ_CLR) // 32 Bit, 32'h0, RW
#define GPIO_PIN_72_64_IRQ _bm(_GPIO_90,REG_BASE_GPIO, (90<<2),PIN_72_64_IRQ) // 8 Bit, 8'h0, RW
#define GPIO_PIN_63_32_IRQ _bm(_GPIO_91,REG_BASE_GPIO, (91<<2),PIN_63_32_IRQ) // 32 Bit, 32'h0, RW
#define GPIO_PIN_31_0_IRQ _bm(_GPIO_92,REG_BASE_GPIO, (92<<2),PIN_31_0_IRQ) // 32 Bit, 32'h0, RW
#define UART0_CLK_DIV _bm(_UART0_0,REG_BASE_UART0, (0<<2),CLK_DIV) // 12 Bit, 12'h02c, RW
#define UART0_TX_TYPE _bm(_UART0_0,REG_BASE_UART0, (0<<2),TX_TYPE) // 1 Bit, 1'h0, RW
#define UART0_STOP_BIT _bm(_UART0_0,REG_BASE_UART0, (0<<2),STOP_BIT) // 1 Bit, 1'h0, RW
#define UART0_PARITY_EN _bm(_UART0_0,REG_BASE_UART0, (0<<2),PARITY_EN) // 1 Bit, 1'h0, RW
#define UART0_PARITY_TYPE _bm(_UART0_0,REG_BASE_UART0, (0<<2),PARITY_TYPE) // 1 Bit, 1'h0, RW
#define UART0_TX_IRQ _bm(_UART0_0,REG_BASE_UART0, (0<<2),TX_IRQ) // 1 Bit, 1'h0, R
#define UART0_TX_IRQ_EN _bm(_UART0_0,REG_BASE_UART0, (0<<2),TX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART0_TX_IRQ_CLR _bm(_UART0_0,REG_BASE_UART0, (0<<2),TX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART0_TX_EMPTY _bm(_UART0_0,REG_BASE_UART0, (0<<2),TX_EMPTY) // 1 Bit, 1'h0, RW
#define UART0_TX_FULL _bm(_UART0_0,REG_BASE_UART0, (0<<2),TX_FULL) // 1 Bit, 1'h0, RW
#define UART0_RX_IRQ _bm(_UART0_0,REG_BASE_UART0, (0<<2),RX_IRQ) // 1 Bit, 1'h0, R
#define UART0_RX_IRQ_EN _bm(_UART0_0,REG_BASE_UART0, (0<<2),RX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART0_RX_IRQ_CLR _bm(_UART0_0,REG_BASE_UART0, (0<<2),RX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART0_RX_EMPTY _bm(_UART0_0,REG_BASE_UART0, (0<<2),RX_EMPTY) // 1 Bit, 1'h0, RW
#define UART0_RX_FULL _bm(_UART0_0,REG_BASE_UART0, (0<<2),RX_FULL) // 1 Bit, 1'h0, RW
#define UART0_RX_DAT _bm(_UART0_1,REG_BASE_UART0, (1<<2),RX_DAT) // 8 Bit, 8'h0, R
#define UART0_TX_DAT _bm(_UART0_2,REG_BASE_UART0, (2<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define UART0_RX_LMT _bm(_UART0_3,REG_BASE_UART0, (3<<2),RX_LMT) // 20 Bit, 20'h2ffff, RW
#define UART1_CLK_DIV _bm(_UART1_0,REG_BASE_UART1, (0<<2),CLK_DIV) // 12 Bit, 12'h02c, RW
#define UART1_TX_TYPE _bm(_UART1_0,REG_BASE_UART1, (0<<2),TX_TYPE) // 1 Bit, 1'h0, RW
#define UART1_STOP_BIT _bm(_UART1_0,REG_BASE_UART1, (0<<2),STOP_BIT) // 1 Bit, 1'h0, RW
#define UART1_PARITY_EN _bm(_UART1_0,REG_BASE_UART1, (0<<2),PARITY_EN) // 1 Bit, 1'h0, RW
#define UART1_PARITY_TYPE _bm(_UART1_0,REG_BASE_UART1, (0<<2),PARITY_TYPE) // 1 Bit, 1'h0, RW
#define UART1_TX_IRQ _bm(_UART1_0,REG_BASE_UART1, (0<<2),TX_IRQ) // 1 Bit, 1'h0, R
#define UART1_TX_IRQ_EN _bm(_UART1_0,REG_BASE_UART1, (0<<2),TX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART1_TX_IRQ_CLR _bm(_UART1_0,REG_BASE_UART1, (0<<2),TX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART1_TX_EMPTY _bm(_UART1_0,REG_BASE_UART1, (0<<2),TX_EMPTY) // 1 Bit, 1'h0, RW
#define UART1_TX_FULL _bm(_UART1_0,REG_BASE_UART1, (0<<2),TX_FULL) // 1 Bit, 1'h0, RW
#define UART1_RX_IRQ _bm(_UART1_0,REG_BASE_UART1, (0<<2),RX_IRQ) // 1 Bit, 1'h0, R
#define UART1_RX_IRQ_EN _bm(_UART1_0,REG_BASE_UART1, (0<<2),RX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART1_RX_IRQ_CLR _bm(_UART1_0,REG_BASE_UART1, (0<<2),RX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART1_RX_EMPTY _bm(_UART1_0,REG_BASE_UART1, (0<<2),RX_EMPTY) // 1 Bit, 1'h0, RW
#define UART1_RX_FULL _bm(_UART1_0,REG_BASE_UART1, (0<<2),RX_FULL) // 1 Bit, 1'h0, RW
#define UART1_RX_DAT _bm(_UART1_1,REG_BASE_UART1, (1<<2),RX_DAT) // 8 Bit, 8'h0, R
#define UART1_TX_DAT _bm(_UART1_2,REG_BASE_UART1, (2<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define UART1_RX_LMT _bm(_UART1_3,REG_BASE_UART1, (3<<2),RX_LMT) // 20 Bit, 20'h2ffff, RW
#define UART2_CLK_DIV _bm(_UART2_0,REG_BASE_UART2, (0<<2),CLK_DIV) // 12 Bit, 12'h02c, RW
#define UART2_TX_TYPE _bm(_UART2_0,REG_BASE_UART2, (0<<2),TX_TYPE) // 1 Bit, 1'h0, RW
#define UART2_STOP_BIT _bm(_UART2_0,REG_BASE_UART2, (0<<2),STOP_BIT) // 1 Bit, 1'h0, RW
#define UART2_PARITY_EN _bm(_UART2_0,REG_BASE_UART2, (0<<2),PARITY_EN) // 1 Bit, 1'h0, RW
#define UART2_PARITY_TYPE _bm(_UART2_0,REG_BASE_UART2, (0<<2),PARITY_TYPE) // 1 Bit, 1'h0, RW
#define UART2_TX_IRQ _bm(_UART2_0,REG_BASE_UART2, (0<<2),TX_IRQ) // 1 Bit, 1'h0, R
#define UART2_TX_IRQ_EN _bm(_UART2_0,REG_BASE_UART2, (0<<2),TX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART2_TX_IRQ_CLR _bm(_UART2_0,REG_BASE_UART2, (0<<2),TX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART2_TX_EMPTY _bm(_UART2_0,REG_BASE_UART2, (0<<2),TX_EMPTY) // 1 Bit, 1'h0, RW
#define UART2_TX_FULL _bm(_UART2_0,REG_BASE_UART2, (0<<2),TX_FULL) // 1 Bit, 1'h0, RW
#define UART2_RX_IRQ _bm(_UART2_0,REG_BASE_UART2, (0<<2),RX_IRQ) // 1 Bit, 1'h0, R
#define UART2_RX_IRQ_EN _bm(_UART2_0,REG_BASE_UART2, (0<<2),RX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART2_RX_IRQ_CLR _bm(_UART2_0,REG_BASE_UART2, (0<<2),RX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART2_RX_EMPTY _bm(_UART2_0,REG_BASE_UART2, (0<<2),RX_EMPTY) // 1 Bit, 1'h0, RW
#define UART2_RX_FULL _bm(_UART2_0,REG_BASE_UART2, (0<<2),RX_FULL) // 1 Bit, 1'h0, RW
#define UART2_RX_DAT _bm(_UART2_1,REG_BASE_UART2, (1<<2),RX_DAT) // 8 Bit, 8'h0, R
#define UART2_TX_DAT _bm(_UART2_2,REG_BASE_UART2, (2<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define UART2_RX_LMT _bm(_UART2_3,REG_BASE_UART2, (3<<2),RX_LMT) // 20 Bit, 20'h2ffff, RW
#define UART3_CLK_DIV _bm(_UART3_0,REG_BASE_UART3, (0<<2),CLK_DIV) // 12 Bit, 12'h02c, RW
#define UART3_TX_TYPE _bm(_UART3_0,REG_BASE_UART3, (0<<2),TX_TYPE) // 1 Bit, 1'h0, RW
#define UART3_STOP_BIT _bm(_UART3_0,REG_BASE_UART3, (0<<2),STOP_BIT) // 1 Bit, 1'h0, RW
#define UART3_PARITY_EN _bm(_UART3_0,REG_BASE_UART3, (0<<2),PARITY_EN) // 1 Bit, 1'h0, RW
#define UART3_PARITY_TYPE _bm(_UART3_0,REG_BASE_UART3, (0<<2),PARITY_TYPE) // 1 Bit, 1'h0, RW
#define UART3_TX_IRQ _bm(_UART3_0,REG_BASE_UART3, (0<<2),TX_IRQ) // 1 Bit, 1'h0, R
#define UART3_TX_IRQ_EN _bm(_UART3_0,REG_BASE_UART3, (0<<2),TX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART3_TX_IRQ_CLR _bm(_UART3_0,REG_BASE_UART3, (0<<2),TX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART3_TX_EMPTY _bm(_UART3_0,REG_BASE_UART3, (0<<2),TX_EMPTY) // 1 Bit, 1'h0, RW
#define UART3_TX_FULL _bm(_UART3_0,REG_BASE_UART3, (0<<2),TX_FULL) // 1 Bit, 1'h0, RW
#define UART3_RX_IRQ _bm(_UART3_0,REG_BASE_UART3, (0<<2),RX_IRQ) // 1 Bit, 1'h0, R
#define UART3_RX_IRQ_EN _bm(_UART3_0,REG_BASE_UART3, (0<<2),RX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART3_RX_IRQ_CLR _bm(_UART3_0,REG_BASE_UART3, (0<<2),RX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART3_RX_EMPTY _bm(_UART3_0,REG_BASE_UART3, (0<<2),RX_EMPTY) // 1 Bit, 1'h0, RW
#define UART3_RX_FULL _bm(_UART3_0,REG_BASE_UART3, (0<<2),RX_FULL) // 1 Bit, 1'h0, RW
#define UART3_RX_DAT _bm(_UART3_1,REG_BASE_UART3, (1<<2),RX_DAT) // 8 Bit, 8'h0, R
#define UART3_TX_DAT _bm(_UART3_2,REG_BASE_UART3, (2<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define UART3_RX_LMT _bm(_UART3_3,REG_BASE_UART3, (3<<2),RX_LMT) // 20 Bit, 20'h2ffff, RW
#define UART4_CLK_DIV _bm(_UART4_0,REG_BASE_UART4, (0<<2),CLK_DIV) // 12 Bit, 12'h02c, RW
#define UART4_TX_TYPE _bm(_UART4_0,REG_BASE_UART4, (0<<2),TX_TYPE) // 1 Bit, 1'h0, RW
#define UART4_STOP_BIT _bm(_UART4_0,REG_BASE_UART4, (0<<2),STOP_BIT) // 1 Bit, 1'h0, RW
#define UART4_PARITY_EN _bm(_UART4_0,REG_BASE_UART4, (0<<2),PARITY_EN) // 1 Bit, 1'h0, RW
#define UART4_PARITY_TYPE _bm(_UART4_0,REG_BASE_UART4, (0<<2),PARITY_TYPE) // 1 Bit, 1'h0, RW
#define UART4_TX_IRQ _bm(_UART4_0,REG_BASE_UART4, (0<<2),TX_IRQ) // 1 Bit, 1'h0, R
#define UART4_TX_IRQ_EN _bm(_UART4_0,REG_BASE_UART4, (0<<2),TX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART4_TX_IRQ_CLR _bm(_UART4_0,REG_BASE_UART4, (0<<2),TX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART4_TX_EMPTY _bm(_UART4_0,REG_BASE_UART4, (0<<2),TX_EMPTY) // 1 Bit, 1'h0, RW
#define UART4_TX_FULL _bm(_UART4_0,REG_BASE_UART4, (0<<2),TX_FULL) // 1 Bit, 1'h0, RW
#define UART4_RX_IRQ _bm(_UART4_0,REG_BASE_UART4, (0<<2),RX_IRQ) // 1 Bit, 1'h0, R
#define UART4_RX_IRQ_EN _bm(_UART4_0,REG_BASE_UART4, (0<<2),RX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART4_RX_IRQ_CLR _bm(_UART4_0,REG_BASE_UART4, (0<<2),RX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART4_RX_EMPTY _bm(_UART4_0,REG_BASE_UART4, (0<<2),RX_EMPTY) // 1 Bit, 1'h0, RW
#define UART4_RX_FULL _bm(_UART4_0,REG_BASE_UART4, (0<<2),RX_FULL) // 1 Bit, 1'h0, RW
#define UART4_RX_DAT _bm(_UART4_1,REG_BASE_UART4, (1<<2),RX_DAT) // 8 Bit, 8'h0, R
#define UART4_TX_DAT _bm(_UART4_2,REG_BASE_UART4, (2<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define UART4_RX_LMT _bm(_UART4_3,REG_BASE_UART4, (3<<2),RX_LMT) // 20 Bit, 20'h2ffff, RW
#define UART5_CLK_DIV _bm(_UART5_0,REG_BASE_UART5, (0<<2),CLK_DIV) // 12 Bit, 12'h02c, RW
#define UART5_TX_TYPE _bm(_UART5_0,REG_BASE_UART5, (0<<2),TX_TYPE) // 1 Bit, 1'h0, RW
#define UART5_STOP_BIT _bm(_UART5_0,REG_BASE_UART5, (0<<2),STOP_BIT) // 1 Bit, 1'h0, RW
#define UART5_PARITY_EN _bm(_UART5_0,REG_BASE_UART5, (0<<2),PARITY_EN) // 1 Bit, 1'h0, RW
#define UART5_PARITY_TYPE _bm(_UART5_0,REG_BASE_UART5, (0<<2),PARITY_TYPE) // 1 Bit, 1'h0, RW
#define UART5_TX_IRQ _bm(_UART5_0,REG_BASE_UART5, (0<<2),TX_IRQ) // 1 Bit, 1'h0, R
#define UART5_TX_IRQ_EN _bm(_UART5_0,REG_BASE_UART5, (0<<2),TX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART5_TX_IRQ_CLR _bm(_UART5_0,REG_BASE_UART5, (0<<2),TX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART5_TX_EMPTY _bm(_UART5_0,REG_BASE_UART5, (0<<2),TX_EMPTY) // 1 Bit, 1'h0, RW
#define UART5_TX_FULL _bm(_UART5_0,REG_BASE_UART5, (0<<2),TX_FULL) // 1 Bit, 1'h0, RW
#define UART5_RX_IRQ _bm(_UART5_0,REG_BASE_UART5, (0<<2),RX_IRQ) // 1 Bit, 1'h0, R
#define UART5_RX_IRQ_EN _bm(_UART5_0,REG_BASE_UART5, (0<<2),RX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART5_RX_IRQ_CLR _bm(_UART5_0,REG_BASE_UART5, (0<<2),RX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART5_RX_EMPTY _bm(_UART5_0,REG_BASE_UART5, (0<<2),RX_EMPTY) // 1 Bit, 1'h0, RW
#define UART5_RX_FULL _bm(_UART5_0,REG_BASE_UART5, (0<<2),RX_FULL) // 1 Bit, 1'h0, RW
#define UART5_RX_DAT _bm(_UART5_1,REG_BASE_UART5, (1<<2),RX_DAT) // 8 Bit, 8'h0, R
#define UART5_TX_DAT _bm(_UART5_2,REG_BASE_UART5, (2<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define UART5_RX_LMT _bm(_UART5_3,REG_BASE_UART5, (3<<2),RX_LMT) // 20 Bit, 20'h2ffff, RW
#define UART6_CLK_DIV _bm(_UART6_0,REG_BASE_UART6, (0<<2),CLK_DIV) // 12 Bit, 12'h02c, RW
#define UART6_TX_TYPE _bm(_UART6_0,REG_BASE_UART6, (0<<2),TX_TYPE) // 1 Bit, 1'h0, RW
#define UART6_STOP_BIT _bm(_UART6_0,REG_BASE_UART6, (0<<2),STOP_BIT) // 1 Bit, 1'h0, RW
#define UART6_PARITY_EN _bm(_UART6_0,REG_BASE_UART6, (0<<2),PARITY_EN) // 1 Bit, 1'h0, RW
#define UART6_PARITY_TYPE _bm(_UART6_0,REG_BASE_UART6, (0<<2),PARITY_TYPE) // 1 Bit, 1'h0, RW
#define UART6_TX_IRQ _bm(_UART6_0,REG_BASE_UART6, (0<<2),TX_IRQ) // 1 Bit, 1'h0, R
#define UART6_TX_IRQ_EN _bm(_UART6_0,REG_BASE_UART6, (0<<2),TX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART6_TX_IRQ_CLR _bm(_UART6_0,REG_BASE_UART6, (0<<2),TX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART6_TX_EMPTY _bm(_UART6_0,REG_BASE_UART6, (0<<2),TX_EMPTY) // 1 Bit, 1'h0, RW
#define UART6_TX_FULL _bm(_UART6_0,REG_BASE_UART6, (0<<2),TX_FULL) // 1 Bit, 1'h0, RW
#define UART6_RX_IRQ _bm(_UART6_0,REG_BASE_UART6, (0<<2),RX_IRQ) // 1 Bit, 1'h0, R
#define UART6_RX_IRQ_EN _bm(_UART6_0,REG_BASE_UART6, (0<<2),RX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART6_RX_IRQ_CLR _bm(_UART6_0,REG_BASE_UART6, (0<<2),RX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART6_RX_EMPTY _bm(_UART6_0,REG_BASE_UART6, (0<<2),RX_EMPTY) // 1 Bit, 1'h0, RW
#define UART6_RX_FULL _bm(_UART6_0,REG_BASE_UART6, (0<<2),RX_FULL) // 1 Bit, 1'h0, RW
#define UART6_RX_DAT _bm(_UART6_1,REG_BASE_UART6, (1<<2),RX_DAT) // 8 Bit, 8'h0, R
#define UART6_TX_DAT _bm(_UART6_2,REG_BASE_UART6, (2<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define UART6_RX_LMT _bm(_UART6_3,REG_BASE_UART6, (3<<2),RX_LMT) // 20 Bit, 20'h2ffff, RW
#define UART7_CLK_DIV _bm(_UART7_0,REG_BASE_UART7, (0<<2),CLK_DIV) // 12 Bit, 12'h02c, RW
#define UART7_TX_TYPE _bm(_UART7_0,REG_BASE_UART7, (0<<2),TX_TYPE) // 1 Bit, 1'h0, RW
#define UART7_STOP_BIT _bm(_UART7_0,REG_BASE_UART7, (0<<2),STOP_BIT) // 1 Bit, 1'h0, RW
#define UART7_PARITY_EN _bm(_UART7_0,REG_BASE_UART7, (0<<2),PARITY_EN) // 1 Bit, 1'h0, RW
#define UART7_PARITY_TYPE _bm(_UART7_0,REG_BASE_UART7, (0<<2),PARITY_TYPE) // 1 Bit, 1'h0, RW
#define UART7_TX_IRQ _bm(_UART7_0,REG_BASE_UART7, (0<<2),TX_IRQ) // 1 Bit, 1'h0, R
#define UART7_TX_IRQ_EN _bm(_UART7_0,REG_BASE_UART7, (0<<2),TX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART7_TX_IRQ_CLR _bm(_UART7_0,REG_BASE_UART7, (0<<2),TX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART7_TX_EMPTY _bm(_UART7_0,REG_BASE_UART7, (0<<2),TX_EMPTY) // 1 Bit, 1'h0, RW
#define UART7_TX_FULL _bm(_UART7_0,REG_BASE_UART7, (0<<2),TX_FULL) // 1 Bit, 1'h0, RW
#define UART7_RX_IRQ _bm(_UART7_0,REG_BASE_UART7, (0<<2),RX_IRQ) // 1 Bit, 1'h0, R
#define UART7_RX_IRQ_EN _bm(_UART7_0,REG_BASE_UART7, (0<<2),RX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART7_RX_IRQ_CLR _bm(_UART7_0,REG_BASE_UART7, (0<<2),RX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART7_RX_EMPTY _bm(_UART7_0,REG_BASE_UART7, (0<<2),RX_EMPTY) // 1 Bit, 1'h0, RW
#define UART7_RX_FULL _bm(_UART7_0,REG_BASE_UART7, (0<<2),RX_FULL) // 1 Bit, 1'h0, RW
#define UART7_RX_DAT _bm(_UART7_1,REG_BASE_UART7, (1<<2),RX_DAT) // 8 Bit, 8'h0, R
#define UART7_TX_DAT _bm(_UART7_2,REG_BASE_UART7, (2<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define UART7_RX_LMT _bm(_UART7_3,REG_BASE_UART7, (3<<2),RX_LMT) // 20 Bit, 20'h2ffff, RW
#define UART8_CLK_DIV _bm(_UART8_0,REG_BASE_UART8, (0<<2),CLK_DIV) // 12 Bit, 12'h02c, RW
#define UART8_TX_TYPE _bm(_UART8_0,REG_BASE_UART8, (0<<2),TX_TYPE) // 1 Bit, 1'h0, RW
#define UART8_STOP_BIT _bm(_UART8_0,REG_BASE_UART8, (0<<2),STOP_BIT) // 1 Bit, 1'h0, RW
#define UART8_PARITY_EN _bm(_UART8_0,REG_BASE_UART8, (0<<2),PARITY_EN) // 1 Bit, 1'h0, RW
#define UART8_PARITY_TYPE _bm(_UART8_0,REG_BASE_UART8, (0<<2),PARITY_TYPE) // 1 Bit, 1'h0, RW
#define UART8_TX_IRQ _bm(_UART8_0,REG_BASE_UART8, (0<<2),TX_IRQ) // 1 Bit, 1'h0, R
#define UART8_TX_IRQ_EN _bm(_UART8_0,REG_BASE_UART8, (0<<2),TX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART8_TX_IRQ_CLR _bm(_UART8_0,REG_BASE_UART8, (0<<2),TX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART8_TX_EMPTY _bm(_UART8_0,REG_BASE_UART8, (0<<2),TX_EMPTY) // 1 Bit, 1'h0, RW
#define UART8_TX_FULL _bm(_UART8_0,REG_BASE_UART8, (0<<2),TX_FULL) // 1 Bit, 1'h0, RW
#define UART8_RX_IRQ _bm(_UART8_0,REG_BASE_UART8, (0<<2),RX_IRQ) // 1 Bit, 1'h0, R
#define UART8_RX_IRQ_EN _bm(_UART8_0,REG_BASE_UART8, (0<<2),RX_IRQ_EN) // 1 Bit, 1'h0, RW
#define UART8_RX_IRQ_CLR _bm(_UART8_0,REG_BASE_UART8, (0<<2),RX_IRQ_CLR) // 1 Bit, 1'h0, W
#define UART8_RX_EMPTY _bm(_UART8_0,REG_BASE_UART8, (0<<2),RX_EMPTY) // 1 Bit, 1'h0, RW
#define UART8_RX_FULL _bm(_UART8_0,REG_BASE_UART8, (0<<2),RX_FULL) // 1 Bit, 1'h0, RW
#define UART8_RX_DAT _bm(_UART8_1,REG_BASE_UART8, (1<<2),RX_DAT) // 8 Bit, 8'h0, R
#define UART8_TX_DAT _bm(_UART8_2,REG_BASE_UART8, (2<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define UART8_RX_LMT _bm(_UART8_3,REG_BASE_UART8, (3<<2),RX_LMT) // 20 Bit, 20'h2ffff, RW
#define I2C0_RX_DAT _bm(_I2C0_0,REG_BASE_I2C0, (0<<2),RX_DAT) // 8 Bit, 8'h0, R
#define I2C0_TX_DAT _bm(_I2C0_0,REG_BASE_I2C0, (0<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define I2C0_ACT _bm(_I2C0_0,REG_BASE_I2C0, (0<<2),ACT) // 1 Bit, 1'h0, R
#define I2C0_MODE _bm(_I2C0_0,REG_BASE_I2C0, (0<<2),MODE) // 1 Bit, 1'h0, RW
#define I2C0_BIT_MODE _bm(_I2C0_0,REG_BASE_I2C0, (0<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define I2C0_IRQ _bm(_I2C0_0,REG_BASE_I2C0, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define I2C0_IRQ_EN _bm(_I2C0_0,REG_BASE_I2C0, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define I2C0_IRQ_CLR _bm(_I2C0_0,REG_BASE_I2C0, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define I2C0_CLK_DIV _bm(_I2C0_1,REG_BASE_I2C0, (1<<2),CLK_DIV) // 16 Bit, 16'h10, RW
#define I2C0_MST_COL _bm(_I2C0_2,REG_BASE_I2C0, (2<<2),MST_COL) // 1 Bit, 1'h0, R
#define I2C0_MST_ACK _bm(_I2C0_2,REG_BASE_I2C0, (2<<2),MST_ACK) // 1 Bit, 1'h0, R
#define I2C0_MST_REPEAT _bm(_I2C0_2,REG_BASE_I2C0, (2<<2),MST_REPEAT) // 1 Bit, 1'h0, RW
#define I2C0_MST_LAST _bm(_I2C0_2,REG_BASE_I2C0, (2<<2),MST_LAST) // 1 Bit, 1'h0, RW
#define I2C0_MST_RW _bm(_I2C0_2,REG_BASE_I2C0, (2<<2),MST_RW) // 1 Bit, 1'h0, RW
#define I2C0_MST_GO _bm(_I2C0_2,REG_BASE_I2C0, (2<<2),MST_GO) // 1 Bit, 1'h0, RW
#define I2C0_I2C_SDA _bm(_I2C0_3,REG_BASE_I2C0, (3<<2),I2C_SDA) // 1 Bit, 1'h0, R
#define I2C0_I2C_SCL _bm(_I2C0_3,REG_BASE_I2C0, (3<<2),I2C_SCL) // 1 Bit, 1'h0, R
#define I2C0_SLV_ACK_IN _bm(_I2C0_3,REG_BASE_I2C0, (3<<2),SLV_ACK_IN) // 1 Bit, 1'h0, R
#define I2C0_SLV_GO _bm(_I2C0_3,REG_BASE_I2C0, (3<<2),SLV_GO) // 1 Bit, 1'h0, RW
#define I2C0_SLV_RW _bm(_I2C0_3,REG_BASE_I2C0, (3<<2),SLV_RW) // 1 Bit, 1'h0, RW
#define I2C0_SLV_ACK_OUT _bm(_I2C0_3,REG_BASE_I2C0, (3<<2),SLV_ACK_OUT) // 1 Bit, 1'h0, RW
#define I2C0_SLV_ADR _bm(_I2C0_3,REG_BASE_I2C0, (3<<2),SLV_ADR) // 7 Bit, 1'h0, RW
#define I2C1_RX_DAT _bm(_I2C1_0,REG_BASE_I2C1, (0<<2),RX_DAT) // 8 Bit, 8'h0, R
#define I2C1_TX_DAT _bm(_I2C1_0,REG_BASE_I2C1, (0<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define I2C1_ACT _bm(_I2C1_0,REG_BASE_I2C1, (0<<2),ACT) // 1 Bit, 1'h0, R
#define I2C1_MODE _bm(_I2C1_0,REG_BASE_I2C1, (0<<2),MODE) // 1 Bit, 1'h0, RW
#define I2C1_BIT_MODE _bm(_I2C1_0,REG_BASE_I2C1, (0<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define I2C1_IRQ _bm(_I2C1_0,REG_BASE_I2C1, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define I2C1_IRQ_EN _bm(_I2C1_0,REG_BASE_I2C1, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define I2C1_IRQ_CLR _bm(_I2C1_0,REG_BASE_I2C1, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define I2C1_CLK_DIV _bm(_I2C1_1,REG_BASE_I2C1, (1<<2),CLK_DIV) // 16 Bit, 16'h10, RW
#define I2C1_MST_COL _bm(_I2C1_2,REG_BASE_I2C1, (2<<2),MST_COL) // 1 Bit, 1'h0, R
#define I2C1_MST_ACK _bm(_I2C1_2,REG_BASE_I2C1, (2<<2),MST_ACK) // 1 Bit, 1'h0, R
#define I2C1_MST_REPEAT _bm(_I2C1_2,REG_BASE_I2C1, (2<<2),MST_REPEAT) // 1 Bit, 1'h0, RW
#define I2C1_MST_LAST _bm(_I2C1_2,REG_BASE_I2C1, (2<<2),MST_LAST) // 1 Bit, 1'h0, RW
#define I2C1_MST_RW _bm(_I2C1_2,REG_BASE_I2C1, (2<<2),MST_RW) // 1 Bit, 1'h0, RW
#define I2C1_MST_GO _bm(_I2C1_2,REG_BASE_I2C1, (2<<2),MST_GO) // 1 Bit, 1'h0, RW
#define I2C1_I2C_SDA _bm(_I2C1_3,REG_BASE_I2C1, (3<<2),I2C_SDA) // 1 Bit, 1'h0, R
#define I2C1_I2C_SCL _bm(_I2C1_3,REG_BASE_I2C1, (3<<2),I2C_SCL) // 1 Bit, 1'h0, R
#define I2C1_SLV_ACK_IN _bm(_I2C1_3,REG_BASE_I2C1, (3<<2),SLV_ACK_IN) // 1 Bit, 1'h0, R
#define I2C1_SLV_GO _bm(_I2C1_3,REG_BASE_I2C1, (3<<2),SLV_GO) // 1 Bit, 1'h0, RW
#define I2C1_SLV_RW _bm(_I2C1_3,REG_BASE_I2C1, (3<<2),SLV_RW) // 1 Bit, 1'h0, RW
#define I2C1_SLV_ACK_OUT _bm(_I2C1_3,REG_BASE_I2C1, (3<<2),SLV_ACK_OUT) // 1 Bit, 1'h0, RW
#define I2C1_SLV_ADR _bm(_I2C1_3,REG_BASE_I2C1, (3<<2),SLV_ADR) // 7 Bit, 1'h0, RW
#define I2C2_RX_DAT _bm(_I2C2_0,REG_BASE_I2C2, (0<<2),RX_DAT) // 8 Bit, 8'h0, R
#define I2C2_TX_DAT _bm(_I2C2_0,REG_BASE_I2C2, (0<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define I2C2_ACT _bm(_I2C2_0,REG_BASE_I2C2, (0<<2),ACT) // 1 Bit, 1'h0, R
#define I2C2_MODE _bm(_I2C2_0,REG_BASE_I2C2, (0<<2),MODE) // 1 Bit, 1'h0, RW
#define I2C2_BIT_MODE _bm(_I2C2_0,REG_BASE_I2C2, (0<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define I2C2_IRQ _bm(_I2C2_0,REG_BASE_I2C2, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define I2C2_IRQ_EN _bm(_I2C2_0,REG_BASE_I2C2, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define I2C2_IRQ_CLR _bm(_I2C2_0,REG_BASE_I2C2, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define I2C2_CLK_DIV _bm(_I2C2_1,REG_BASE_I2C2, (1<<2),CLK_DIV) // 16 Bit, 16'h10, RW
#define I2C2_MST_COL _bm(_I2C2_2,REG_BASE_I2C2, (2<<2),MST_COL) // 1 Bit, 1'h0, R
#define I2C2_MST_ACK _bm(_I2C2_2,REG_BASE_I2C2, (2<<2),MST_ACK) // 1 Bit, 1'h0, R
#define I2C2_MST_REPEAT _bm(_I2C2_2,REG_BASE_I2C2, (2<<2),MST_REPEAT) // 1 Bit, 1'h0, RW
#define I2C2_MST_LAST _bm(_I2C2_2,REG_BASE_I2C2, (2<<2),MST_LAST) // 1 Bit, 1'h0, RW
#define I2C2_MST_RW _bm(_I2C2_2,REG_BASE_I2C2, (2<<2),MST_RW) // 1 Bit, 1'h0, RW
#define I2C2_MST_GO _bm(_I2C2_2,REG_BASE_I2C2, (2<<2),MST_GO) // 1 Bit, 1'h0, RW
#define I2C2_I2C_SDA _bm(_I2C2_3,REG_BASE_I2C2, (3<<2),I2C_SDA) // 1 Bit, 1'h0, R
#define I2C2_I2C_SCL _bm(_I2C2_3,REG_BASE_I2C2, (3<<2),I2C_SCL) // 1 Bit, 1'h0, R
#define I2C2_SLV_ACK_IN _bm(_I2C2_3,REG_BASE_I2C2, (3<<2),SLV_ACK_IN) // 1 Bit, 1'h0, R
#define I2C2_SLV_GO _bm(_I2C2_3,REG_BASE_I2C2, (3<<2),SLV_GO) // 1 Bit, 1'h0, RW
#define I2C2_SLV_RW _bm(_I2C2_3,REG_BASE_I2C2, (3<<2),SLV_RW) // 1 Bit, 1'h0, RW
#define I2C2_SLV_ACK_OUT _bm(_I2C2_3,REG_BASE_I2C2, (3<<2),SLV_ACK_OUT) // 1 Bit, 1'h0, RW
#define I2C2_SLV_ADR _bm(_I2C2_3,REG_BASE_I2C2, (3<<2),SLV_ADR) // 7 Bit, 1'h0, RW
#define I2C3_RX_DAT _bm(_I2C3_0,REG_BASE_I2C3, (0<<2),RX_DAT) // 8 Bit, 8'h0, R
#define I2C3_TX_DAT _bm(_I2C3_0,REG_BASE_I2C3, (0<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define I2C3_ACT _bm(_I2C3_0,REG_BASE_I2C3, (0<<2),ACT) // 1 Bit, 1'h0, R
#define I2C3_MODE _bm(_I2C3_0,REG_BASE_I2C3, (0<<2),MODE) // 1 Bit, 1'h0, RW
#define I2C3_BIT_MODE _bm(_I2C3_0,REG_BASE_I2C3, (0<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define I2C3_IRQ _bm(_I2C3_0,REG_BASE_I2C3, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define I2C3_IRQ_EN _bm(_I2C3_0,REG_BASE_I2C3, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define I2C3_IRQ_CLR _bm(_I2C3_0,REG_BASE_I2C3, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define I2C3_CLK_DIV _bm(_I2C3_1,REG_BASE_I2C3, (1<<2),CLK_DIV) // 16 Bit, 16'h10, RW
#define I2C3_MST_COL _bm(_I2C3_2,REG_BASE_I2C3, (2<<2),MST_COL) // 1 Bit, 1'h0, R
#define I2C3_MST_ACK _bm(_I2C3_2,REG_BASE_I2C3, (2<<2),MST_ACK) // 1 Bit, 1'h0, R
#define I2C3_MST_REPEAT _bm(_I2C3_2,REG_BASE_I2C3, (2<<2),MST_REPEAT) // 1 Bit, 1'h0, RW
#define I2C3_MST_LAST _bm(_I2C3_2,REG_BASE_I2C3, (2<<2),MST_LAST) // 1 Bit, 1'h0, RW
#define I2C3_MST_RW _bm(_I2C3_2,REG_BASE_I2C3, (2<<2),MST_RW) // 1 Bit, 1'h0, RW
#define I2C3_MST_GO _bm(_I2C3_2,REG_BASE_I2C3, (2<<2),MST_GO) // 1 Bit, 1'h0, RW
#define I2C3_I2C_SDA _bm(_I2C3_3,REG_BASE_I2C3, (3<<2),I2C_SDA) // 1 Bit, 1'h0, R
#define I2C3_I2C_SCL _bm(_I2C3_3,REG_BASE_I2C3, (3<<2),I2C_SCL) // 1 Bit, 1'h0, R
#define I2C3_SLV_ACK_IN _bm(_I2C3_3,REG_BASE_I2C3, (3<<2),SLV_ACK_IN) // 1 Bit, 1'h0, R
#define I2C3_SLV_GO _bm(_I2C3_3,REG_BASE_I2C3, (3<<2),SLV_GO) // 1 Bit, 1'h0, RW
#define I2C3_SLV_RW _bm(_I2C3_3,REG_BASE_I2C3, (3<<2),SLV_RW) // 1 Bit, 1'h0, RW
#define I2C3_SLV_ACK_OUT _bm(_I2C3_3,REG_BASE_I2C3, (3<<2),SLV_ACK_OUT) // 1 Bit, 1'h0, RW
#define I2C3_SLV_ADR _bm(_I2C3_3,REG_BASE_I2C3, (3<<2),SLV_ADR) // 7 Bit, 1'h0, RW
#define I2C4_RX_DAT _bm(_I2C4_0,REG_BASE_I2C4, (0<<2),RX_DAT) // 8 Bit, 8'h0, R
#define I2C4_TX_DAT _bm(_I2C4_0,REG_BASE_I2C4, (0<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define I2C4_ACT _bm(_I2C4_0,REG_BASE_I2C4, (0<<2),ACT) // 1 Bit, 1'h0, R
#define I2C4_MODE _bm(_I2C4_0,REG_BASE_I2C4, (0<<2),MODE) // 1 Bit, 1'h0, RW
#define I2C4_BIT_MODE _bm(_I2C4_0,REG_BASE_I2C4, (0<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define I2C4_IRQ _bm(_I2C4_0,REG_BASE_I2C4, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define I2C4_IRQ_EN _bm(_I2C4_0,REG_BASE_I2C4, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define I2C4_IRQ_CLR _bm(_I2C4_0,REG_BASE_I2C4, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define I2C4_CLK_DIV _bm(_I2C4_1,REG_BASE_I2C4, (1<<2),CLK_DIV) // 16 Bit, 16'h10, RW
#define I2C4_MST_COL _bm(_I2C4_2,REG_BASE_I2C4, (2<<2),MST_COL) // 1 Bit, 1'h0, R
#define I2C4_MST_ACK _bm(_I2C4_2,REG_BASE_I2C4, (2<<2),MST_ACK) // 1 Bit, 1'h0, R
#define I2C4_MST_REPEAT _bm(_I2C4_2,REG_BASE_I2C4, (2<<2),MST_REPEAT) // 1 Bit, 1'h0, RW
#define I2C4_MST_LAST _bm(_I2C4_2,REG_BASE_I2C4, (2<<2),MST_LAST) // 1 Bit, 1'h0, RW
#define I2C4_MST_RW _bm(_I2C4_2,REG_BASE_I2C4, (2<<2),MST_RW) // 1 Bit, 1'h0, RW
#define I2C4_MST_GO _bm(_I2C4_2,REG_BASE_I2C4, (2<<2),MST_GO) // 1 Bit, 1'h0, RW
#define I2C4_I2C_SDA _bm(_I2C4_3,REG_BASE_I2C4, (3<<2),I2C_SDA) // 1 Bit, 1'h0, R
#define I2C4_I2C_SCL _bm(_I2C4_3,REG_BASE_I2C4, (3<<2),I2C_SCL) // 1 Bit, 1'h0, R
#define I2C4_SLV_ACK_IN _bm(_I2C4_3,REG_BASE_I2C4, (3<<2),SLV_ACK_IN) // 1 Bit, 1'h0, R
#define I2C4_SLV_GO _bm(_I2C4_3,REG_BASE_I2C4, (3<<2),SLV_GO) // 1 Bit, 1'h0, RW
#define I2C4_SLV_RW _bm(_I2C4_3,REG_BASE_I2C4, (3<<2),SLV_RW) // 1 Bit, 1'h0, RW
#define I2C4_SLV_ACK_OUT _bm(_I2C4_3,REG_BASE_I2C4, (3<<2),SLV_ACK_OUT) // 1 Bit, 1'h0, RW
#define I2C4_SLV_ADR _bm(_I2C4_3,REG_BASE_I2C4, (3<<2),SLV_ADR) // 7 Bit, 1'h0, RW
#define I2C5_RX_DAT _bm(_I2C5_0,REG_BASE_I2C5, (0<<2),RX_DAT) // 8 Bit, 8'h0, R
#define I2C5_TX_DAT _bm(_I2C5_0,REG_BASE_I2C5, (0<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define I2C5_ACT _bm(_I2C5_0,REG_BASE_I2C5, (0<<2),ACT) // 1 Bit, 1'h0, R
#define I2C5_MODE _bm(_I2C5_0,REG_BASE_I2C5, (0<<2),MODE) // 1 Bit, 1'h0, RW
#define I2C5_BIT_MODE _bm(_I2C5_0,REG_BASE_I2C5, (0<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define I2C5_IRQ _bm(_I2C5_0,REG_BASE_I2C5, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define I2C5_IRQ_EN _bm(_I2C5_0,REG_BASE_I2C5, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define I2C5_IRQ_CLR _bm(_I2C5_0,REG_BASE_I2C5, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define I2C5_CLK_DIV _bm(_I2C5_1,REG_BASE_I2C5, (1<<2),CLK_DIV) // 16 Bit, 16'h10, RW
#define I2C5_MST_COL _bm(_I2C5_2,REG_BASE_I2C5, (2<<2),MST_COL) // 1 Bit, 1'h0, R
#define I2C5_MST_ACK _bm(_I2C5_2,REG_BASE_I2C5, (2<<2),MST_ACK) // 1 Bit, 1'h0, R
#define I2C5_MST_REPEAT _bm(_I2C5_2,REG_BASE_I2C5, (2<<2),MST_REPEAT) // 1 Bit, 1'h0, RW
#define I2C5_MST_LAST _bm(_I2C5_2,REG_BASE_I2C5, (2<<2),MST_LAST) // 1 Bit, 1'h0, RW
#define I2C5_MST_RW _bm(_I2C5_2,REG_BASE_I2C5, (2<<2),MST_RW) // 1 Bit, 1'h0, RW
#define I2C5_MST_GO _bm(_I2C5_2,REG_BASE_I2C5, (2<<2),MST_GO) // 1 Bit, 1'h0, RW
#define I2C5_I2C_SDA _bm(_I2C5_3,REG_BASE_I2C5, (3<<2),I2C_SDA) // 1 Bit, 1'h0, R
#define I2C5_I2C_SCL _bm(_I2C5_3,REG_BASE_I2C5, (3<<2),I2C_SCL) // 1 Bit, 1'h0, R
#define I2C5_SLV_ACK_IN _bm(_I2C5_3,REG_BASE_I2C5, (3<<2),SLV_ACK_IN) // 1 Bit, 1'h0, R
#define I2C5_SLV_GO _bm(_I2C5_3,REG_BASE_I2C5, (3<<2),SLV_GO) // 1 Bit, 1'h0, RW
#define I2C5_SLV_RW _bm(_I2C5_3,REG_BASE_I2C5, (3<<2),SLV_RW) // 1 Bit, 1'h0, RW
#define I2C5_SLV_ACK_OUT _bm(_I2C5_3,REG_BASE_I2C5, (3<<2),SLV_ACK_OUT) // 1 Bit, 1'h0, RW
#define I2C5_SLV_ADR _bm(_I2C5_3,REG_BASE_I2C5, (3<<2),SLV_ADR) // 7 Bit, 1'h0, RW
#define I2C6_RX_DAT _bm(_I2C6_0,REG_BASE_I2C6, (0<<2),RX_DAT) // 8 Bit, 8'h0, R
#define I2C6_TX_DAT _bm(_I2C6_0,REG_BASE_I2C6, (0<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define I2C6_ACT _bm(_I2C6_0,REG_BASE_I2C6, (0<<2),ACT) // 1 Bit, 1'h0, R
#define I2C6_MODE _bm(_I2C6_0,REG_BASE_I2C6, (0<<2),MODE) // 1 Bit, 1'h0, RW
#define I2C6_BIT_MODE _bm(_I2C6_0,REG_BASE_I2C6, (0<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define I2C6_IRQ _bm(_I2C6_0,REG_BASE_I2C6, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define I2C6_IRQ_EN _bm(_I2C6_0,REG_BASE_I2C6, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define I2C6_IRQ_CLR _bm(_I2C6_0,REG_BASE_I2C6, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define I2C6_CLK_DIV _bm(_I2C6_1,REG_BASE_I2C6, (1<<2),CLK_DIV) // 16 Bit, 16'h10, RW
#define I2C6_MST_COL _bm(_I2C6_2,REG_BASE_I2C6, (2<<2),MST_COL) // 1 Bit, 1'h0, R
#define I2C6_MST_ACK _bm(_I2C6_2,REG_BASE_I2C6, (2<<2),MST_ACK) // 1 Bit, 1'h0, R
#define I2C6_MST_REPEAT _bm(_I2C6_2,REG_BASE_I2C6, (2<<2),MST_REPEAT) // 1 Bit, 1'h0, RW
#define I2C6_MST_LAST _bm(_I2C6_2,REG_BASE_I2C6, (2<<2),MST_LAST) // 1 Bit, 1'h0, RW
#define I2C6_MST_RW _bm(_I2C6_2,REG_BASE_I2C6, (2<<2),MST_RW) // 1 Bit, 1'h0, RW
#define I2C6_MST_GO _bm(_I2C6_2,REG_BASE_I2C6, (2<<2),MST_GO) // 1 Bit, 1'h0, RW
#define I2C6_I2C_SDA _bm(_I2C6_3,REG_BASE_I2C6, (3<<2),I2C_SDA) // 1 Bit, 1'h0, R
#define I2C6_I2C_SCL _bm(_I2C6_3,REG_BASE_I2C6, (3<<2),I2C_SCL) // 1 Bit, 1'h0, R
#define I2C6_SLV_ACK_IN _bm(_I2C6_3,REG_BASE_I2C6, (3<<2),SLV_ACK_IN) // 1 Bit, 1'h0, R
#define I2C6_SLV_GO _bm(_I2C6_3,REG_BASE_I2C6, (3<<2),SLV_GO) // 1 Bit, 1'h0, RW
#define I2C6_SLV_RW _bm(_I2C6_3,REG_BASE_I2C6, (3<<2),SLV_RW) // 1 Bit, 1'h0, RW
#define I2C6_SLV_ACK_OUT _bm(_I2C6_3,REG_BASE_I2C6, (3<<2),SLV_ACK_OUT) // 1 Bit, 1'h0, RW
#define I2C6_SLV_ADR _bm(_I2C6_3,REG_BASE_I2C6, (3<<2),SLV_ADR) // 7 Bit, 1'h0, RW
#define I2C7_RX_DAT _bm(_I2C7_0,REG_BASE_I2C7, (0<<2),RX_DAT) // 8 Bit, 8'h0, R
#define I2C7_TX_DAT _bm(_I2C7_0,REG_BASE_I2C7, (0<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define I2C7_ACT _bm(_I2C7_0,REG_BASE_I2C7, (0<<2),ACT) // 1 Bit, 1'h0, R
#define I2C7_MODE _bm(_I2C7_0,REG_BASE_I2C7, (0<<2),MODE) // 1 Bit, 1'h0, RW
#define I2C7_BIT_MODE _bm(_I2C7_0,REG_BASE_I2C7, (0<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define I2C7_IRQ _bm(_I2C7_0,REG_BASE_I2C7, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define I2C7_IRQ_EN _bm(_I2C7_0,REG_BASE_I2C7, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define I2C7_IRQ_CLR _bm(_I2C7_0,REG_BASE_I2C7, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define I2C7_CLK_DIV _bm(_I2C7_1,REG_BASE_I2C7, (1<<2),CLK_DIV) // 16 Bit, 16'h10, RW
#define I2C7_MST_COL _bm(_I2C7_2,REG_BASE_I2C7, (2<<2),MST_COL) // 1 Bit, 1'h0, R
#define I2C7_MST_ACK _bm(_I2C7_2,REG_BASE_I2C7, (2<<2),MST_ACK) // 1 Bit, 1'h0, R
#define I2C7_MST_REPEAT _bm(_I2C7_2,REG_BASE_I2C7, (2<<2),MST_REPEAT) // 1 Bit, 1'h0, RW
#define I2C7_MST_LAST _bm(_I2C7_2,REG_BASE_I2C7, (2<<2),MST_LAST) // 1 Bit, 1'h0, RW
#define I2C7_MST_RW _bm(_I2C7_2,REG_BASE_I2C7, (2<<2),MST_RW) // 1 Bit, 1'h0, RW
#define I2C7_MST_GO _bm(_I2C7_2,REG_BASE_I2C7, (2<<2),MST_GO) // 1 Bit, 1'h0, RW
#define I2C7_I2C_SDA _bm(_I2C7_3,REG_BASE_I2C7, (3<<2),I2C_SDA) // 1 Bit, 1'h0, R
#define I2C7_I2C_SCL _bm(_I2C7_3,REG_BASE_I2C7, (3<<2),I2C_SCL) // 1 Bit, 1'h0, R
#define I2C7_SLV_ACK_IN _bm(_I2C7_3,REG_BASE_I2C7, (3<<2),SLV_ACK_IN) // 1 Bit, 1'h0, R
#define I2C7_SLV_GO _bm(_I2C7_3,REG_BASE_I2C7, (3<<2),SLV_GO) // 1 Bit, 1'h0, RW
#define I2C7_SLV_RW _bm(_I2C7_3,REG_BASE_I2C7, (3<<2),SLV_RW) // 1 Bit, 1'h0, RW
#define I2C7_SLV_ACK_OUT _bm(_I2C7_3,REG_BASE_I2C7, (3<<2),SLV_ACK_OUT) // 1 Bit, 1'h0, RW
#define I2C7_SLV_ADR _bm(_I2C7_3,REG_BASE_I2C7, (3<<2),SLV_ADR) // 7 Bit, 1'h0, RW
#define I2C8_RX_DAT _bm(_I2C8_0,REG_BASE_I2C8, (0<<2),RX_DAT) // 8 Bit, 8'h0, R
#define I2C8_TX_DAT _bm(_I2C8_0,REG_BASE_I2C8, (0<<2),TX_DAT) // 8 Bit, 8'h0, RW
#define I2C8_ACT _bm(_I2C8_0,REG_BASE_I2C8, (0<<2),ACT) // 1 Bit, 1'h0, R
#define I2C8_MODE _bm(_I2C8_0,REG_BASE_I2C8, (0<<2),MODE) // 1 Bit, 1'h0, RW
#define I2C8_BIT_MODE _bm(_I2C8_0,REG_BASE_I2C8, (0<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define I2C8_IRQ _bm(_I2C8_0,REG_BASE_I2C8, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define I2C8_IRQ_EN _bm(_I2C8_0,REG_BASE_I2C8, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define I2C8_IRQ_CLR _bm(_I2C8_0,REG_BASE_I2C8, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define I2C8_CLK_DIV _bm(_I2C8_1,REG_BASE_I2C8, (1<<2),CLK_DIV) // 16 Bit, 16'h10, RW
#define I2C8_MST_COL _bm(_I2C8_2,REG_BASE_I2C8, (2<<2),MST_COL) // 1 Bit, 1'h0, R
#define I2C8_MST_ACK _bm(_I2C8_2,REG_BASE_I2C8, (2<<2),MST_ACK) // 1 Bit, 1'h0, R
#define I2C8_MST_REPEAT _bm(_I2C8_2,REG_BASE_I2C8, (2<<2),MST_REPEAT) // 1 Bit, 1'h0, RW
#define I2C8_MST_LAST _bm(_I2C8_2,REG_BASE_I2C8, (2<<2),MST_LAST) // 1 Bit, 1'h0, RW
#define I2C8_MST_RW _bm(_I2C8_2,REG_BASE_I2C8, (2<<2),MST_RW) // 1 Bit, 1'h0, RW
#define I2C8_MST_GO _bm(_I2C8_2,REG_BASE_I2C8, (2<<2),MST_GO) // 1 Bit, 1'h0, RW
#define I2C8_I2C_SDA _bm(_I2C8_3,REG_BASE_I2C8, (3<<2),I2C_SDA) // 1 Bit, 1'h0, R
#define I2C8_I2C_SCL _bm(_I2C8_3,REG_BASE_I2C8, (3<<2),I2C_SCL) // 1 Bit, 1'h0, R
#define I2C8_SLV_ACK_IN _bm(_I2C8_3,REG_BASE_I2C8, (3<<2),SLV_ACK_IN) // 1 Bit, 1'h0, R
#define I2C8_SLV_GO _bm(_I2C8_3,REG_BASE_I2C8, (3<<2),SLV_GO) // 1 Bit, 1'h0, RW
#define I2C8_SLV_RW _bm(_I2C8_3,REG_BASE_I2C8, (3<<2),SLV_RW) // 1 Bit, 1'h0, RW
#define I2C8_SLV_ACK_OUT _bm(_I2C8_3,REG_BASE_I2C8, (3<<2),SLV_ACK_OUT) // 1 Bit, 1'h0, RW
#define I2C8_SLV_ADR _bm(_I2C8_3,REG_BASE_I2C8, (3<<2),SLV_ADR) // 7 Bit, 1'h0, RW
#define DMA0_JOB_PTR _bm(_DMA0_0,REG_BASE_DMA0, (0<<2),JOB_PTR) // 8 Bit, 0, RW
#define DMA0_DONE_PTR _bm(_DMA0_0,REG_BASE_DMA0, (0<<2),DONE_PTR) // 6 Bit, 0, R
#define DMA0_IRQ _bm(_DMA0_0,REG_BASE_DMA0, (0<<2),IRQ) // 1 Bit, 0, R
#define DMA0_IRQ_EN _bm(_DMA0_0,REG_BASE_DMA0, (0<<2),IRQ_EN) // 1 Bit, 0, RW
#define DMA0_IRQ_CLR _bm(_DMA0_0,REG_BASE_DMA0, (0<<2),IRQ_CLR) // 1 Bit, 0, W
#define DMA0_VALUE _bm(_DMA0_0,REG_BASE_DMA0, (0<<2),VALUE) // 8 Bit, 0, RW
#define DMA0_MODE _bm(_DMA0_0,REG_BASE_DMA0, (0<<2),MODE) // 2 Bit, 0, RW
#define DMA0_GO _bm(_DMA0_0,REG_BASE_DMA0, (0<<2),GO) // 1 Bit, 0, RW
#define DMA0_SRC _bm(_DMA0_1,REG_BASE_DMA0, (1<<2),SRC) // 32 Bit, 0, RW
#define DMA0_DST _bm(_DMA0_2,REG_BASE_DMA0, (2<<2),DST) // 32 Bit, 0, RW
#define DMA0_LEN _bm(_DMA0_3,REG_BASE_DMA0, (3<<2),LEN) // 32 Bit, 0, RW
#define DMA1_JOB_PTR _bm(_DMA1_4,REG_BASE_DMA1, (4<<2),JOB_PTR) // 8 Bit, 0, RW
#define DMA1_DONE_PTR _bm(_DMA1_4,REG_BASE_DMA1, (4<<2),DONE_PTR) // 6 Bit, 0, R
#define DMA1_IRQ _bm(_DMA1_4,REG_BASE_DMA1, (4<<2),IRQ) // 1 Bit, 0, R
#define DMA1_IRQ_EN _bm(_DMA1_4,REG_BASE_DMA1, (4<<2),IRQ_EN) // 1 Bit, 0, RW
#define DMA1_IRQ_CLR _bm(_DMA1_4,REG_BASE_DMA1, (4<<2),IRQ_CLR) // 1 Bit, 0, W
#define DMA1_VALUE _bm(_DMA1_4,REG_BASE_DMA1, (4<<2),VALUE) // 8 Bit, 0, RW
#define DMA1_MODE _bm(_DMA1_4,REG_BASE_DMA1, (4<<2),MODE) // 2 Bit, 0, RW
#define DMA1_GO _bm(_DMA1_4,REG_BASE_DMA1, (4<<2),GO) // 1 Bit, 0, RW
#define DMA1_SRC _bm(_DMA1_5,REG_BASE_DMA1, (5<<2),SRC) // 32 Bit, 0, RW
#define DMA1_DST _bm(_DMA1_6,REG_BASE_DMA1, (6<<2),DST) // 32 Bit, 0, RW
#define DMA1_LEN _bm(_DMA1_7,REG_BASE_DMA1, (7<<2),LEN) // 32 Bit, 0, RW
#define CHKSUM_IRQ _bm(_CHKSUM_0,REG_BASE_CHKSUM, (0<<2),IRQ) // 1 Bit, 0, R
#define CHKSUM_IRQ_EN _bm(_CHKSUM_0,REG_BASE_CHKSUM, (0<<2),IRQ_EN) // 1 Bit, 0, RW
#define CHKSUM_IRQ_CLR _bm(_CHKSUM_0,REG_BASE_CHKSUM, (0<<2),IRQ_CLR) // 1 Bit, 0, W
#define CHKSUM_GO _bm(_CHKSUM_0,REG_BASE_CHKSUM, (0<<2),GO) // 1 Bit, 0, RW
#define CHKSUM_ADR _bm(_CHKSUM_1,REG_BASE_CHKSUM, (1<<2),ADR) // 32 Bit, 0, RW
#define CHKSUM_LEN _bm(_CHKSUM_2,REG_BASE_CHKSUM, (2<<2),LEN) // 32 Bit, 0, RW
#define CHKSUM_DAT _bm(_CHKSUM_3,REG_BASE_CHKSUM, (3<<2),DAT) // 16 Bit, 0, R
#define I2S_IRQ _bm(_I2S_0,REG_BASE_I2S, (0<<2),IRQ) // 1 Bit, 0, R
#define I2S_IRQ_EN _bm(_I2S_0,REG_BASE_I2S, (0<<2),IRQ_EN) // 1 Bit, 0, RW
#define I2S_IRQ_CLR _bm(_I2S_0,REG_BASE_I2S, (0<<2),IRQ_CLR) // 1 Bit, 0, W
#define I2S_BYTE _bm(_I2S_0,REG_BASE_I2S, (0<<2),BYTE) // 2 Bit, 0, RW
#define I2S_TXBYTE _bm(_I2S_0,REG_BASE_I2S, (0<<2),TXBYTE) // 2 Bit, 0, RW
#define I2S_RXBYTE _bm(_I2S_0,REG_BASE_I2S, (0<<2),RXBYTE) // 2 Bit, 0, RW
#define I2S_TXDW _bm(_I2S_0,REG_BASE_I2S, (0<<2),TXDW) // 2 Bit, 0, RW
#define I2S_RXDW _bm(_I2S_0,REG_BASE_I2S, (0<<2),RXDW) // 2 Bit, 0, RW
#define i2S_TXCODEC _bm(_i2S_0,REG_BASE_i2S, (0<<2),TXCODEC) // 2 Bit, 0, RW
#define I2S_RXCODEC _bm(_I2S_0,REG_BASE_I2S, (0<<2),RXCODEC) // 2 Bit, 0, RW
#define I2S_TXMODE _bm(_I2S_0,REG_BASE_I2S, (0<<2),TXMODE) // 2 Bit, 0, RW
#define I2S_RXMODE _bm(_I2S_0,REG_BASE_I2S, (0<<2),RXMODE) // 2 Bit, 0, RW
#define I2S_TXEN _bm(_I2S_0,REG_BASE_I2S, (0<<2),TXEN) // 1 Bit, 0, RW
#define I2S_RXEN _bm(_I2S_0,REG_BASE_I2S, (0<<2),RXEN) // 1 Bit, 0, RW
#define I2S_MODE _bm(_I2S_0,REG_BASE_I2S, (0<<2),MODE) // 1 Bit, 0, RW
#define I2S_ADRW _bm(_I2S_1,REG_BASE_I2S, (1<<2),ADRW) // 32 Bit, 0, RW
#define I2S_ADRR _bm(_I2S_2,REG_BASE_I2S, (2<<2),ADRR) // 32 Bit, 0, RW
#define I2S_SCKCNT _bm(_I2S_3,REG_BASE_I2S, (3<<2),SCKCNT) // 16 Bit, 0, RW
#define TIMER0_EN _bm(_TIMER0_0,REG_BASE_TIMER0, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER0_PWM_EN _bm(_TIMER0_0,REG_BASE_TIMER0, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER0_CK_EN _bm(_TIMER0_0,REG_BASE_TIMER0, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER0_IRQ_EN _bm(_TIMER0_0,REG_BASE_TIMER0, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER0_CNT_CLR _bm(_TIMER0_0,REG_BASE_TIMER0, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER0_IRQ_CLR _bm(_TIMER0_0,REG_BASE_TIMER0, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER0_IRQ _bm(_TIMER0_0,REG_BASE_TIMER0, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER0_DIV _bm(_TIMER0_0,REG_BASE_TIMER0, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER0_LMT _bm(_TIMER0_0,REG_BASE_TIMER0, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER0_TRIG _bm(_TIMER0_1,REG_BASE_TIMER0, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER0_CNT _bm(_TIMER0_1,REG_BASE_TIMER0, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER1_EN _bm(_TIMER1_0,REG_BASE_TIMER1, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER1_PWM_EN _bm(_TIMER1_0,REG_BASE_TIMER1, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER1_CK_EN _bm(_TIMER1_0,REG_BASE_TIMER1, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER1_IRQ_EN _bm(_TIMER1_0,REG_BASE_TIMER1, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER1_CNT_CLR _bm(_TIMER1_0,REG_BASE_TIMER1, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER1_IRQ_CLR _bm(_TIMER1_0,REG_BASE_TIMER1, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER1_IRQ _bm(_TIMER1_0,REG_BASE_TIMER1, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER1_DIV _bm(_TIMER1_0,REG_BASE_TIMER1, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER1_LMT _bm(_TIMER1_0,REG_BASE_TIMER1, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER1_TRIG _bm(_TIMER1_1,REG_BASE_TIMER1, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER1_CNT _bm(_TIMER1_1,REG_BASE_TIMER1, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER2_EN _bm(_TIMER2_0,REG_BASE_TIMER2, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER2_PWM_EN _bm(_TIMER2_0,REG_BASE_TIMER2, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER2_CK_EN _bm(_TIMER2_0,REG_BASE_TIMER2, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER2_IRQ_EN _bm(_TIMER2_0,REG_BASE_TIMER2, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER2_CNT_CLR _bm(_TIMER2_0,REG_BASE_TIMER2, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER2_IRQ_CLR _bm(_TIMER2_0,REG_BASE_TIMER2, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER2_IRQ _bm(_TIMER2_0,REG_BASE_TIMER2, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER2_DIV _bm(_TIMER2_0,REG_BASE_TIMER2, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER2_LMT _bm(_TIMER2_0,REG_BASE_TIMER2, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER2_TRIG _bm(_TIMER2_1,REG_BASE_TIMER2, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER2_CNT _bm(_TIMER2_1,REG_BASE_TIMER2, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER3_EN _bm(_TIMER3_0,REG_BASE_TIMER3, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER3_PWM_EN _bm(_TIMER3_0,REG_BASE_TIMER3, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER3_CK_EN _bm(_TIMER3_0,REG_BASE_TIMER3, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER3_IRQ_EN _bm(_TIMER3_0,REG_BASE_TIMER3, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER3_CNT_CLR _bm(_TIMER3_0,REG_BASE_TIMER3, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER3_IRQ_CLR _bm(_TIMER3_0,REG_BASE_TIMER3, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER3_IRQ _bm(_TIMER3_0,REG_BASE_TIMER3, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER3_DIV _bm(_TIMER3_0,REG_BASE_TIMER3, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER3_LMT _bm(_TIMER3_0,REG_BASE_TIMER3, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER3_TRIG _bm(_TIMER3_1,REG_BASE_TIMER3, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER3_CNT _bm(_TIMER3_1,REG_BASE_TIMER3, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER4_EN _bm(_TIMER4_0,REG_BASE_TIMER4, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER4_PWM_EN _bm(_TIMER4_0,REG_BASE_TIMER4, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER4_CK_EN _bm(_TIMER4_0,REG_BASE_TIMER4, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER4_IRQ_EN _bm(_TIMER4_0,REG_BASE_TIMER4, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER4_CNT_CLR _bm(_TIMER4_0,REG_BASE_TIMER4, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER4_IRQ_CLR _bm(_TIMER4_0,REG_BASE_TIMER4, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER4_IRQ _bm(_TIMER4_0,REG_BASE_TIMER4, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER4_DIV _bm(_TIMER4_0,REG_BASE_TIMER4, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER4_LMT _bm(_TIMER4_0,REG_BASE_TIMER4, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER4_TRIG _bm(_TIMER4_1,REG_BASE_TIMER4, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER4_CNT _bm(_TIMER4_1,REG_BASE_TIMER4, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER5_EN _bm(_TIMER5_0,REG_BASE_TIMER5, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER5_PWM_EN _bm(_TIMER5_0,REG_BASE_TIMER5, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER5_CK_EN _bm(_TIMER5_0,REG_BASE_TIMER5, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER5_IRQ_EN _bm(_TIMER5_0,REG_BASE_TIMER5, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER5_CNT_CLR _bm(_TIMER5_0,REG_BASE_TIMER5, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER5_IRQ_CLR _bm(_TIMER5_0,REG_BASE_TIMER5, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER5_IRQ _bm(_TIMER5_0,REG_BASE_TIMER5, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER5_DIV _bm(_TIMER5_0,REG_BASE_TIMER5, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER5_LMT _bm(_TIMER5_0,REG_BASE_TIMER5, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER5_TRIG _bm(_TIMER5_1,REG_BASE_TIMER5, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER5_CNT _bm(_TIMER5_1,REG_BASE_TIMER5, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER6_EN _bm(_TIMER6_0,REG_BASE_TIMER6, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER6_PWM_EN _bm(_TIMER6_0,REG_BASE_TIMER6, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER6_CK_EN _bm(_TIMER6_0,REG_BASE_TIMER6, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER6_IRQ_EN _bm(_TIMER6_0,REG_BASE_TIMER6, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER6_CNT_CLR _bm(_TIMER6_0,REG_BASE_TIMER6, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER6_IRQ_CLR _bm(_TIMER6_0,REG_BASE_TIMER6, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER6_IRQ _bm(_TIMER6_0,REG_BASE_TIMER6, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER6_DIV _bm(_TIMER6_0,REG_BASE_TIMER6, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER6_LMT _bm(_TIMER6_0,REG_BASE_TIMER6, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER6_TRIG _bm(_TIMER6_1,REG_BASE_TIMER6, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER6_CNT _bm(_TIMER6_1,REG_BASE_TIMER6, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER7_EN _bm(_TIMER7_0,REG_BASE_TIMER7, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER7_PWM_EN _bm(_TIMER7_0,REG_BASE_TIMER7, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER7_CK_EN _bm(_TIMER7_0,REG_BASE_TIMER7, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER7_IRQ_EN _bm(_TIMER7_0,REG_BASE_TIMER7, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER7_CNT_CLR _bm(_TIMER7_0,REG_BASE_TIMER7, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER7_IRQ_CLR _bm(_TIMER7_0,REG_BASE_TIMER7, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER7_IRQ _bm(_TIMER7_0,REG_BASE_TIMER7, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER7_DIV _bm(_TIMER7_0,REG_BASE_TIMER7, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER7_LMT _bm(_TIMER7_0,REG_BASE_TIMER7, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER7_TRIG _bm(_TIMER7_1,REG_BASE_TIMER7, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER7_CNT _bm(_TIMER7_1,REG_BASE_TIMER7, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER8_EN _bm(_TIMER8_0,REG_BASE_TIMER8, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER8_PWM_EN _bm(_TIMER8_0,REG_BASE_TIMER8, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER8_CK_EN _bm(_TIMER8_0,REG_BASE_TIMER8, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER8_IRQ_EN _bm(_TIMER8_0,REG_BASE_TIMER8, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER8_CNT_CLR _bm(_TIMER8_0,REG_BASE_TIMER8, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER8_IRQ_CLR _bm(_TIMER8_0,REG_BASE_TIMER8, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER8_IRQ _bm(_TIMER8_0,REG_BASE_TIMER8, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER8_DIV _bm(_TIMER8_0,REG_BASE_TIMER8, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER8_LMT _bm(_TIMER8_0,REG_BASE_TIMER8, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER8_TRIG _bm(_TIMER8_1,REG_BASE_TIMER8, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER8_CNT _bm(_TIMER8_1,REG_BASE_TIMER8, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER9_EN _bm(_TIMER9_0,REG_BASE_TIMER9, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER9_PWM_EN _bm(_TIMER9_0,REG_BASE_TIMER9, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER9_CK_EN _bm(_TIMER9_0,REG_BASE_TIMER9, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER9_IRQ_EN _bm(_TIMER9_0,REG_BASE_TIMER9, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER9_CNT_CLR _bm(_TIMER9_0,REG_BASE_TIMER9, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER9_IRQ_CLR _bm(_TIMER9_0,REG_BASE_TIMER9, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER9_IRQ _bm(_TIMER9_0,REG_BASE_TIMER9, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER9_DIV _bm(_TIMER9_0,REG_BASE_TIMER9, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER9_LMT _bm(_TIMER9_0,REG_BASE_TIMER9, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER9_TRIG _bm(_TIMER9_1,REG_BASE_TIMER9, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER9_CNT _bm(_TIMER9_1,REG_BASE_TIMER9, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER10_EN _bm(_TIMER10_0,REG_BASE_TIMER10, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER10_PWM_EN _bm(_TIMER10_0,REG_BASE_TIMER10, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER10_CK_EN _bm(_TIMER10_0,REG_BASE_TIMER10, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER10_IRQ_EN _bm(_TIMER10_0,REG_BASE_TIMER10, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER10_CNT_CLR _bm(_TIMER10_0,REG_BASE_TIMER10, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER10_IRQ_CLR _bm(_TIMER10_0,REG_BASE_TIMER10, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER10_IRQ _bm(_TIMER10_0,REG_BASE_TIMER10, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER10_DIV _bm(_TIMER10_0,REG_BASE_TIMER10, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER10_LMT _bm(_TIMER10_0,REG_BASE_TIMER10, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER10_TRIG _bm(_TIMER10_1,REG_BASE_TIMER10, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER10_CNT _bm(_TIMER10_1,REG_BASE_TIMER10, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER11_EN _bm(_TIMER11_0,REG_BASE_TIMER11, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER11_PWM_EN _bm(_TIMER11_0,REG_BASE_TIMER11, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER11_CK_EN _bm(_TIMER11_0,REG_BASE_TIMER11, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER11_IRQ_EN _bm(_TIMER11_0,REG_BASE_TIMER11, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER11_CNT_CLR _bm(_TIMER11_0,REG_BASE_TIMER11, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER11_IRQ_CLR _bm(_TIMER11_0,REG_BASE_TIMER11, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER11_IRQ _bm(_TIMER11_0,REG_BASE_TIMER11, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER11_DIV _bm(_TIMER11_0,REG_BASE_TIMER11, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER11_LMT _bm(_TIMER11_0,REG_BASE_TIMER11, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER11_TRIG _bm(_TIMER11_1,REG_BASE_TIMER11, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER11_CNT _bm(_TIMER11_1,REG_BASE_TIMER11, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER12_EN _bm(_TIMER12_0,REG_BASE_TIMER12, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER12_PWM_EN _bm(_TIMER12_0,REG_BASE_TIMER12, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER12_CK_EN _bm(_TIMER12_0,REG_BASE_TIMER12, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER12_IRQ_EN _bm(_TIMER12_0,REG_BASE_TIMER12, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER12_CNT_CLR _bm(_TIMER12_0,REG_BASE_TIMER12, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER12_IRQ_CLR _bm(_TIMER12_0,REG_BASE_TIMER12, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER12_IRQ _bm(_TIMER12_0,REG_BASE_TIMER12, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER12_DIV _bm(_TIMER12_0,REG_BASE_TIMER12, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER12_LMT _bm(_TIMER12_0,REG_BASE_TIMER12, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER12_TRIG _bm(_TIMER12_1,REG_BASE_TIMER12, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER12_CNT _bm(_TIMER12_1,REG_BASE_TIMER12, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER13_EN _bm(_TIMER13_0,REG_BASE_TIMER13, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER13_PWM_EN _bm(_TIMER13_0,REG_BASE_TIMER13, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER13_CK_EN _bm(_TIMER13_0,REG_BASE_TIMER13, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER13_IRQ_EN _bm(_TIMER13_0,REG_BASE_TIMER13, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER13_CNT_CLR _bm(_TIMER13_0,REG_BASE_TIMER13, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER13_IRQ_CLR _bm(_TIMER13_0,REG_BASE_TIMER13, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER13_IRQ _bm(_TIMER13_0,REG_BASE_TIMER13, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER13_DIV _bm(_TIMER13_0,REG_BASE_TIMER13, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER13_LMT _bm(_TIMER13_0,REG_BASE_TIMER13, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER13_TRIG _bm(_TIMER13_1,REG_BASE_TIMER13, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER13_CNT _bm(_TIMER13_1,REG_BASE_TIMER13, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER14_EN _bm(_TIMER14_0,REG_BASE_TIMER14, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER14_PWM_EN _bm(_TIMER14_0,REG_BASE_TIMER14, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER14_CK_EN _bm(_TIMER14_0,REG_BASE_TIMER14, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER14_IRQ_EN _bm(_TIMER14_0,REG_BASE_TIMER14, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER14_CNT_CLR _bm(_TIMER14_0,REG_BASE_TIMER14, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER14_IRQ_CLR _bm(_TIMER14_0,REG_BASE_TIMER14, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER14_IRQ _bm(_TIMER14_0,REG_BASE_TIMER14, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER14_DIV _bm(_TIMER14_0,REG_BASE_TIMER14, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER14_LMT _bm(_TIMER14_0,REG_BASE_TIMER14, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER14_TRIG _bm(_TIMER14_1,REG_BASE_TIMER14, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER14_CNT _bm(_TIMER14_1,REG_BASE_TIMER14, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER15_EN _bm(_TIMER15_0,REG_BASE_TIMER15, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER15_PWM_EN _bm(_TIMER15_0,REG_BASE_TIMER15, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER15_CK_EN _bm(_TIMER15_0,REG_BASE_TIMER15, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER15_IRQ_EN _bm(_TIMER15_0,REG_BASE_TIMER15, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER15_CNT_CLR _bm(_TIMER15_0,REG_BASE_TIMER15, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER15_IRQ_CLR _bm(_TIMER15_0,REG_BASE_TIMER15, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER15_IRQ _bm(_TIMER15_0,REG_BASE_TIMER15, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER15_DIV _bm(_TIMER15_0,REG_BASE_TIMER15, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER15_LMT _bm(_TIMER15_0,REG_BASE_TIMER15, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER15_TRIG _bm(_TIMER15_1,REG_BASE_TIMER15, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER15_CNT _bm(_TIMER15_1,REG_BASE_TIMER15, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER16_EN _bm(_TIMER16_0,REG_BASE_TIMER16, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER16_PWM_EN _bm(_TIMER16_0,REG_BASE_TIMER16, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER16_CK_EN _bm(_TIMER16_0,REG_BASE_TIMER16, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER16_IRQ_EN _bm(_TIMER16_0,REG_BASE_TIMER16, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER16_CNT_CLR _bm(_TIMER16_0,REG_BASE_TIMER16, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER16_IRQ_CLR _bm(_TIMER16_0,REG_BASE_TIMER16, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER16_IRQ _bm(_TIMER16_0,REG_BASE_TIMER16, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER16_DIV _bm(_TIMER16_0,REG_BASE_TIMER16, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER16_LMT _bm(_TIMER16_0,REG_BASE_TIMER16, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER16_TRIG _bm(_TIMER16_1,REG_BASE_TIMER16, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER16_CNT _bm(_TIMER16_1,REG_BASE_TIMER16, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER17_EN _bm(_TIMER17_0,REG_BASE_TIMER17, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER17_PWM_EN _bm(_TIMER17_0,REG_BASE_TIMER17, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER17_CK_EN _bm(_TIMER17_0,REG_BASE_TIMER17, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER17_IRQ_EN _bm(_TIMER17_0,REG_BASE_TIMER17, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER17_CNT_CLR _bm(_TIMER17_0,REG_BASE_TIMER17, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER17_IRQ_CLR _bm(_TIMER17_0,REG_BASE_TIMER17, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER17_IRQ _bm(_TIMER17_0,REG_BASE_TIMER17, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER17_DIV _bm(_TIMER17_0,REG_BASE_TIMER17, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER17_LMT _bm(_TIMER17_0,REG_BASE_TIMER17, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER17_TRIG _bm(_TIMER17_1,REG_BASE_TIMER17, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER17_CNT _bm(_TIMER17_1,REG_BASE_TIMER17, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER18_EN _bm(_TIMER18_0,REG_BASE_TIMER18, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER18_PWM_EN _bm(_TIMER18_0,REG_BASE_TIMER18, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER18_CK_EN _bm(_TIMER18_0,REG_BASE_TIMER18, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER18_IRQ_EN _bm(_TIMER18_0,REG_BASE_TIMER18, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER18_CNT_CLR _bm(_TIMER18_0,REG_BASE_TIMER18, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER18_IRQ_CLR _bm(_TIMER18_0,REG_BASE_TIMER18, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER18_IRQ _bm(_TIMER18_0,REG_BASE_TIMER18, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER18_DIV _bm(_TIMER18_0,REG_BASE_TIMER18, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER18_LMT _bm(_TIMER18_0,REG_BASE_TIMER18, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER18_TRIG _bm(_TIMER18_1,REG_BASE_TIMER18, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER18_CNT _bm(_TIMER18_1,REG_BASE_TIMER18, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER19_EN _bm(_TIMER19_0,REG_BASE_TIMER19, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER19_PWM_EN _bm(_TIMER19_0,REG_BASE_TIMER19, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER19_CK_EN _bm(_TIMER19_0,REG_BASE_TIMER19, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER19_IRQ_EN _bm(_TIMER19_0,REG_BASE_TIMER19, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER19_CNT_CLR _bm(_TIMER19_0,REG_BASE_TIMER19, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER19_IRQ_CLR _bm(_TIMER19_0,REG_BASE_TIMER19, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER19_IRQ _bm(_TIMER19_0,REG_BASE_TIMER19, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER19_DIV _bm(_TIMER19_0,REG_BASE_TIMER19, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER19_LMT _bm(_TIMER19_0,REG_BASE_TIMER19, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER19_TRIG _bm(_TIMER19_1,REG_BASE_TIMER19, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER19_CNT _bm(_TIMER19_1,REG_BASE_TIMER19, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER20_EN _bm(_TIMER20_0,REG_BASE_TIMER20, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER20_PWM_EN _bm(_TIMER20_0,REG_BASE_TIMER20, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER20_CK_EN _bm(_TIMER20_0,REG_BASE_TIMER20, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER20_IRQ_EN _bm(_TIMER20_0,REG_BASE_TIMER20, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER20_CNT_CLR _bm(_TIMER20_0,REG_BASE_TIMER20, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER20_IRQ_CLR _bm(_TIMER20_0,REG_BASE_TIMER20, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER20_IRQ _bm(_TIMER20_0,REG_BASE_TIMER20, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER20_DIV _bm(_TIMER20_0,REG_BASE_TIMER20, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER20_LMT _bm(_TIMER20_0,REG_BASE_TIMER20, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER20_TRIG _bm(_TIMER20_1,REG_BASE_TIMER20, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER20_CNT _bm(_TIMER20_1,REG_BASE_TIMER20, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER21_EN _bm(_TIMER21_0,REG_BASE_TIMER21, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER21_PWM_EN _bm(_TIMER21_0,REG_BASE_TIMER21, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER21_CK_EN _bm(_TIMER21_0,REG_BASE_TIMER21, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER21_IRQ_EN _bm(_TIMER21_0,REG_BASE_TIMER21, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER21_CNT_CLR _bm(_TIMER21_0,REG_BASE_TIMER21, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER21_IRQ_CLR _bm(_TIMER21_0,REG_BASE_TIMER21, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER21_IRQ _bm(_TIMER21_0,REG_BASE_TIMER21, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER21_DIV _bm(_TIMER21_0,REG_BASE_TIMER21, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER21_LMT _bm(_TIMER21_0,REG_BASE_TIMER21, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER21_TRIG _bm(_TIMER21_1,REG_BASE_TIMER21, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER21_CNT _bm(_TIMER21_1,REG_BASE_TIMER21, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER22_EN _bm(_TIMER22_0,REG_BASE_TIMER22, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER22_PWM_EN _bm(_TIMER22_0,REG_BASE_TIMER22, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER22_CK_EN _bm(_TIMER22_0,REG_BASE_TIMER22, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER22_IRQ_EN _bm(_TIMER22_0,REG_BASE_TIMER22, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER22_CNT_CLR _bm(_TIMER22_0,REG_BASE_TIMER22, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER22_IRQ_CLR _bm(_TIMER22_0,REG_BASE_TIMER22, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER22_IRQ _bm(_TIMER22_0,REG_BASE_TIMER22, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER22_DIV _bm(_TIMER22_0,REG_BASE_TIMER22, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER22_LMT _bm(_TIMER22_0,REG_BASE_TIMER22, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER22_TRIG _bm(_TIMER22_1,REG_BASE_TIMER22, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER22_CNT _bm(_TIMER22_1,REG_BASE_TIMER22, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER23_EN _bm(_TIMER23_0,REG_BASE_TIMER23, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER23_PWM_EN _bm(_TIMER23_0,REG_BASE_TIMER23, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER23_CK_EN _bm(_TIMER23_0,REG_BASE_TIMER23, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER23_IRQ_EN _bm(_TIMER23_0,REG_BASE_TIMER23, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER23_CNT_CLR _bm(_TIMER23_0,REG_BASE_TIMER23, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER23_IRQ_CLR _bm(_TIMER23_0,REG_BASE_TIMER23, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER23_IRQ _bm(_TIMER23_0,REG_BASE_TIMER23, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER23_DIV _bm(_TIMER23_0,REG_BASE_TIMER23, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER23_LMT _bm(_TIMER23_0,REG_BASE_TIMER23, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER23_TRIG _bm(_TIMER23_1,REG_BASE_TIMER23, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER23_CNT _bm(_TIMER23_1,REG_BASE_TIMER23, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER24_EN _bm(_TIMER24_0,REG_BASE_TIMER24, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER24_PWM_EN _bm(_TIMER24_0,REG_BASE_TIMER24, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER24_CK_EN _bm(_TIMER24_0,REG_BASE_TIMER24, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER24_IRQ_EN _bm(_TIMER24_0,REG_BASE_TIMER24, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER24_CNT_CLR _bm(_TIMER24_0,REG_BASE_TIMER24, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER24_IRQ_CLR _bm(_TIMER24_0,REG_BASE_TIMER24, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER24_IRQ _bm(_TIMER24_0,REG_BASE_TIMER24, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER24_DIV _bm(_TIMER24_0,REG_BASE_TIMER24, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER24_LMT _bm(_TIMER24_0,REG_BASE_TIMER24, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER24_TRIG _bm(_TIMER24_1,REG_BASE_TIMER24, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER24_CNT _bm(_TIMER24_1,REG_BASE_TIMER24, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER25_EN _bm(_TIMER25_0,REG_BASE_TIMER25, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER25_PWM_EN _bm(_TIMER25_0,REG_BASE_TIMER25, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER25_CK_EN _bm(_TIMER25_0,REG_BASE_TIMER25, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER25_IRQ_EN _bm(_TIMER25_0,REG_BASE_TIMER25, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER25_CNT_CLR _bm(_TIMER25_0,REG_BASE_TIMER25, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER25_IRQ_CLR _bm(_TIMER25_0,REG_BASE_TIMER25, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER25_IRQ _bm(_TIMER25_0,REG_BASE_TIMER25, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER25_DIV _bm(_TIMER25_0,REG_BASE_TIMER25, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER25_LMT _bm(_TIMER25_0,REG_BASE_TIMER25, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER25_TRIG _bm(_TIMER25_1,REG_BASE_TIMER25, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER25_CNT _bm(_TIMER25_1,REG_BASE_TIMER25, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER26_EN _bm(_TIMER26_0,REG_BASE_TIMER26, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER26_PWM_EN _bm(_TIMER26_0,REG_BASE_TIMER26, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER26_CK_EN _bm(_TIMER26_0,REG_BASE_TIMER26, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER26_IRQ_EN _bm(_TIMER26_0,REG_BASE_TIMER26, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER26_CNT_CLR _bm(_TIMER26_0,REG_BASE_TIMER26, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER26_IRQ_CLR _bm(_TIMER26_0,REG_BASE_TIMER26, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER26_IRQ _bm(_TIMER26_0,REG_BASE_TIMER26, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER26_DIV _bm(_TIMER26_0,REG_BASE_TIMER26, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER26_LMT _bm(_TIMER26_0,REG_BASE_TIMER26, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER26_TRIG _bm(_TIMER26_1,REG_BASE_TIMER26, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER26_CNT _bm(_TIMER26_1,REG_BASE_TIMER26, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER27_EN _bm(_TIMER27_0,REG_BASE_TIMER27, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER27_PWM_EN _bm(_TIMER27_0,REG_BASE_TIMER27, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER27_CK_EN _bm(_TIMER27_0,REG_BASE_TIMER27, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER27_IRQ_EN _bm(_TIMER27_0,REG_BASE_TIMER27, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER27_CNT_CLR _bm(_TIMER27_0,REG_BASE_TIMER27, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER27_IRQ_CLR _bm(_TIMER27_0,REG_BASE_TIMER27, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER27_IRQ _bm(_TIMER27_0,REG_BASE_TIMER27, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER27_DIV _bm(_TIMER27_0,REG_BASE_TIMER27, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER27_LMT _bm(_TIMER27_0,REG_BASE_TIMER27, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER27_TRIG _bm(_TIMER27_1,REG_BASE_TIMER27, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER27_CNT _bm(_TIMER27_1,REG_BASE_TIMER27, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER28_EN _bm(_TIMER28_0,REG_BASE_TIMER28, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER28_PWM_EN _bm(_TIMER28_0,REG_BASE_TIMER28, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER28_CK_EN _bm(_TIMER28_0,REG_BASE_TIMER28, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER28_IRQ_EN _bm(_TIMER28_0,REG_BASE_TIMER28, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER28_CNT_CLR _bm(_TIMER28_0,REG_BASE_TIMER28, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER28_IRQ_CLR _bm(_TIMER28_0,REG_BASE_TIMER28, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER28_IRQ _bm(_TIMER28_0,REG_BASE_TIMER28, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER28_DIV _bm(_TIMER28_0,REG_BASE_TIMER28, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER28_LMT _bm(_TIMER28_0,REG_BASE_TIMER28, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER28_TRIG _bm(_TIMER28_1,REG_BASE_TIMER28, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER28_CNT _bm(_TIMER28_1,REG_BASE_TIMER28, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER29_EN _bm(_TIMER29_0,REG_BASE_TIMER29, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER29_PWM_EN _bm(_TIMER29_0,REG_BASE_TIMER29, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER29_CK_EN _bm(_TIMER29_0,REG_BASE_TIMER29, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER29_IRQ_EN _bm(_TIMER29_0,REG_BASE_TIMER29, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER29_CNT_CLR _bm(_TIMER29_0,REG_BASE_TIMER29, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER29_IRQ_CLR _bm(_TIMER29_0,REG_BASE_TIMER29, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER29_IRQ _bm(_TIMER29_0,REG_BASE_TIMER29, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER29_DIV _bm(_TIMER29_0,REG_BASE_TIMER29, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER29_LMT _bm(_TIMER29_0,REG_BASE_TIMER29, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER29_TRIG _bm(_TIMER29_1,REG_BASE_TIMER29, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER29_CNT _bm(_TIMER29_1,REG_BASE_TIMER29, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER30_EN _bm(_TIMER30_0,REG_BASE_TIMER30, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER30_PWM_EN _bm(_TIMER30_0,REG_BASE_TIMER30, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER30_CK_EN _bm(_TIMER30_0,REG_BASE_TIMER30, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER30_IRQ_EN _bm(_TIMER30_0,REG_BASE_TIMER30, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER30_CNT_CLR _bm(_TIMER30_0,REG_BASE_TIMER30, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER30_IRQ_CLR _bm(_TIMER30_0,REG_BASE_TIMER30, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER30_IRQ _bm(_TIMER30_0,REG_BASE_TIMER30, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER30_DIV _bm(_TIMER30_0,REG_BASE_TIMER30, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER30_LMT _bm(_TIMER30_0,REG_BASE_TIMER30, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER30_TRIG _bm(_TIMER30_1,REG_BASE_TIMER30, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER30_CNT _bm(_TIMER30_1,REG_BASE_TIMER30, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER31_EN _bm(_TIMER31_0,REG_BASE_TIMER31, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER31_PWM_EN _bm(_TIMER31_0,REG_BASE_TIMER31, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER31_CK_EN _bm(_TIMER31_0,REG_BASE_TIMER31, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER31_IRQ_EN _bm(_TIMER31_0,REG_BASE_TIMER31, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER31_CNT_CLR _bm(_TIMER31_0,REG_BASE_TIMER31, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER31_IRQ_CLR _bm(_TIMER31_0,REG_BASE_TIMER31, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER31_IRQ _bm(_TIMER31_0,REG_BASE_TIMER31, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER31_DIV _bm(_TIMER31_0,REG_BASE_TIMER31, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER31_LMT _bm(_TIMER31_0,REG_BASE_TIMER31, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER31_TRIG _bm(_TIMER31_1,REG_BASE_TIMER31, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER31_CNT _bm(_TIMER31_1,REG_BASE_TIMER31, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER32_EN _bm(_TIMER32_0,REG_BASE_TIMER32, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER32_PWM_EN _bm(_TIMER32_0,REG_BASE_TIMER32, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER32_CK_EN _bm(_TIMER32_0,REG_BASE_TIMER32, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER32_IRQ_EN _bm(_TIMER32_0,REG_BASE_TIMER32, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER32_CNT_CLR _bm(_TIMER32_0,REG_BASE_TIMER32, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER32_IRQ_CLR _bm(_TIMER32_0,REG_BASE_TIMER32, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER32_IRQ _bm(_TIMER32_0,REG_BASE_TIMER32, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER32_DIV _bm(_TIMER32_0,REG_BASE_TIMER32, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER32_LMT _bm(_TIMER32_0,REG_BASE_TIMER32, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER32_TRIG _bm(_TIMER32_1,REG_BASE_TIMER32, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER32_CNT _bm(_TIMER32_1,REG_BASE_TIMER32, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER33_EN _bm(_TIMER33_0,REG_BASE_TIMER33, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER33_PWM_EN _bm(_TIMER33_0,REG_BASE_TIMER33, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER33_CK_EN _bm(_TIMER33_0,REG_BASE_TIMER33, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER33_IRQ_EN _bm(_TIMER33_0,REG_BASE_TIMER33, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER33_CNT_CLR _bm(_TIMER33_0,REG_BASE_TIMER33, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER33_IRQ_CLR _bm(_TIMER33_0,REG_BASE_TIMER33, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER33_IRQ _bm(_TIMER33_0,REG_BASE_TIMER33, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER33_DIV _bm(_TIMER33_0,REG_BASE_TIMER33, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER33_LMT _bm(_TIMER33_0,REG_BASE_TIMER33, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER33_TRIG _bm(_TIMER33_1,REG_BASE_TIMER33, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER33_CNT _bm(_TIMER33_1,REG_BASE_TIMER33, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER34_EN _bm(_TIMER34_0,REG_BASE_TIMER34, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER34_PWM_EN _bm(_TIMER34_0,REG_BASE_TIMER34, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER34_CK_EN _bm(_TIMER34_0,REG_BASE_TIMER34, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER34_IRQ_EN _bm(_TIMER34_0,REG_BASE_TIMER34, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER34_CNT_CLR _bm(_TIMER34_0,REG_BASE_TIMER34, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER34_IRQ_CLR _bm(_TIMER34_0,REG_BASE_TIMER34, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER34_IRQ _bm(_TIMER34_0,REG_BASE_TIMER34, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER34_DIV _bm(_TIMER34_0,REG_BASE_TIMER34, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER34_LMT _bm(_TIMER34_0,REG_BASE_TIMER34, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER34_TRIG _bm(_TIMER34_1,REG_BASE_TIMER34, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER34_CNT _bm(_TIMER34_1,REG_BASE_TIMER34, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER35_EN _bm(_TIMER35_0,REG_BASE_TIMER35, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER35_PWM_EN _bm(_TIMER35_0,REG_BASE_TIMER35, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER35_CK_EN _bm(_TIMER35_0,REG_BASE_TIMER35, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER35_IRQ_EN _bm(_TIMER35_0,REG_BASE_TIMER35, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER35_CNT_CLR _bm(_TIMER35_0,REG_BASE_TIMER35, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER35_IRQ_CLR _bm(_TIMER35_0,REG_BASE_TIMER35, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER35_IRQ _bm(_TIMER35_0,REG_BASE_TIMER35, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER35_DIV _bm(_TIMER35_0,REG_BASE_TIMER35, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER35_LMT _bm(_TIMER35_0,REG_BASE_TIMER35, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER35_TRIG _bm(_TIMER35_1,REG_BASE_TIMER35, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER35_CNT _bm(_TIMER35_1,REG_BASE_TIMER35, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER36_EN _bm(_TIMER36_0,REG_BASE_TIMER36, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER36_PWM_EN _bm(_TIMER36_0,REG_BASE_TIMER36, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER36_CK_EN _bm(_TIMER36_0,REG_BASE_TIMER36, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER36_IRQ_EN _bm(_TIMER36_0,REG_BASE_TIMER36, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER36_CNT_CLR _bm(_TIMER36_0,REG_BASE_TIMER36, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER36_IRQ_CLR _bm(_TIMER36_0,REG_BASE_TIMER36, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER36_IRQ _bm(_TIMER36_0,REG_BASE_TIMER36, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER36_DIV _bm(_TIMER36_0,REG_BASE_TIMER36, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER36_LMT _bm(_TIMER36_0,REG_BASE_TIMER36, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER36_TRIG _bm(_TIMER36_1,REG_BASE_TIMER36, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER36_CNT _bm(_TIMER36_1,REG_BASE_TIMER36, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER37_EN _bm(_TIMER37_0,REG_BASE_TIMER37, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER37_PWM_EN _bm(_TIMER37_0,REG_BASE_TIMER37, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER37_CK_EN _bm(_TIMER37_0,REG_BASE_TIMER37, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER37_IRQ_EN _bm(_TIMER37_0,REG_BASE_TIMER37, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER37_CNT_CLR _bm(_TIMER37_0,REG_BASE_TIMER37, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER37_IRQ_CLR _bm(_TIMER37_0,REG_BASE_TIMER37, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER37_IRQ _bm(_TIMER37_0,REG_BASE_TIMER37, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER37_DIV _bm(_TIMER37_0,REG_BASE_TIMER37, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER37_LMT _bm(_TIMER37_0,REG_BASE_TIMER37, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER37_TRIG _bm(_TIMER37_1,REG_BASE_TIMER37, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER37_CNT _bm(_TIMER37_1,REG_BASE_TIMER37, (1<<2),CNT) // 16 Bit, 16'h0, R
#define TIMER38_EN _bm(_TIMER38_0,REG_BASE_TIMER38, (0<<2),EN) // 1 Bit, 1'h0, RW
#define TIMER38_PWM_EN _bm(_TIMER38_0,REG_BASE_TIMER38, (0<<2),PWM_EN) // 1 Bit, 1'h0, RW
#define TIMER38_CK_EN _bm(_TIMER38_0,REG_BASE_TIMER38, (0<<2),CK_EN) // 1 Bit, 1'h0, RW
#define TIMER38_IRQ_EN _bm(_TIMER38_0,REG_BASE_TIMER38, (0<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define TIMER38_CNT_CLR _bm(_TIMER38_0,REG_BASE_TIMER38, (0<<2),CNT_CLR) // 1 Bit, 1'h0, W
#define TIMER38_IRQ_CLR _bm(_TIMER38_0,REG_BASE_TIMER38, (0<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define TIMER38_IRQ _bm(_TIMER38_0,REG_BASE_TIMER38, (0<<2),IRQ) // 1 Bit, 1'h0, R
#define TIMER38_DIV _bm(_TIMER38_0,REG_BASE_TIMER38, (0<<2),DIV) // 8 Bit, 8'hff, RW
#define TIMER38_LMT _bm(_TIMER38_0,REG_BASE_TIMER38, (0<<2),LMT) // 16 Bit, 16'hffff, RW
#define TIMER38_TRIG _bm(_TIMER38_1,REG_BASE_TIMER38, (1<<2),TRIG) // 16 Bit, 16'h7fff, RW
#define TIMER38_CNT _bm(_TIMER38_1,REG_BASE_TIMER38, (1<<2),CNT) // 16 Bit, 16'h0, R
#define SPI0_RX_DAT _bm(_SPI0_0,REG_BASE_SPI0, (0<<2),RX_DAT) // 32 Bit, 32'h0, R
#define SPI0_TX_DAT _bm(_SPI0_1,REG_BASE_SPI0, (1<<2),TX_DAT) // 32 Bit, 32'h0, R
#define SPI0_EN _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),EN) // 1 Bit, 1'h0, RW
#define SPI0_CLK_DIV _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),CLK_DIV) // 8 Bit, 8'h0, RW
#define SPI0_BIT_MODE _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define SPI0_CS_OEN _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),CS_OEN) // 1 Bit, 1'h0, RW
#define SPI0_CS_OUT _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),CS_OUT) // 1 Bit, 1'h0, RW
#define SPI0_IRQ_EN _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define SPI0_IRQ_CLR _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define SPI0_IRQ _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),IRQ) // 1 Bit, 1'h0, R
#define SPI0_ONE_BITMODE _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),ONE_BITMODE) // 1 Bit, 1'h0, RW
#define SPI0_CLK_MODE _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),CLK_MODE) // 2 Bit, 1'h0, RW
#define SPI0_WS _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),WS) // 2 Bit, 2'h0, RW
#define SPI0_RW _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),RW) // 2 Bit, 2'h0, RW
#define SPI0_GO _bm(_SPI0_2,REG_BASE_SPI0, (2<<2),GO) // 1 Bit, 1'h0, RW
#define SPI1_RX_DAT _bm(_SPI1_0,REG_BASE_SPI1, (0<<2),RX_DAT) // 32 Bit, 32'h0, R
#define SPI1_TX_DAT _bm(_SPI1_1,REG_BASE_SPI1, (1<<2),TX_DAT) // 32 Bit, 32'h0, R
#define SPI1_EN _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),EN) // 1 Bit, 1'h0, RW
#define SPI1_CLK_DIV _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),CLK_DIV) // 8 Bit, 8'h0, RW
#define SPI1_BIT_MODE _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define SPI1_CS_OEN _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),CS_OEN) // 1 Bit, 1'h0, RW
#define SPI1_CS_OUT _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),CS_OUT) // 1 Bit, 1'h0, RW
#define SPI1_IRQ_EN _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define SPI1_IRQ_CLR _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define SPI1_IRQ _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),IRQ) // 1 Bit, 1'h0, R
#define SPI1_ONE_BITMODE _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),ONE_BITMODE) // 1 Bit, 1'h0, RW
#define SPI1_CLK_MODE _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),CLK_MODE) // 2 Bit, 1'h0, RW
#define SPI1_WS _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),WS) // 2 Bit, 2'h0, RW
#define SPI1_RW _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),RW) // 2 Bit, 2'h0, RW
#define SPI1_GO _bm(_SPI1_2,REG_BASE_SPI1, (2<<2),GO) // 1 Bit, 1'h0, RW
#define SPI2_RX_DAT _bm(_SPI2_0,REG_BASE_SPI2, (0<<2),RX_DAT) // 32 Bit, 32'h0, R
#define SPI2_TX_DAT _bm(_SPI2_1,REG_BASE_SPI2, (1<<2),TX_DAT) // 32 Bit, 32'h0, R
#define SPI2_EN _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),EN) // 1 Bit, 1'h0, RW
#define SPI2_CLK_DIV _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),CLK_DIV) // 8 Bit, 8'h0, RW
#define SPI2_BIT_MODE _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define SPI2_CS_OEN _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),CS_OEN) // 1 Bit, 1'h0, RW
#define SPI2_CS_OUT _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),CS_OUT) // 1 Bit, 1'h0, RW
#define SPI2_IRQ_EN _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define SPI2_IRQ_CLR _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define SPI2_IRQ _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),IRQ) // 1 Bit, 1'h0, R
#define SPI2_ONE_BITMODE _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),ONE_BITMODE) // 1 Bit, 1'h0, RW
#define SPI2_CLK_MODE _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),CLK_MODE) // 2 Bit, 1'h0, RW
#define SPI2_WS _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),WS) // 2 Bit, 2'h0, RW
#define SPI2_RW _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),RW) // 2 Bit, 2'h0, RW
#define SPI2_GO _bm(_SPI2_2,REG_BASE_SPI2, (2<<2),GO) // 1 Bit, 1'h0, RW
#define SPI3_RX_DAT _bm(_SPI3_0,REG_BASE_SPI3, (0<<2),RX_DAT) // 32 Bit, 32'h0, R
#define SPI3_TX_DAT _bm(_SPI3_1,REG_BASE_SPI3, (1<<2),TX_DAT) // 32 Bit, 32'h0, R
#define SPI3_EN _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),EN) // 1 Bit, 1'h0, RW
#define SPI3_CLK_DIV _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),CLK_DIV) // 8 Bit, 8'h0, RW
#define SPI3_BIT_MODE _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define SPI3_CS_OEN _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),CS_OEN) // 1 Bit, 1'h0, RW
#define SPI3_CS_OUT _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),CS_OUT) // 1 Bit, 1'h0, RW
#define SPI3_IRQ_EN _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define SPI3_IRQ_CLR _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define SPI3_IRQ _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),IRQ) // 1 Bit, 1'h0, R
#define SPI3_ONE_BITMODE _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),ONE_BITMODE) // 1 Bit, 1'h0, RW
#define SPI3_CLK_MODE _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),CLK_MODE) // 2 Bit, 1'h0, RW
#define SPI3_WS _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),WS) // 2 Bit, 2'h0, RW
#define SPI3_RW _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),RW) // 2 Bit, 2'h0, RW
#define SPI3_GO _bm(_SPI3_2,REG_BASE_SPI3, (2<<2),GO) // 1 Bit, 1'h0, RW
#define SPI4_RX_DAT _bm(_SPI4_0,REG_BASE_SPI4, (0<<2),RX_DAT) // 32 Bit, 32'h0, R
#define SPI4_TX_DAT _bm(_SPI4_1,REG_BASE_SPI4, (1<<2),TX_DAT) // 32 Bit, 32'h0, R
#define SPI4_EN _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),EN) // 1 Bit, 1'h0, RW
#define SPI4_CLK_DIV _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),CLK_DIV) // 8 Bit, 8'h0, RW
#define SPI4_BIT_MODE _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define SPI4_CS_OEN _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),CS_OEN) // 1 Bit, 1'h0, RW
#define SPI4_CS_OUT _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),CS_OUT) // 1 Bit, 1'h0, RW
#define SPI4_IRQ_EN _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define SPI4_IRQ_CLR _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define SPI4_IRQ _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),IRQ) // 1 Bit, 1'h0, R
#define SPI4_ONE_BITMODE _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),ONE_BITMODE) // 1 Bit, 1'h0, RW
#define SPI4_CLK_MODE _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),CLK_MODE) // 2 Bit, 1'h0, RW
#define SPI4_WS _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),WS) // 2 Bit, 2'h0, RW
#define SPI4_RW _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),RW) // 2 Bit, 2'h0, RW
#define SPI4_GO _bm(_SPI4_2,REG_BASE_SPI4, (2<<2),GO) // 1 Bit, 1'h0, RW
#define SPI5_RX_DAT _bm(_SPI5_0,REG_BASE_SPI5, (0<<2),RX_DAT) // 32 Bit, 32'h0, R
#define SPI5_TX_DAT _bm(_SPI5_1,REG_BASE_SPI5, (1<<2),TX_DAT) // 32 Bit, 32'h0, R
#define SPI5_EN _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),EN) // 1 Bit, 1'h0, RW
#define SPI5_CLK_DIV _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),CLK_DIV) // 8 Bit, 8'h0, RW
#define SPI5_BIT_MODE _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define SPI5_CS_OEN _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),CS_OEN) // 1 Bit, 1'h0, RW
#define SPI5_CS_OUT _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),CS_OUT) // 1 Bit, 1'h0, RW
#define SPI5_IRQ_EN _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define SPI5_IRQ_CLR _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define SPI5_IRQ _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),IRQ) // 1 Bit, 1'h0, R
#define SPI5_ONE_BITMODE _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),ONE_BITMODE) // 1 Bit, 1'h0, RW
#define SPI5_CLK_MODE _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),CLK_MODE) // 2 Bit, 1'h0, RW
#define SPI5_WS _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),WS) // 2 Bit, 2'h0, RW
#define SPI5_RW _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),RW) // 2 Bit, 2'h0, RW
#define SPI5_GO _bm(_SPI5_2,REG_BASE_SPI5, (2<<2),GO) // 1 Bit, 1'h0, RW
#define SPI6_RX_DAT _bm(_SPI6_0,REG_BASE_SPI6, (0<<2),RX_DAT) // 32 Bit, 32'h0, R
#define SPI6_TX_DAT _bm(_SPI6_1,REG_BASE_SPI6, (1<<2),TX_DAT) // 32 Bit, 32'h0, R
#define SPI6_EN _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),EN) // 1 Bit, 1'h0, RW
#define SPI6_CLK_DIV _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),CLK_DIV) // 8 Bit, 8'h0, RW
#define SPI6_BIT_MODE _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define SPI6_CS_OEN _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),CS_OEN) // 1 Bit, 1'h0, RW
#define SPI6_CS_OUT _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),CS_OUT) // 1 Bit, 1'h0, RW
#define SPI6_IRQ_EN _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define SPI6_IRQ_CLR _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define SPI6_IRQ _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),IRQ) // 1 Bit, 1'h0, R
#define SPI6_ONE_BITMODE _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),ONE_BITMODE) // 1 Bit, 1'h0, RW
#define SPI6_CLK_MODE _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),CLK_MODE) // 2 Bit, 1'h0, RW
#define SPI6_WS _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),WS) // 2 Bit, 2'h0, RW
#define SPI6_RW _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),RW) // 2 Bit, 2'h0, RW
#define SPI6_GO _bm(_SPI6_2,REG_BASE_SPI6, (2<<2),GO) // 1 Bit, 1'h0, RW
#define SPI7_RX_DAT _bm(_SPI7_0,REG_BASE_SPI7, (0<<2),RX_DAT) // 32 Bit, 32'h0, R
#define SPI7_TX_DAT _bm(_SPI7_1,REG_BASE_SPI7, (1<<2),TX_DAT) // 32 Bit, 32'h0, R
#define SPI7_EN _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),EN) // 1 Bit, 1'h0, RW
#define SPI7_CLK_DIV _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),CLK_DIV) // 8 Bit, 8'h0, RW
#define SPI7_BIT_MODE _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define SPI7_CS_OEN _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),CS_OEN) // 1 Bit, 1'h0, RW
#define SPI7_CS_OUT _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),CS_OUT) // 1 Bit, 1'h0, RW
#define SPI7_IRQ_EN _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define SPI7_IRQ_CLR _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define SPI7_IRQ _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),IRQ) // 1 Bit, 1'h0, R
#define SPI7_ONE_BITMODE _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),ONE_BITMODE) // 1 Bit, 1'h0, RW
#define SPI7_CLK_MODE _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),CLK_MODE) // 2 Bit, 1'h0, RW
#define SPI7_WS _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),WS) // 2 Bit, 2'h0, RW
#define SPI7_RW _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),RW) // 2 Bit, 2'h0, RW
#define SPI7_GO _bm(_SPI7_2,REG_BASE_SPI7, (2<<2),GO) // 1 Bit, 1'h0, RW
#define SPI8_RX_DAT _bm(_SPI8_0,REG_BASE_SPI8, (0<<2),RX_DAT) // 32 Bit, 32'h0, R
#define SPI8_TX_DAT _bm(_SPI8_1,REG_BASE_SPI8, (1<<2),TX_DAT) // 32 Bit, 32'h0, R
#define SPI8_EN _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),EN) // 1 Bit, 1'h0, RW
#define SPI8_CLK_DIV _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),CLK_DIV) // 8 Bit, 8'h0, RW
#define SPI8_BIT_MODE _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),BIT_MODE) // 1 Bit, 1'h0, RW
#define SPI8_CS_OEN _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),CS_OEN) // 1 Bit, 1'h0, RW
#define SPI8_CS_OUT _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),CS_OUT) // 1 Bit, 1'h0, RW
#define SPI8_IRQ_EN _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define SPI8_IRQ_CLR _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define SPI8_IRQ _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),IRQ) // 1 Bit, 1'h0, R
#define SPI8_ONE_BITMODE _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),ONE_BITMODE) // 1 Bit, 1'h0, RW
#define SPI8_CLK_MODE _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),CLK_MODE) // 2 Bit, 1'h0, RW
#define SPI8_WS _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),WS) // 2 Bit, 2'h0, RW
#define SPI8_RW _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),RW) // 2 Bit, 2'h0, RW
#define SPI8_GO _bm(_SPI8_2,REG_BASE_SPI8, (2<<2),GO) // 1 Bit, 1'h0, RW
#define SYS_H264_RST _bm(_SYS_0,REG_BASE_SYS, (0<<2),H264_RST) // 1 Bit, 1'h0, RW
#define SYS_H265_RST _bm(_SYS_0,REG_BASE_SYS, (0<<2),H265_RST) // 1 Bit, 1'h0, RW
#define SYS_CPU_EN _bm(_SYS_0,REG_BASE_SYS, (0<<2),CPU_EN) // 4 Bit, 4'h0, RW
#define SYS_WDT_CNT _bm(_SYS_1,REG_BASE_SYS, (1<<2),WDT_CNT) // 32 Bit, 32'h0, R
#define SYS_WDT_LMT _bm(_SYS_2,REG_BASE_SYS, (2<<2),WDT_LMT) // 32 Bit, 32'hffffffff, RW
#define SYS_WDT_EN _bm(_SYS_3,REG_BASE_SYS, (3<<2),WDT_EN) // 1 Bit, 1'h0, RW
#define SYS_WDT_CLR _bm(_SYS_3,REG_BASE_SYS, (3<<2),WDT_CLR) // 1 Bit, 1'h0, W
#define SYS_GPIO0_MUX _bm(_SYS_256,REG_BASE_SYS, (256<<2),GPIO0_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO1_MUX _bm(_SYS_257,REG_BASE_SYS, (257<<2),GPIO1_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO2_MUX _bm(_SYS_258,REG_BASE_SYS, (258<<2),GPIO2_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO3_MUX _bm(_SYS_259,REG_BASE_SYS, (259<<2),GPIO3_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO4_MUX _bm(_SYS_260,REG_BASE_SYS, (260<<2),GPIO4_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO5_MUX _bm(_SYS_261,REG_BASE_SYS, (261<<2),GPIO5_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO6_MUX _bm(_SYS_262,REG_BASE_SYS, (262<<2),GPIO6_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO7_MUX _bm(_SYS_263,REG_BASE_SYS, (263<<2),GPIO7_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO8_MUX _bm(_SYS_264,REG_BASE_SYS, (264<<2),GPIO8_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO9_MUX _bm(_SYS_265,REG_BASE_SYS, (265<<2),GPIO9_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO10_MUX _bm(_SYS_266,REG_BASE_SYS, (266<<2),GPIO10_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO11_MUX _bm(_SYS_267,REG_BASE_SYS, (267<<2),GPIO11_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO12_MUX _bm(_SYS_268,REG_BASE_SYS, (268<<2),GPIO12_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO13_MUX _bm(_SYS_269,REG_BASE_SYS, (269<<2),GPIO13_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO14_MUX _bm(_SYS_270,REG_BASE_SYS, (270<<2),GPIO14_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO15_MUX _bm(_SYS_271,REG_BASE_SYS, (271<<2),GPIO15_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO16_MUX _bm(_SYS_272,REG_BASE_SYS, (272<<2),GPIO16_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO17_MUX _bm(_SYS_273,REG_BASE_SYS, (273<<2),GPIO17_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO18_MUX _bm(_SYS_274,REG_BASE_SYS, (274<<2),GPIO18_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO19_MUX _bm(_SYS_275,REG_BASE_SYS, (275<<2),GPIO19_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO20_MUX _bm(_SYS_276,REG_BASE_SYS, (276<<2),GPIO20_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO21_MUX _bm(_SYS_277,REG_BASE_SYS, (277<<2),GPIO21_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO22_MUX _bm(_SYS_278,REG_BASE_SYS, (278<<2),GPIO22_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO23_MUX _bm(_SYS_279,REG_BASE_SYS, (279<<2),GPIO23_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO24_MUX _bm(_SYS_280,REG_BASE_SYS, (280<<2),GPIO24_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO25_MUX _bm(_SYS_281,REG_BASE_SYS, (281<<2),GPIO25_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO26_MUX _bm(_SYS_282,REG_BASE_SYS, (282<<2),GPIO26_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO27_MUX _bm(_SYS_283,REG_BASE_SYS, (283<<2),GPIO27_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO28_MUX _bm(_SYS_284,REG_BASE_SYS, (284<<2),GPIO28_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO29_MUX _bm(_SYS_285,REG_BASE_SYS, (285<<2),GPIO29_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO30_MUX _bm(_SYS_286,REG_BASE_SYS, (286<<2),GPIO30_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO31_MUX _bm(_SYS_287,REG_BASE_SYS, (287<<2),GPIO31_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO32_MUX _bm(_SYS_288,REG_BASE_SYS, (288<<2),GPIO32_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO33_MUX _bm(_SYS_289,REG_BASE_SYS, (289<<2),GPIO33_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO34_MUX _bm(_SYS_290,REG_BASE_SYS, (290<<2),GPIO34_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO35_MUX _bm(_SYS_291,REG_BASE_SYS, (291<<2),GPIO35_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO36_MUX _bm(_SYS_292,REG_BASE_SYS, (292<<2),GPIO36_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO37_MUX _bm(_SYS_293,REG_BASE_SYS, (293<<2),GPIO37_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO38_MUX _bm(_SYS_294,REG_BASE_SYS, (294<<2),GPIO38_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO39_MUX _bm(_SYS_295,REG_BASE_SYS, (295<<2),GPIO39_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO40_MUX _bm(_SYS_296,REG_BASE_SYS, (296<<2),GPIO40_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO41_MUX _bm(_SYS_297,REG_BASE_SYS, (297<<2),GPIO41_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO42_MUX _bm(_SYS_298,REG_BASE_SYS, (298<<2),GPIO42_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO43_MUX _bm(_SYS_299,REG_BASE_SYS, (299<<2),GPIO43_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO44_MUX _bm(_SYS_300,REG_BASE_SYS, (300<<2),GPIO44_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO45_MUX _bm(_SYS_301,REG_BASE_SYS, (301<<2),GPIO45_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO46_MUX _bm(_SYS_302,REG_BASE_SYS, (302<<2),GPIO46_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO47_MUX _bm(_SYS_303,REG_BASE_SYS, (303<<2),GPIO47_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO48_MUX _bm(_SYS_304,REG_BASE_SYS, (304<<2),GPIO48_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO49_MUX _bm(_SYS_305,REG_BASE_SYS, (305<<2),GPIO49_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO50_MUX _bm(_SYS_306,REG_BASE_SYS, (306<<2),GPIO50_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO51_MUX _bm(_SYS_307,REG_BASE_SYS, (307<<2),GPIO51_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO52_MUX _bm(_SYS_308,REG_BASE_SYS, (308<<2),GPIO52_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO53_MUX _bm(_SYS_309,REG_BASE_SYS, (309<<2),GPIO53_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO54_MUX _bm(_SYS_310,REG_BASE_SYS, (310<<2),GPIO54_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO55_MUX _bm(_SYS_311,REG_BASE_SYS, (311<<2),GPIO55_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO56_MUX _bm(_SYS_312,REG_BASE_SYS, (312<<2),GPIO56_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO57_MUX _bm(_SYS_313,REG_BASE_SYS, (313<<2),GPIO57_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO58_MUX _bm(_SYS_314,REG_BASE_SYS, (314<<2),GPIO58_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO59_MUX _bm(_SYS_315,REG_BASE_SYS, (315<<2),GPIO59_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO60_MUX _bm(_SYS_316,REG_BASE_SYS, (316<<2),GPIO60_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO61_MUX _bm(_SYS_317,REG_BASE_SYS, (317<<2),GPIO61_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO62_MUX _bm(_SYS_318,REG_BASE_SYS, (318<<2),GPIO62_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO63_MUX _bm(_SYS_319,REG_BASE_SYS, (319<<2),GPIO63_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO64_MUX _bm(_SYS_320,REG_BASE_SYS, (320<<2),GPIO64_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO65_MUX _bm(_SYS_321,REG_BASE_SYS, (321<<2),GPIO65_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO66_MUX _bm(_SYS_322,REG_BASE_SYS, (322<<2),GPIO66_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO67_MUX _bm(_SYS_323,REG_BASE_SYS, (323<<2),GPIO67_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO68_MUX _bm(_SYS_324,REG_BASE_SYS, (324<<2),GPIO68_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO69_MUX _bm(_SYS_325,REG_BASE_SYS, (325<<2),GPIO69_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO70_MUX _bm(_SYS_326,REG_BASE_SYS, (326<<2),GPIO70_MUX) // 2 Bit, 2'h0, RW
#define SYS_GPIO71_MUX _bm(_SYS_327,REG_BASE_SYS, (327<<2),GPIO71_MUX) // 2 Bit, 2'h0, RW
#define H264_IHSIZE _bm(_H264_0,REG_BASE_H264, (0<<2),IHSIZE) // 12 Bit, 12'h0, RW
#define H264_IVSIZE _bm(_H264_0,REG_BASE_H264, (0<<2),IVSIZE) // 12 Bit, 12'h0, RW
#define H264_YSTRIDEX _bm(_H264_2,REG_BASE_H264, (2<<2),YSTRIDEX) // 12 Bit, 12'h0, RW
#define H264_CSTRIDEX _bm(_H264_2,REG_BASE_H264, (2<<2),CSTRIDEX) // 12 Bit, 12'h0, RW
#define H264_TMBNUM _bm(_H264_4,REG_BASE_H264, (4<<2),TMBNUM) // 14 Bit, 14'h0, RW
#define H264_IDR_FLAG _bm(_H264_5,REG_BASE_H264, (5<<2),IDR_FLAG) // 1 Bit, 1'h0, RW
#define H264_PFRAME _bm(_H264_5,REG_BASE_H264, (5<<2),PFRAME) // 1 Bit, 1'h0, RW
#define H264_CURYBUF _bm(_H264_22,REG_BASE_H264, (22<<2),CURYBUF) // 32 Bit, 32'h0, RW
#define H264_CURCBUF _bm(_H264_24,REG_BASE_H264, (24<<2),CURCBUF) // 32 Bit, 32'h0, RW
#define H264_CUREBUF _bm(_H264_26,REG_BASE_H264, (26<<2),CUREBUF) // 32 Bit, 32'h0, RW
#define H264_REFYBUF _bm(_H264_28,REG_BASE_H264, (28<<2),REFYBUF) // 32 Bit, 32'h0, RW
#define H264_REFCBUF _bm(_H264_30,REG_BASE_H264, (30<<2),REFCBUF) // 32 Bit, 32'h0, RW
#define H264_RECYBUF _bm(_H264_32,REG_BASE_H264, (32<<2),RECYBUF) // 32 Bit, 32'h0, RW
#define H264_RECCBUF _bm(_H264_34,REG_BASE_H264, (34<<2),RECCBUF) // 32 Bit, 32'h0, RW
#define H264_STRMBUF _bm(_H264_36,REG_BASE_H264, (36<<2),STRMBUF) // 32 Bit, 32'h0, RW
#define H264_SBUFEND _bm(_H264_38,REG_BASE_H264, (38<<2),SBUFEND) // 32 Bit, 32'h0, RW
#define H264_STPSBUFW _bm(_H264_40,REG_BASE_H264, (40<<2),STPSBUFW) // 32 Bit, 32'h0, RW
#define H264_STPIBUFW _bm(_H264_42,REG_BASE_H264, (42<<2),STPIBUFW) // 32 Bit, 32'h0, RW
#define H264_STPIBUFR _bm(_H264_44,REG_BASE_H264, (44<<2),STPIBUFR) // 32 Bit, 32'h0, RW
#define H264_SBUFSIZE _bm(_H264_46,REG_BASE_H264, (46<<2),SBUFSIZE) // 32 Bit, 32'h0, RW
#define H264_VLCBURST _bm(_H264_48,REG_BASE_H264, (48<<2),VLCBURST) // 4 Bit, 4'h0, RW
#define H264_ENCBURST _bm(_H264_48,REG_BASE_H264, (48<<2),ENCBURST) // 4 Bit, 4'h0, RW
#define H264_USEIADDR _bm(_H264_50,REG_BASE_H264, (50<<2),USEIADDR) // 1 Bit, 1'h0, RW
#define H264_KEEP4KB _bm(_H264_50,REG_BASE_H264, (50<<2),KEEP4KB) // 1 Bit, 1'h0, RW
#define H264_CLKRATIO _bm(_H264_50,REG_BASE_H264, (50<<2),CLKRATIO) // 2 Bit, 2'h0, RW
#define H264_KEEPORDER _bm(_H264_50,REG_BASE_H264, (50<<2),KEEPORDER) // 1 Bit, 1'h0, RW
#define H264_RNDROBIN _bm(_H264_50,REG_BASE_H264, (50<<2),RNDROBIN) // 1 Bit, 1'h0, RW
#define H264_EXTROBIN _bm(_H264_50,REG_BASE_H264, (50<<2),EXTROBIN) // 1 Bit, 1'h0, RW
#define H264_BIGENDIAN _bm(_H264_50,REG_BASE_H264, (50<<2),BIGENDIAN) // 1 Bit, 1'h0, RW
#define H264_PREBITS _bm(_H264_106,REG_BASE_H264, (106<<2),PREBITS) // 28 Bit, 28'h0, RW
#define H264_ROI_EN_0 _bm(_H264_128,REG_BASE_H264, (128<<2),ROI_EN_0) // 1 Bit, 1'h0, RW
#define H264_ROI_Q_0 _bm(_H264_128,REG_BASE_H264, (128<<2),ROI_Q_0) // 6 Bit, 6'h0, RW
#define H264_ROI_XS_0 _bm(_H264_130,REG_BASE_H264, (130<<2),ROI_XS_0) // 8 Bit, 8'h0, RW
#define H264_ROI_XE_0 _bm(_H264_130,REG_BASE_H264, (130<<2),ROI_XE_0) // 8 Bit, 8'h0, RW
#define H264_ROI_YS_0 _bm(_H264_130,REG_BASE_H264, (130<<2),ROI_YS_0) // 8 Bit, 8'h0, RW
#define H264_ROI_YE_0 _bm(_H264_130,REG_BASE_H264, (130<<2),ROI_YE_0) // 8 Bit, 8'h0, RW
#define H264_ROI_EN_1 _bm(_H264_132,REG_BASE_H264, (132<<2),ROI_EN_1) // 1 Bit, 1'h0, RW
#define H264_ROI_Q_1 _bm(_H264_132,REG_BASE_H264, (132<<2),ROI_Q_1) // 6 Bit, 6'h0, RW
#define H264_ROI_XS_1 _bm(_H264_134,REG_BASE_H264, (134<<2),ROI_XS_1) // 8 Bit, 8'h0, RW
#define H264_ROI_XE_1 _bm(_H264_134,REG_BASE_H264, (134<<2),ROI_XE_1) // 8 Bit, 8'h0, RW
#define H264_ROI_YS_1 _bm(_H264_134,REG_BASE_H264, (134<<2),ROI_YS_1) // 8 Bit, 8'h0, RW
#define H264_ROI_YE_1 _bm(_H264_134,REG_BASE_H264, (134<<2),ROI_YE_1) // 8 Bit, 8'h0, RW
#define H264_ROI_EN_2 _bm(_H264_136,REG_BASE_H264, (136<<2),ROI_EN_2) // 1 Bit, 1'h0, RW
#define H264_ROI_Q_2 _bm(_H264_136,REG_BASE_H264, (136<<2),ROI_Q_2) // 6 Bit, 6'h0, RW
#define H264_ROI_XS_2 _bm(_H264_138,REG_BASE_H264, (138<<2),ROI_XS_2) // 8 Bit, 8'h0, RW
#define H264_ROI_XE_2 _bm(_H264_138,REG_BASE_H264, (138<<2),ROI_XE_2) // 8 Bit, 8'h0, RW
#define H264_ROI_YS_2 _bm(_H264_138,REG_BASE_H264, (138<<2),ROI_YS_2) // 8 Bit, 8'h0, RW
#define H264_ROI_YE_2 _bm(_H264_138,REG_BASE_H264, (138<<2),ROI_YE_2) // 8 Bit, 8'h0, RW
#define H264_ROI_EN_3 _bm(_H264_140,REG_BASE_H264, (140<<2),ROI_EN_3) // 1 Bit, 1'h0, RW
#define H264_ROI_Q_3 _bm(_H264_140,REG_BASE_H264, (140<<2),ROI_Q_3) // 6 Bit, 6'h0, RW
#define H264_ROI_XS_3 _bm(_H264_142,REG_BASE_H264, (142<<2),ROI_XS_3) // 8 Bit, 8'h0, RW
#define H264_ROI_XE_3 _bm(_H264_142,REG_BASE_H264, (142<<2),ROI_XE_3) // 8 Bit, 8'h0, RW
#define H264_ROI_YS_3 _bm(_H264_142,REG_BASE_H264, (142<<2),ROI_YS_3) // 8 Bit, 8'h0, RW
#define H264_ROI_YE_3 _bm(_H264_142,REG_BASE_H264, (142<<2),ROI_YE_3) // 8 Bit, 8'h0, RW
#define H264_MEMYBGN _bm(_H264_160,REG_BASE_H264, (160<<2),MEMYBGN) // 32 Bit, 32'h0, RW
#define H264_MEMYEND _bm(_H264_162,REG_BASE_H264, (162<<2),MEMYEND) // 32 Bit, 32'h0, RW
#define H264_MEMCBGN _bm(_H264_164,REG_BASE_H264, (164<<2),MEMCBGN) // 32 Bit, 32'h0, RW
#define H264_MEMCEND _bm(_H264_166,REG_BASE_H264, (166<<2),MEMCEND) // 32 Bit, 32'h0, RW
#define H264_MIHSIZE _bm(_H264_192,REG_BASE_H264, (192<<2),MIHSIZE) // 12 Bit, 12'h0, RW
#define H264_MIVSIZE _bm(_H264_192,REG_BASE_H264, (192<<2),MIVSIZE) // 12 Bit, 12'h0, RW
#define H264_MCABACIDC _bm(_H264_194,REG_BASE_H264, (194<<2),MCABACIDC) // 2 Bit, 2'h0, RW
#define H264_MCABACEN _bm(_H264_194,REG_BASE_H264, (194<<2),MCABACEN) // 1 Bit, 1'h0, RW
#define H264_MQSCALE _bm(_H264_196,REG_BASE_H264, (196<<2),MQSCALE) // 6 Bit, 6'h0, RW
#define H264_MPFRAME _bm(_H264_198,REG_BASE_H264, (198<<2),MPFRAME) // 1 Bit, 1'h0, RW
#define AES_SRC _bm(_AES_0,REG_BASE_AES, (0<<2),SRC) // 32 Bit, 32'h0, RW
#define AES_DST _bm(_AES_1,REG_BASE_AES, (1<<2),DST) // 32 Bit, 32'h0, RW
#define AES_LEN _bm(_AES_2,REG_BASE_AES, (2<<2),LEN) // 32 Bit, 32'h0, RW
#define AES_IRQ _bm(_AES_3,REG_BASE_AES, (3<<2),IRQ) // 1 Bit, 1'h0, R
#define AES_IRQ_EN _bm(_AES_3,REG_BASE_AES, (3<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define AES_IRQ_CLR _bm(_AES_3,REG_BASE_AES, (3<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define AES_KEY_LEN _bm(_AES_3,REG_BASE_AES, (3<<2),KEY_LEN) // 1 Bit, 1'h0, RW
#define AES_MODE _bm(_AES_3,REG_BASE_AES, (3<<2),MODE) // 1 Bit, 1'h0, RW
#define AES_REQ _bm(_AES_3,REG_BASE_AES, (3<<2),REQ) // 1 Bit, 1'h0, RW
#define AES_KEY_255_224 _bm(_AES_4,REG_BASE_AES, (4<<2),KEY_255_224) // 32 Bit, 32'h0, RW
#define AES_KEY_223_192 _bm(_AES_5,REG_BASE_AES, (5<<2),KEY_223_192) // 32 Bit, 32'h0, RW
#define AES_KEY_191_160 _bm(_AES_6,REG_BASE_AES, (6<<2),KEY_191_160) // 32 Bit, 32'h0, RW
#define AES_KEY_159_128 _bm(_AES_7,REG_BASE_AES, (7<<2),KEY_159_128) // 32 Bit, 32'h0, RW
#define AES_KEY_127_96 _bm(_AES_8,REG_BASE_AES, (8<<2),KEY_127_96) // 32 Bit, 32'h0, RW
#define AES_KEY_95_64 _bm(_AES_9,REG_BASE_AES, (9<<2),KEY_95_64) // 32 Bit, 32'h0, RW
#define AES_KEY_63_32 _bm(_AES_10,REG_BASE_AES, (10<<2),KEY_63_32) // 32 Bit, 32'h0, RW
#define AES_KEY_31_0 _bm(_AES_11,REG_BASE_AES, (11<<2),KEY_31_0) // 32 Bit, 32'h0, RW
#define SHA_SRC _bm(_SHA_0,REG_BASE_SHA, (0<<2),SRC) // 32 Bit, 32'h0, RW
#define SHA_LEN _bm(_SHA_2,REG_BASE_SHA, (2<<2),LEN) // 32 Bit, 32'h0, RW
#define SHA_IRQ _bm(_SHA_3,REG_BASE_SHA, (3<<2),IRQ) // 1 Bit, 1'h0, R
#define SHA_IRQ_EN _bm(_SHA_3,REG_BASE_SHA, (3<<2),IRQ_EN) // 1 Bit, 1'h0, RW
#define SHA_IRQ_CLR _bm(_SHA_3,REG_BASE_SHA, (3<<2),IRQ_CLR) // 1 Bit, 1'h0, W
#define SHA_MODE _bm(_SHA_3,REG_BASE_SHA, (3<<2),MODE) // 1 Bit, 1'h0, RW
#define SHA_REQ _bm(_SHA_3,REG_BASE_SHA, (3<<2),REQ) // 1 Bit, 1'h0, RW
#define SHA_DIGEST_255_224 _bm(_SHA_4,REG_BASE_SHA, (4<<2),DIGEST_255_224) // 32 Bit, 32'h0, RW
#define SHA_DIGEST_223_192 _bm(_SHA_5,REG_BASE_SHA, (5<<2),DIGEST_223_192) // 32 Bit, 32'h0, RW
#define SHA_DIGEST_191_160 _bm(_SHA_6,REG_BASE_SHA, (6<<2),DIGEST_191_160) // 32 Bit, 32'h0, RW
#define SHA_DIGEST_159_128 _bm(_SHA_7,REG_BASE_SHA, (7<<2),DIGEST_159_128) // 32 Bit, 32'h0, RW
#define SHA_DIGEST_127_96 _bm(_SHA_8,REG_BASE_SHA, (8<<2),DIGEST_127_96) // 32 Bit, 32'h0, RW
#define SHA_DIGEST_95_64 _bm(_SHA_9,REG_BASE_SHA, (9<<2),DIGEST_95_64) // 32 Bit, 32'h0, RW
#define SHA_DIGEST_63_32 _bm(_SHA_10,REG_BASE_SHA, (10<<2),DIGEST_63_32) // 32 Bit, 32'h0, RW
#define SHA_DIGEST_31_0 _bm(_SHA_11,REG_BASE_SHA, (11<<2),DIGEST_31_0) // 32 Bit, 32'h0, RW

extern void GpioInit(void);
extern void GpioEi(UINT nCH);
extern void GpioDi(UINT nCH);
extern void GpioRiseEdge(UINT nCH);
extern void GpioFallEdge(UINT nCH);
extern void GpioInDir(UINT nCH);
extern void GpioOutDir(UINT nCH);
extern UINT GpioGetDir(UINT nCH);
extern void GpioSetHi(UINT nCH);
extern void GpioSetLo(UINT nCH);
extern void GpioFuncPin(UINT nCH);
extern void GpioFuncPinOff(UINT nCH);
extern UINT GpioGetFuncPin(UINT nCH);
extern UINT GpioGetPin(UINT nCH);
extern void IsrGpio(void *ctx);

extern void UartInit(UINT nCH, UINT Speed_Hz);
extern void UartTx(UINT nCH, char data);
extern UINT UartRx(UINT nCH);
extern UINT UartGetByte(UINT nCH);
extern UINT UartRxExist(UINT nCH);

extern void I2cInit(UINT nCH, UINT Speed_Hz);
extern UINT I2cWrite(UINT nCH, BYTE dat, BYTE last, BYTE repeat);
extern UINT I2cRead(UINT nCH, BYTE last, BYTE repeat);
extern UINT I2cCheck(UINT nCH, BYTE addr);

extern void SpiInit(UINT nCH, UINT Speed_Hz, UINT WordSize, UINT BitDirection);
extern void SpiDeinit(UINT nCH);
extern void SpiCsLo(UINT nCH);
extern void SpiCsHi(UINT nCH);
extern void SpiWrite(UINT nCH, BYTE *dat);
extern void SpiRead(UINT nCH, BYTE *dat);
extern void SpiRW(UINT nCH, BYTE *WrDat, BYTE *RdDat);

extern void DmaInit(void);
extern void DmaEi(UINT nCH);
extern void DmaDi(UINT nCH);
extern void DmaMemCpy_isr(UINT nCH, BYTE *apbDst, BYTE *apbSrc, UINT anNum);
extern void DmaMemCpy_isr_async(UINT nCH, BYTE *apbDst, BYTE *apbSrc, UINT anNum);
extern void DmaMemSet_isr(UINT nCH, BYTE *apbDst, BYTE abVal, UINT anNum);
extern void DmaMemSet_isr_async(UINT nCH, BYTE *apbDst, BYTE abVal, UINT anNum);

extern void TimerInit(UINT nCH);

extern WORD Checksum16(BYTE *apbDst, UINT anNum);

extern void AesInit(void);
extern void Aes128Enc(BYTE *apbDst, BYTE *apbSrc, UINT len);
extern void Aes128Dec(BYTE *apbDst, BYTE *apbSrc, UINT len);
extern void Aes256Enc(BYTE *apbDst, BYTE *apbSrc, UINT len);
extern void Aes256Dec(BYTE *apbDst, BYTE *apbSrc, UINT len);

extern void Sha224(BYTE *apbSrc, UINT len);
extern void Sha256(BYTE *apbSrc, UINT len);


#endif
